### Package Desc: HomeBrew软件包管理工具
### Web : brew.sh

function brew_clean_caches() {                                                         # Desc: function: brew_clean_caches:Brew Delete (one or multiple) Caches files of  mnemonic (e.g. uninstall)
  customcd $(brew --cache)
  rm -f ./*phar ./*patch ./*diff ./*xz ./*gz ./*bz2 ./*zip ./*rock
  rm -rf ./*git
  customcd $(brew --cache)/downloads
  rm -f ./*phar ./*patch ./*diff ./*xz ./*gz ./*bz2 ./*zip ./*rock
  echo "Common files already deleted, You have to clean other files manually!!!"
}
alias bcc="brew_clean_caches"                                                          # Desc: alias: bcc: brew_clean_caches命令的别名

function fzf_brew_delete_by_select() {                                                 # Desc: function: fzf_brew_delete_by_select:Brew Delete (one or multiple) selected application(s) mnemonic (e.g. uninstall)
  local uninst=$(brew leaves | fzf -m $FZF_CUSTOM_PARAMS \
  --header="$(_buildFzfHeader '' 'fzf_brew_delete_by_select')") # brew leaves 查看所有安装不包括依赖安装

  if [[ $uninst ]]; then
    for prog in $(echo $uninst); do
        brew uninstall $prog; 
    done;
  fi
}
alias fbd="fzf_brew_delete_by_select"                                                  # Desc: alias: fbd:fzf_brew_delete_by_select命令的别名

function fzf_brew_update_by_select() {                                                 # Desc: function: fzf_brew_update_by_select:Brew Update (one or multiple) selected application(s) mnemonic [B]rew [U]pdate [P]lugin
  local upd=$(brew leaves | fzf -m $FZF_CUSTOM_PARAMS \
  --header="$(_buildFzfHeader '' 'fzf_brew_update_by_select')")

  if [[ $upd ]]; then
    upd=$(echo $upd | sed 's/\n/ /g')
    brew upgrade $upd;
    #for prog in $(echo $upd);do
    #    brew upgrade $prog;
    #done;
  fi
}
alias fbup="fzf_brew_update_by_select"                                                 # Desc: alias: fbup:fzf_brew_update_by_select命令的别名

function fzf_brew_upgrade_by_select() {                                                # Desc: function: fzf_brew_upgrade_by_select:Brew upgrade (one or multiple)
  local upgrads=$(brew outdated | fzf -m $FZF_CUSTOM_PARAMS \
  --header="$(_buildFzfHeader '' 'fzf_brew_upgrade_by_select')")
  if [[ $upgrads ]]; then
    upgrades=$(echo $upgrads | sed 's/\n/ /g')
    brew upgrade $upgrades
    #for prog in $(echo $upgrads); do
    #  brew upgrade $prog
    #done
  fi
}
alias fbug="fzf_brew_upgrade_by_select"                                                # Desc: alias: fbug: fzf_brew_upgrade_by_select命令的别名,Brew upgrade (one or multiple)

function reinstall_neovim() {                                                          # Desc: function: reinstall_neovim:重新安装neovim
  brew reinstall neovim --HEAD
}
alias renvim="reinstall_neovim"                                                        # Desc: alias: renvim: reinstall_neovim命令的别名,重新安装neovim

function fzf_brew_install_by_select() {                                                # Desc: function: fzf_brew_install_by_select:Brew Install (one or multiple) selected application(s) using "brew search" as source input mnemonic [B]rew [I]nstall [P]lugin
  local inst=$(brew search | fzf -m $FZF_CUSTOM_PARAMS \
  --header="$(_buildFzfHeader '' 'fzf_brew_install_by_select')")

  if [[ $inst ]]; then
    for prog in $(echo $inst);do
        brew install $prog;
    done;
  fi
}
alias fbis="fzf_brew_install_by_select"                                                # Desc: alias: fbis: fzf_brew_install_by_select命令的别名

function fzf_brew_install_or_remove() {                                                # Desc: function: fzf_brew_install_or_remove: Fully manage brew installation and suppression, and then some.
  # filename: fzf_brew_install_or_remove
  #!/usr/bin/env zsh
  # Fully manage brew installation and suppression, and then some.
  # needs zsh, jq, bat
  # Inspired by:
  # - https://github.com/raycast/extensions/tree/main/extensions/brew
  # - https://github.com/junegunn/fzf/wiki/examples#dnf
  readonly wait_click="echo $'\n\e[34mPress any key to continue...' && read -rsk 1"
  readonly jq_all='(. | map(.cask_tokens) | flatten | map(split("/")[-1] + " (cask)"))[], (. | map(.formula_names) | flatten)[]'
  readonly jq_installed='(.formulae[] | .name), (.casks[] | .token + " (cask)")'
  readonly tmp_file="$(mktemp)"
  trap "rm -f $tmp_file" EXIT
  readonly reload="reload%case \$(cat $tmp_file) in
    install) { echo Install mode; brew tap-info --json --installed | jq --raw-output '$jq_all' | sort } ;;
    *) { echo Remove mode; brew info --json=v2 --installed | jq --raw-output '$jq_installed' | sort } ;;
  esac%"
  readonly state="cat $tmp_file"
  readonly nextstate="execute-silent%case \$(cat $tmp_file) in install) echo rm > $tmp_file ;; *) echo install > $tmp_file ;; esac%"
  readonly bold="\e[1m"
  readonly reset="\e[0m"
  readonly italic="\e[3m"
  readonly gray="\e[30m"
  readonly c="\e[1;36m"
  readonly d="\e[1;37m"
  readonly help="${bold}${c}[${d}B${c}]${d}rew ${c}[${d}I${c}]${d}nteractive${reset}
  ${italic}Tab${reset}     Switch between install mode and remove mode
  ${italic}Enter${reset}   Select formula or cask for installation or deletion (depends on mode)
  ${italic}ctrl-c${reset}  Show formula or cask installation [s]ource code
  ${italic}ctrl-j${reset}  Show formula or cask [J]SON information
  ${italic}crtl-e${reset}  [E]dit formula or cask source code
  ${italic}crtl-y${reset}  Copy application
  ${italic}crtl-s${reset}  Switch between sort or no-sort mode
  ${italic}crtl-/${reset}  Switch between show or hide preview window
  ${italic}?${reset}       Help (this page)
  ${italic}ESC${reset}     Quit
  It is also advised you use auto-updates, this can be done with:
      brew autoupdate start --upgrade --cleanup --enable-notification
  "
  echo install > $tmp_file
  {
    echo "Install mode (? for help)"; brew tap-info --json --installed | jq --raw-output "$jq_all" | sort 
  } |
    fzf $FZF_CUSTOM_PARAMS \
        --preview-window right:70%:rounded:hidden:wrap \
        --bind="enter:execute(
        if [[ '{2}' == '(cask)' ]]; then
          brew \$($state) --cask {1}
        else
          brew \$($state) {1}
        fi
        $wait_click)+$reload" \
        --bind='ctrl-c:preview(
        bat --color=always $(brew edit --print-path {1}) --style=header
      )' \
        --bind="ctrl-j:preview:brew info --json=v2 {1} | jq '
        (.formulae + .casks)[0] | with_entries(select(try (.value | length > 0)))
      ' | bat --plain --language=json --color=always" \
        --bind="ctrl-e:execute:
        EDITOR='code --wait' brew edit {1}
        bat --color=always --language=markdown --plain <<-MD
          To install the formulae (or cask) you edited with your changes, use:

              brew reinstall --build-from-source {1}
        MD
        $wait_click" \
        --bind="tab:$nextstate+$reload" \
        --bind="?:preview:printf '$help'" \
        --preview='brew info {1} | bat --color=always --language=Markdown --style=plain' \
        --header="$(_buildFzfHeader '' 'fzf_brew_install_or_remove')"

}
alias fbm="fzf_brew_install_or_remove"                                                 # Desc: alias: fbm: fzf_brew_install_or_remove命令的别名,Fully manage brew installation and suppression, and then some.
