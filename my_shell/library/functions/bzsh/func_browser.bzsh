#!/usr/bin/env bash

SEARCH_BROWSER="/Applications/Safari.app"
[[ -d "/Applications/Google Chrome.app" ]] && SEARCH_BROWSER="/Applications/Google Chrome.app"

function sgoogle() { #Desc: function: sgoogle:GOOGLE搜索引擎搜索
    echo "open -a $SEARCH_BROWSER https://www.google.com/search?q= $1";
    open -a "$SEARCH_BROWSER" "https://www.google.com/search?q= $1"；
}
alias google="sgoogle"  # Desc: alias: google:sgoogle命令的别名

function sbaidu() { #Desc: function: sbaidu:百度搜索引擎搜索
    echo "open -a $SEARCH_BROWSER https://www.baidu.com/s?wd= $1";
    open -a "$SEARCH_BROWSER" "https://www.baidu.com/s?wd= $1";
}
alias baidu="sbaidu"    # Desc: alias: baidu:sbaidu命令的别名

function sbing() { #Desc: function: sbing:Bing搜索引擎搜索
    echo "open -a $SEARCH_BROWSER http://www.bing.com/search?q= $1";
    open -a "$SEARCH_BROWSER" "http://www.bing.com/search?q= $1";
}
alias bing="sbing"      # Desc: alias: bing:sbing命令的别名

function syahoo() { #Desc: function: syahoo:Yahoo搜索引擎搜索
    echo "open -a $SEARCH_BROWSER http://www.yahoo.com/search?q= $1";
    open -a "$SEARCH_BROWSER" "http://www.yahoo.com/search?q= $1";
}
alias yahoo="syahoo"        # Desc: alias: yahoo:syahoo命令的别名

function swikipedia() { #Desc: function: syahoo:wikipedia搜索引擎搜索
    echo "open -a $SEARCH_BROWSER http://en.wikipedia.org/wiki/Special:Search?search= $1";
    open -a "$SEARCH_BROWSER"  "http://en.wikipedia.org/wiki/Special:Search?search= $1";
}
alias wikipedia="swikipedia"    # Desc: alias: wikipedia:swikipedia命令的别名

function browser() { # Desc: function: browser:浏览器中打开网址
    local BROWSERPATH=$1
    local DEFAULTURL="https://www.google.com/"
    [[ ! -d "$BROWSERPATH/" ]] && echo "Does not found Firefox " && exit 1

    [ "" = "$2" ] && url=$DEFAULTURL || url=$2

    if [ ! -f $url ]; then
        if [ "${url:0:6}" != "http://" ] && [ "${url:0:7}" != "https://" ]; then
            url="http://$url"
        fi
    fi
    /usr/bin/open -a "$BROWSERPATH" "$url"
}
alias browse="browser"      # Desc: alias: browse:browser命令的别名

function firefox() { # Desc: function: firefox:火狐浏览器打开网址
    local BROWSERPATH="/Applications/Firefox.app"
    browser $BROWSERPATH $1
}

function safari() { # Desc: function: safari:Safari浏览器中打开网址
    local BROWSERPATH="/Applications/Safari.app"
    browser $BROWSERPATH $1
}

function chrome() { # Desc: function: chrome:Chrome浏览器中打开网址
    local BROWSERPATH="/Applications/Google Chrome.app"
    browser $BROWSERPATH $1
}

function brave() { # Desc: function: brave:brave浏览器中打开网址
    local BROWSERPATH="/Applications/Brave Browser.app"
    browser $BROWSERPATH $1
}

function stealth-browser() { # Desc: function: stealth-browser:隐身Chrome浏览器打开网址
    local MYRUNTIME=$(cat $HOME/.myruntime)
    local DEFAULTBROWSER="/Applications/Google Chrome.app"
    [[ -f $MYRUNTIME/tools/m_proxy ]] && source $MYRUNTIME/tools/m_proxy
    [[ -d "$DEFAULTBROWSER" ]] && open  "/Applications/Google Chrome.app" --args -proxy-server=socks5://${ip}:${port} --incognito
}
alias sb="stealth-browser"      # Desc: alias: sb:stealth-browser命令的别名

function chromium_history() { # Desc: function: chromium_history:列出Chromium核心的浏览器的历史
    if [ "" = "$1" ]; then
        echo "Does not send param!"
        return 1
    fi
    local cols sep
    export cols=$(( COLUMNS / 3 ))
    export sep='{::}'
    rm -f /tmp/h
    cp -r -f "$1" /tmp/h
    sqlite3 -separator $sep /tmp/h \
        "select title, url from urls order by last_visit_time desc" |
    ruby -ne '
    cols = ENV["cols"].to_i
    title, url = $_.split(ENV["sep"])
    len = 0
    puts "\x1b[36m" + title.each_char.take_while { |e|
    if len < cols
        len += e =~ /\p{Han}|\p{Katakana}|\p{Hiragana}|\p{Hangul}/ ? 2 : 1
    end
    }.join + " " * (2 + cols - len) + "\x1b[m" + url' |
    fzf --ansi --multi --no-hscroll --tiebreak=index |
    sed 's#.*\(https*://\)#\1#' | xargs open -a "$2"
}
alias ch="chromium_history"     # Desc: alias: ch:chromium_history命令的别名

function chrome_default_history() { # Desc: function: chrome_default_history:列出Chrome默认账户的浏览器的历史
    chromium_history ~/Library/Application\ Support/Google/Chrome/Default/History "/Applications/Google Chrome.app"
}
alias c="chrome_default_history"    # Desc: alias: c:chrome_default_history命令的别名

function chrome_profile1_history() { # Desc: function: chrome_profile1_history:列出Chrome Profile 1账户的浏览器的历史
    chromium_history ~/Library/Application\ Support/Google/Chrome/Profile\ 1/History "/Applications/Google Chrome.app"
}
alias c2="chrome_profile1_history"      # Desc: alias: c2:chrome_profile1_history命令的别名

function brave_default_history() { # Desc: function: brave_default_history:列出Brave默认账户的浏览器的历史
    chromium_history ~/Library/Application\ Support/BraveSoftware/Brave-Browser/Default/History "/Applications/Brave Browser.app"
}
alias bh="brave_default_history"    # Desc: alias: bh:brave_default_history命令的别名

function chromium_bookmarks() { # Desc: function: chroomium_bookmarks:列出列出Chromium核心的浏览器的书签
    if [ "" = "$1" ]; then
        echo "Does not send param!"
        return 1
    else
        rm -f /tmp/bookmarks
        cp -r -f "$1" /tmp/bookmarks
    fi

     jq_script='
        def ancestors: while(. | length >= 2; del(.[-1,-2]));
        . as $in | paths(.url?) as $key | $in | getpath($key) | {name,url, path: [$key[0:-2] | ancestors as $a | $in | getpath($a) | .name?] | reverse | join("/") } | .path + "/" + .name + "\t" + .url'

    jq -r "$jq_script" < /tmp/bookmarks \
        | sed -E $'s/(.*)\t(.*)/\\1\t\x1b[36m\\2\x1b[m/g' \
        | fzf --ansi \
        | cut -d$'\t' -f2 \
        | xargs open -a "$2"
}
alias cb="chromium_bookmarks"   # Desc: alias: cb:chromium_bookmarks命令的别名

function chrome_default_bookmarks() { # Desc: function: chrome_default_bookmarks:列出Chrome默认账户的书签
    chromium_bookmarks ~/Library/Application\ Support/Google/Chrome/Default/Bookmarks "/Applications/Google Chrome.app"
}
alias cb1="chrome_default_bookmarks"    # Desc: alias: cb1:chrome_default_bookmarks命令的别名

function chrome_profile1_bookmarks() { # Desc: function: chrome_default_bookmarks:列出Chrome Profile 1账户的书签
    chromium_bookmarks ~/Library/Application\ Support/Google/Chrome/Profile\ 1/Bookmarks "/Applications/Google Chrome.app"
}
alias cb2="chrome_profile1_bookmarks"       # Desc: alias: cb2:chrome_profile1_bookmarks命令的别名

function brave_default_bookmarks() { # Desc: function: brave_default_bookmarks:列出Brave默认账户的书签
    chromium_bookmarks ~/Library/Application\ Support/BraveSoftware/Brave-Browser/Default/Bookmarks "/Applications/Brave Browser.app"
}
alias bb="brave_default_bookmarks"      # Desc: alias: bb:brave_default_bookmarks命令的别名

function fzf_mark_by_buku() { # Desc: function: fzf_mark_by_buku:buku数据库配合fzf列出网址收藏
    # save newline separated string into an array
    mapfile -t website <<< "$(buku -p -f 5 | column -ts$'\t' | fzf --multi)"

    # open each website
    for i in "${website[@]}"; do
        index="$(echo "$i" | awk '{print $1}')"
        buku -p "$index"
        buku -o "$index"
    done
}
alias fb="fzf_mark_by_buku"     # Desc: alias: fb:fzf_mark_by_buku命令的别名

function goodfon() { # Desc: function: goodfon:打开goodfon.ru
    local DEFAULTBROWSER="/Applications/Firefox.app"      #default browser for open goodfon
    local SECONDBROWSER="/Applications/Google Chrome.app" #second browser for open goodfon
    local URL="https://www.goodfon.ru/"

    if [ "$1" = "" ]; then
        [[ -d "$DEFAULTBROWSER" ]] && /usr/bin/open -a "$DEFAULTBROWSER" "$URL"
    fi

    if [ "$1" = "chrome" ] || [ "$1" = "google" ]; then
        [[ -d "$SECONDBROWSER" ]] && /usr/bin/open -a "$SECONDBROWSER" "$URL"
    fi
}
alias gfon="goodfon"      # Desc: alias: gf:goodfon命令的别名

function _checkDirFull() {
    if [ "" != "$1" ]; then
        local maxsize=2000
        local picpath=$(dirname $1)
        local cursize=$(ls $picpath | wc -l)

        if [ "$cursize" -ge "$maxsize" ]; then
            curcount=$(echo $picpath | tr -cd "[0-9]")
            tmpmiddlecount=$curcount
            curcount=$(($curcount+1))
            [[ $curcount -le 9 ]] && curcount=0$curcount
            prefixpath=$(echo $picpath | sed "s,${tmpmiddlecount},,g")
            newpath="${prefixpath}$curcount"
            [[ ! -d $newpath ]] && mkdir $newpath
            mv $1 $newpath/$(basename $1)
            echo "$1 $newpath/$(basename $1)"
        fi
    fi
}

if [ "zsh" = "$nowshell" ] || [ "bash" = "$nowshell" ]; then
    function autoDiffDownloadPicureByName() { # Desc: function: 利用fswatch监控目录，通过比对文本中文件名，实现自动去重下载的图片
        ##图片文件夹路径
        local PICPATH=$(cat ~/.picpath)
        local MYRUNTIME=$(cat $HOME/.myruntime)
        ##数据库文件路径
        local DBFILE=$MYRUNTIME/tools/pictures_db.log
        ##去重文件数据库文件路径（仅有文件名）
        local FULLFILENAMESDB=$MYRUNTIME/tools/pictures_fullfilenames_db.log
        local COMMANDBIN=sqlite3
        local FULLFILENAMESDB2=$MYRUNTIME/tools/fullfilenames_db.log.sqlitedb
        IFSHOWTHUMB=0
        RECORDTYPE=0
        local msg=""
    
        [[ "" != "$1" ]] && IFSHOWTHUMB=$1
        [[ "" != "$2" ]] && RECORDTYPE=$2
    
        curprocessid=$$
        #调起后台脚本，监控火狐浏览器状态，如果浏览器进程消失，则杀死下面的进程
        tmpshell=$(mktemp)
        # echo $tmpshell
        if [ -f $tmpshell ]; then
            echo "#!/usr/bin/env bash\n" > $tmpshell
            echo "curfierfoxcounts=1\n" >> $tmpshell
            echo "while [ \"\$curfierfoxcounts\" -gt \"0\" ]; do\n" >> $tmpshell
            echo "    curfierfoxcounts=\$(ps -ef | grep 'Firefox.app/Contents/MacOS/firefox' | grep -v grep | wc -l)\n" >> $tmpshell
            echo "    sleep 1\n" >> $tmpshell
            echo "done\n" >> $tmpshell
            echo "if [ \"\$curfierfoxcounts\" -lt \"1\" ]; then\n" >> $tmpshell
            echo "    ps -ef | grep \"fswatch -0 \$PICPATH\" | grep -v grep | awk '{print \$2}' | xargs kill\n" >> $tmpshell
            echo "fi\n" >> $tmpshell
        fi
        bash $tmpshell > /dev/null 2>&1 &

        if [[ ! -f $FULLFILENAMESDB2 ]]; then
            local SQL="CREATE TABLE pictures ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'pic_name' TEXT DEFAULT NULL, 'created_at' DATETIME NOT NULL DEFAULT CURRENT_TIME, 'pic_path' TEXT DEFAULT NULL);"
            $COMMANDBIN $FULLFILENAMESDB2 <<EOF
$SQL
EOF
        fi

        fswatch -0 $PICPATH | while read -d "" event; do
            if [ "$(ps -ef | grep 'Firefox.app/Contents/MacOS/firefox' | grep -v grep | wc -l)" -gt "0" ]; then
                fullfilename=${event}
                filename=$(basename $fullfilename)
                showtype=0
                if [ "0" = "$RECORDTYPE" ]; then
                    if [ "$(grep -w $filename $FULLFILENAMESDB)" != "" ]; then
                        tmpresult=$(find $PICPATH/ -type f -name "$filename"  | grep -v "$fullfilename" | wc -l)
                        if [ "$tmpresult" -gt "1" ]; then
                            msg="Already deleted ..."
                            trash $fullfilename
                        fi
                    else
                        echo $filename >> $FULLFILENAMESDB
                        msg="Already recorded ..."
                        showtype=1
                        echo $fullfilename >> $DBFILE
                    fi
                elif [ "1" = "$RECORDTYPE" ]; then
                    [[ ! -f $FULLFILENAMESDB2 ]] && echo "The sqlite db file does not exists !" && return 1
                    local SQL="select * from pictures where pic_name = '"${filename}"';"
                    local tmpresult=$($COMMANDBIN $FULLFILENAMESDB2 <<EOF
$SQL
EOF
)
                    if [ "$tmpresult" != "" ]; then
                        tmpresult=$(find $PICPATH/ -type f -name "$filename"  | grep -v "$fullfilename" | wc -l)
                        if [ "$tmpresult" -gt "1" ]; then
                            msg="Already deleted ..."
                            trash $fullfilename
                        fi
                    else
                        local tmp_path=$(dirname $fullfilename)
                        SQL='insert into pictures (pic_name, pic_path) values ("'"$filename"'", "'"$tmp_path"'");'
                        $COMMANDBIN $FULLFILENAMESDB2 <<EOF
$SQL
EOF
                        msg="Already recorded ..."
                        showtype=1
                        echo $fullfilename >> $DBFILE
                    fi
                fi
                echo $msg
                _checkDirFull $fullfilename #存放目录满的情况下自动生成目录并迁移新文件
                if [ "$IFSHOWTHUMB" -eq "1" ] && [ "$showtype" -eq "1" ]; then
                    #展示图片
                    printf '\033]1337;File=inline=1;width=20%%;preserveAspectRatio=0'
                    printf ":"
                    base64 < "$fullfilename"
                    printf '\a\n'
                fi
            fi
        done
        rm -f $tmpshell
        ps -ef | grep "fswatch -0 $PICPATH" | grep -v grep | awk '{print $2}' | xargs kill > /dev/null
    }
    
    function goodfonWithAutoDiff() { # Desc: function: 打开goodfon.ru后 通过目录监控自动过滤重名文件
        goodfon
        autoDiffDownloadPicureByName $@
    }
    alias gfa="goodfonWithAutoDiff"     # Desc: alias: gfa:goodfonWithAutoDiff命令的别名

    function goodfonWithAutoDiff2() { # Desc: function: 打开goodfon.ru后 通过目录监控自动过滤重名文件
        goodfon
        autoDiffDownloadPicureByName 0 1
    }
    alias gfa2="goodfonWithAutoDiff2"   # Desc: alias: gfa2:goodfonWithAutoDiff2命令的别名
fi
