### Package Desc: 浏览器相关命令


SEARCH_BROWSER="/Applications/Safari.app"
#[[ -d "/Applications/Google Chrome.app" ]] && SEARCH_BROWSER="/Applications/Google Chrome.app"
function search_by_github() {                                                       # Desc: function: search_by_github:Github搜索
    if [ "" != "$1" ]; then
        echo "open -a $SEARCH_BROWSER https://github.com/search?q=${1}&type=repositories";
        open -a "$SEARCH_BROWSER" "https://github.com/search?q=${1}&type=repositories";
    else
        hascommand=$(ifHasCommand gum)
        if [ $hascommand = 1 ]; then
            text=$(gum input --placeholder "Type search text")
        else
            read text
        fi
        open -a "$SEARCH_BROWSER" "https://github.com/search?q=${text}&type=repositories"
    fi
}
alias github="search_by_github"                                                     # Desc: alias: github:search_by_github,Github搜索

function search_by_google() {                                                       # Desc: function: search_by_google:GOOGLE搜索引擎搜索
    if [ "" != "$1" ]; then
        echo "open -a $SEARCH_BROWSER https://www.google.com/search?q=${1}";
        open -a "$SEARCH_BROWSER" "https://www.google.com/search?q=${1}";
    else
        hascommand=$(ifHasCommand gum)
        if [ $hascommand = 1 ]; then
            text=$(gum input --placeholder "Type search text")
        else
            read text
        fi
        open -a "$SEARCH_BROWSER" "https://www.google.com/search?q=${text}"
    fi
}
alias google="search_by_google"                                                     # Desc: alias: google:search_by_google命令的别名,GOOGLE搜索引擎搜索

function search_by_baidu() {                                                        # Desc: function: search_by_baidu:百度搜索引擎搜索
    if [ "" != "$1" ]; then
        echo "open -a $SEARCH_BROWSER https://www.baidu.com/s?wd=${1}";
        open -a "$SEARCH_BROWSER" "https://www.baidu.com/s?wd=${1}";
    else
        hascommand=$(ifHasCommand gum)
        if [ $hascommand = 1 ]; then
            text=$(gum input --placeholder "Type search text")
        else
            read text
        fi
        open -a "$SEARCH_BROWSER" "https://www.baidu.com/s?wd=${text}"
    fi
}
alias baidu="search_by_baidu"                                                       # Desc: alias: baidu:search_by_baidu命令的别名,百度搜索引擎搜索

function search_by_bing() {                                                         # Desc: function: search_by_bing:Bing搜索引擎搜索
    if [ "" != "$1" ]; then
        echo "open -a $SEARCH_BROWSER http://www.bing.com/search?q=${1}";
        open -a "$SEARCH_BROWSER" "http://www.bing.com/search?q=${1}";
    else
        hascommand=$(ifHasCommand gum)
        if [ $hascommand = 1 ]; then
            text=$(gum input --placeholder "Type search text")
        else
            read text
        fi
        open -a "$SEARCH_BROWSER" "http://www.bing.com/search?q=${text}"
    fi
}
alias bing="search_by_bing"                                                         # Desc: alias: bing:search_by_bing命令的别名,Bing搜索引擎搜索

function search_by_yahoo() {                                                        # Desc: function: search_by_yahoo:Yahoo搜索引擎搜索
    if [ "" != "$1" ]; then
        echo "open -a $SEARCH_BROWSER http://www.yahoo.com/search?q=${1}";
        open -a "$SEARCH_BROWSER" "http://www.yahoo.com/search?q=${1}";
    else
        hascommand=$(ifHasCommand gum)
        if [ $hascommand = 1 ]; then
            text=$(gum input --placeholder "Type search text")
        else
            read text
        fi
        open -a "$SEARCH_BROWSER" "http://www.yahoo.com/search?q=${text}"
    fi
}
alias yahoo="search_by_yahoo"                                                       # Desc: alias: yahoo:search_by_yahoo命令的别名,Yahoo搜索引擎搜索

function search_by_wikipedia() {                                                    # Desc: function: search_by_wikipedia:wikipedia搜索引擎搜索
    if [ "" != "$1" ]; then
        echo "open -a $SEARCH_BROWSER http://en.wikipedia.org/wiki/Special:Search?search=${1}";
        open -a "$SEARCH_BROWSER"  "http://en.wikipedia.org/wiki/Special:Search?search=${1}";
    else
        hascommand=$(ifHasCommand gum)
        if [ $hascommand = 1 ]; then
            text=$(gum input --placeholder "Type search text")
        else
            read text
        fi
        open -a "$SEARCH_BROWSER" "http://en.wikipedia.org/wiki/Special:Search?search=${text}"
    fi
}
alias wikipedia="search_by_wikipedia"                                               # Desc: alias: wikipedia:search_by_wikipedia命令的别名,wikipedia搜索引擎搜索

function open_in_browser() {                                                        # Desc: function: open_in_browser:浏览器中打开网址
    local BROWSERPATH=$1
    local DEFAULTURL="https://www.google.com/"
    [[ ! -d "$BROWSERPATH/" ]] && echo "Does not found Firefox " && exit 1

    [ "" = "$2" ] && url=$DEFAULTURL || url=$2

    if [ ! -f $url ]; then
        if [ "${url:0:6}" != "http://" ] && [ "${url:0:7}" != "https://" ]; then
            url="http://$url"
        fi
    fi
    /usr/bin/open -a "$BROWSERPATH" "$url"
}
alias browse="open_in_browser"                                                      # Desc: alias: browse:open_in_browser命令的别名,浏览器中打开网址

function firefox() {                                                                # Desc: function: firefox:火狐浏览器打开网址
    local BROWSERPATH="/Applications/Firefox.app"
    open_in_browser $BROWSERPATH $1
}

function safari() {                                                                 # Desc: function: safari:Safari浏览器中打开网址
    local BROWSERPATH="/Applications/Safari.app"
    open_in_browser $BROWSERPATH $1
}

function chrome() {                                                                 # Desc: function: chrome:Chrome浏览器中打开网址
    local BROWSERPATH="/Applications/Google Chrome.app"
    open_in_browser $BROWSERPATH $1
}

function brave() {                                                                  # Desc: function: brave:brave浏览器中打开网址
    local BROWSERPATH="/Applications/Brave Browser.app"
    open_in_browser $BROWSERPATH $1
}

function stealth-browser() {                                                        # Desc: function: stealth-browser:隐身Chrome浏览器打开网址
    local MYRUNTIME=$(cat $HOME/.myruntime)
    local DEFAULTBROWSER="/Applications/Google Chrome.app"
    [[ -f $MYRUNTIME/tools/m_proxy ]] && source $MYRUNTIME/tools/m_proxy
    [[ -d "$DEFAULTBROWSER" ]] && open  "/Applications/Google Chrome.app" --args -proxy-server=socks5://${ip}:${port} --incognito
}
alias sb="stealth-browser"                                                          # Desc: alias: sb:stealth-browser命令的别名,隐身Chrome浏览器打开网址

function fzf_safari_history() {                                                     # Desc: function: fzf_safari_history: 读取当前用户的safari浏览器历史
    sqlite3 $HOME/Library/Safari/History.db "SELECT datetime(h.visit_time + 978307200, 'unixepoch', 'localtime') as date, i.url FROM history_visits h INNER JOIN history_items i ON h.history_item = i.id" | fzf --ansi --multi --no-hscroll --tiebreak=index $FZF_CUSTOM_PARAMS \
        --preview ' echo -n {} | awk -F"|" "{print \$2}"' \
        --bind 'focus:transform-preview-label:echo -n {} | awk -F "|" "{print \"[\" \$1 \"]\"}"' \
        --bind 'f12:execute-silent(echo {} | grep -Eo "https?://[^[:space:]]+" | pbcopy)+abort' \
        --bind 'enter:become(open $(echo {} | grep -Eo "https?://[^[:space:]]+"))' \
        --header="$(_buildFzfHeader '' 'fzf_safari_history')"
}
alias fsh="fzf_safari_history"                                                      # Desc: alias: fsh: fzf_safari_history命令的别名,读取当前用户的safari浏览器历史

function fzf_safari_bookmarks() {                                                   # Desc: function: fzf_safari_bookmarks: 读取当前用户的safari浏览器书签
    plutil -convert xml1 -o - $HOME/Library/Safari/Bookmarks.plist | grep -E "<string>http[s]?://|<string>.*<\/string>" | sed -E 's/<string>(http[s]?:\/\/[^<]*)<\/string>/\1/g' | grep -B 1 "http[s]\?:" | sed -E 's/<string>([^<]*)<\/string>/\1/g' | sed 's/^--$/|seprator|/g' | sed 's/^[[:space:]]*//g' | sed 's/^$/No title .../g' | tr '\n' ' ' | sed 's/|seprator|/\n/g' | fzf --ansi --multi --no-hscroll --tiebreak=index $FZF_CUSTOM_PARAMS \
        --preview ' echo -n {}' \
        --bind 'focus:transform-preview-label:echo -n {} ' \
        --bind 'f12:execute-silent(echo {} | grep -E "http[s]?://.*" | pbcopy)+abort' \
        --bind 'enter:become(open $(echo {} | grep -Eo "https?://[^[:space:]]+"))' \
        --header="$(_buildFzfHeader '' 'fzf_safari_bookmarks')"
}
alias fsb="fzf_safari_bookmarks"                                                    # Desc: alias: fsb: fzf_safari_bookmarks命令的别名,读取当前用户的safari浏览器书签

function chromium_history() {                                                       # Desc: function: chromium_history:列出Chromium核心的浏览器的历史
    if [ "" = "$1" ]; then
        echo "Does not send param!"
        return 1
    fi
    local cols sep
    export cols=$(( COLUMNS / 3 ))
    export sep='{::}'
    rm -f ${TMPDIR:-/tmp}/h
    cp -r -f "$1" ${TMPDIR:-/tmp}/h
    sqlite3 -separator $sep ${TMPDIR:-/tmp}/h \
        "select title, url from urls order by last_visit_time desc" |
    ruby -ne '
    cols = ENV["cols"].to_i
    title, url = $_.split(ENV["sep"])
    len = 0
    puts "\x1b[36m" + title.each_char.take_while { |e|
    if len < cols
        len += e =~ /\p{Han}|\p{Katakana}|\p{Hiragana}|\p{Hangul}/ ? 2 : 1
    end
    }.join + " " * (2 + cols - len) + "\x1b[m" + url' |
    fzf --ansi --multi --no-hscroll --tiebreak=index $FZF_CUSTOM_PARAMS \
        --preview ' echo -n {} ' \
        --bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
        --bind 'f12:execute-silent(echo {} | grep -Eo "https?://[^[:space:]]+" | pbcopy)+abort' \
        --header="$(_buildFzfHeader '' 'chromium_history')" \
        | sed 's#.*\(https*://\)#\1#' | xargs open -a "$2"
}
alias ch="chromium_history"                                                         # Desc: alias: ch:chromium_history命令的别名,列出Chromium核心的浏览器的历史

function chrome_default_history() {                                                 # Desc: function: chrome_default_history:列出Chrome默认账户的浏览器的历史
    chromium_history $HOME/Library/Application\ Support/Google/Chrome/Default/History "/Applications/Google Chrome.app"
}
alias cdh="chrome_default_history"                                                  # Desc: alias: cdh:chrome_default_history命令的别名,列出Chrome默认账户的浏览器的历史

function chrome_profile1_history() {                                                # Desc: function: chrome_profile1_history:列出Chrome Profile 1账户的浏览器的历史
    chromium_history $HOME/Library/Application\ Support/Google/Chrome/Profile\ 1/History "/Applications/Google Chrome.app"
}
alias cph="chrome_profile1_history"                                                 # Desc: alias: cph:chrome_profile1_history命令的别名,列出Chrome Profile 1账户的浏览器的历史

function brave_default_history() {                                                  # Desc: function: brave_default_history:列出Brave默认账户的浏览器的历史
    chromium_history $HOME/Library/Application\ Support/BraveSoftware/Brave-Browser/Default/History "/Applications/Brave Browser.app"
}
alias bdh="brave_default_history"                                                   # Desc: alias: bdh:brave_default_history命令的别名,列出Brave默认账户的浏览器的历史

function browser_history_manage() {                                                 # Desc: function: browser_history_manage:利用fzf管理Safari、Chrome、Brave浏览器的历史
    while true; do
        local action=$(printf "%s\n" \
            "🔎 Safari" \
            "🔎 Chrome_Default" \
            "🔎 Chrome_Profile1" \
            "🔎 Brave_Default" \
            "🚪 退出系统" | \
            fzf --header " 浏览器历史记录管理系统 " \
                --prompt "主菜单 ❯ " \
                --preview-window=up:30% \
                --preview "echo '选择操作类型'" \
                --height=15% \
                --header="$(_buildFzfHeader '' 'browser_history_manage')" \
                --reverse)

        case $action in
            *Safari*) fzf_safari_history ;;
            *Chrome_Default*) chrome_default_history ;;
            *Chrome_Profile1*) chrome_profile1_history ;;
            *Brave_Default*) brave_default_history ;;
            *退出系统*) break 1 && return ;;
        esac
    done
}
alias bh="browser_history_manage"                                                   # Desc: alias: bh:browser_history_manage命令的别名,利用fzf管理Safari、Chrome、Brave浏览器的历史
if [[ -n "$ZSH_VERSION" ]]; then
    zle -N browser_history_manage
    bindkey '∫' browser_history_manage   #//Alt B 执行browser_history_manage函数
elif [[ -n "$BASH_VERSION" ]]; then
    export -f browser_history_manage
    bind '"∫":"browser_history_manage;\n"'   #//Alt B 执行browser_history_manage函数
fi

function chromium_bookmarks() {                                                     # Desc: function: chroomium_bookmarks:列出列出Chromium核心的浏览器的书签
    if [ "" = "$1" ]; then
        echo "Does not send param!"
        return 1
    else
        rm -f ${TMPDIR:-/tmp}/bookmarks
        cp -r -f "$1" ${TMPDIR:-/tmp}/bookmarks
    fi

     jq_script='
        def ancestors: while(. | length >= 2; del(.[-1,-2]));
        . as $in | paths(.url?) as $key | $in | getpath($key) | {name,url, path: [$key[0:-2] | ancestors as $a | $in | getpath($a) | .name?] | reverse | join("/") } | .path + "/" + .name + "\t" + .url'

    jq -r "$jq_script" < ${TMPDIR:-/tmp}/bookmarks \
        | sed -E $'s/(.*)\t(.*)/\\1\t\x1b[36m\\2\x1b[m/g' \
        | fzf --ansi $FZF_CUSTOM_PARAMS \
              --bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
              --bind 'f12:execute-silent(echo {} | grep -Eo "https?://[^[:space:]]+" | pbcopy)+abort' \
              --header="$(_buildFzfHeader '' 'chromium_bookmarks')" \
        | cut -d$'\t' -f2 \
        | xargs open -a "$2"
}
alias cb="chromium_bookmarks"                                                       # Desc: alias: cb:chromium_bookmarks命令的别名,列出列出Chromium核心的浏览器的书签

function chrome_default_bookmarks() {                                               # Desc: function: chrome_default_bookmarks:列出Chrome默认账户的书签
    chromium_bookmarks $HOME/Library/Application\ Support/Google/Chrome/Default/Bookmarks "/Applications/Google Chrome.app"
}
alias cdb="chrome_default_bookmarks"                                                # Desc: alias: cdb:chrome_default_bookmarks命令的别名,列出Chrome默认账户的书签

function chrome_profile1_bookmarks() {                                              # Desc: function: chrome_default_bookmarks:列出Chrome Profile 1账户的书签
    chromium_bookmarks $HOME/Library/Application\ Support/Google/Chrome/Profile\ 1/Bookmarks "/Applications/Google Chrome.app"
}
alias cpb="chrome_profile1_bookmarks"                                               # Desc: alias: cpb:chrome_profile1_bookmarks命令的别名,列出Chrome Profile 1账户的书签

function brave_default_bookmarks() {                                                # Desc: function: brave_default_bookmarks:列出Brave默认账户的书签
    chromium_bookmarks $HOME/Library/Application\ Support/BraveSoftware/Brave-Browser/Default/Bookmarks "/Applications/Brave Browser.app"
}
alias bdb="brave_default_bookmarks"                                                 # Desc: alias: bdb:brave_default_bookmarks命令的别名,列出Brave默认账户的书签

function fzf_mark_by_buku() {                                                       # Desc: function: fzf_mark_by_buku:buku数据库配合fzf列出网址收藏
    website=( $(buku --suggest -p -f 5 | column -ts$'\t' | fzf $FZF_CUSTOM_PARAMS \
    --bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
    --bind 'f12:execute-silent(buku --nostdin -p {1} | grep -Eo "https?://[^[:space:]]+" | pbcopy)+abort' \
    --preview='buku --nostdin -p {1}' \
    --header="$(_buildFzfHeader '' 'fzf_mark_by_buku')" \
    --multi ) )
    # open each website
    for i in "${website[@]}"; do
        index="$(echo -n "$i" | awk '{print $1}')"
        buku -p "$index"
        buku -o "$index"
    done
}
alias fmb="fzf_mark_by_buku"                                                        # Desc: alias: fmb:fzf_mark_by_buku命令的别名,buku数据库配合fzf列出网址收藏

function browser_bookmarks_manage() {                                               # Desc: function: browser_bookmarks_manage:利用fzf管理Safari、Chrome、Brave浏览器的收藏
    while true; do
        local action=$(printf "%s\n" \
            "🔎 Safari" \
            "🔎 Chrome_Default" \
            "🔎 Chrome_Profile1" \
            "🔎 Brave_Default" \
            "🔎 Bubu" \
            "🚪 退出系统" | \
            fzf --header " 浏览器收藏记录管理系统 " \
                --prompt "主菜单 ❯ " \
                --preview-window=up:30% \
                --preview "echo '选择操作类型'" \
                --height=15% \
                --header="$(_buildFzfHeader '' 'browser_bookmarks_manage')" \
                --reverse)

        case $action in
            *Safari*) fzf_safari_bookmarks ;;
            *Chrome_Default*) chrome_default_bookmarks ;;
            *Chrome_Profile1*) chrome_profile1_bookmarks ;;
            *Brave_Default*) brave_default_bookmarks ;;
            *Bubu*) fzf_mark_by_buku ;;
            *退出系统*) break 1 && return ;;
        esac
    done
}
alias bm="browser_bookmarks_manage"                                                 # Desc: alias: bm:browser_bookmarks_manage命令的别名,利用fzf管理Safari、Chrome、Brave浏览器的收藏
if [ "zsh" = "$nowshell" ]; then
    zle -N browser_bookmarks_manage
    bindkey 'µ' browser_bookmarks_manage   #//Alt M 执行browser_bookmarks_manage函数
else
    export -f browser_bookmarks_manage
    bind '"µ":"browser_bookmarks_manage;\n"'   #//Alt M 执行browser_bookmarks_manage函数
fi

function goodfon() {                                                                # Desc: function: goodfon:打开goodfon.ru
    local DEFAULTBROWSER="/Applications/Firefox.app"      #default browser for open goodfon
    local SECONDBROWSER="/Applications/Google Chrome.app" #second browser for open goodfon
    local URL="https://www.goodfon.ru/"

    if [ "$1" = "" ]; then
        [[ -d "$DEFAULTBROWSER" ]] && /usr/bin/open -a "$DEFAULTBROWSER" "$URL"
    fi

    if [ "$1" = "chrome" ] || [ "$1" = "google" ]; then
        [[ -d "$SECONDBROWSER" ]] && /usr/bin/open -a "$SECONDBROWSER" "$URL"
    fi
}
alias gfon="goodfon"                                                                # Desc: alias: gf:goodfon命令的别名,打开goodfon.ru

function _checkDirFull() {                                                          # Desc: function: _checkDirFull:验证文件夹内文件数量是否到达指定数值
    [[ -z "$1" ]] && return
    
    local fullfilename="$1"
    local picpath=$(dirname "$fullfilename")
    local maxsize=2000
    
    # 确保文件仍然存在
    [[ ! -f "$fullfilename" ]] && return
    
    local cursize=$(ls -1 "$picpath" | wc -l | tr -d ' ')
    
    if (( cursize >= maxsize )); then
        local curcount=$(basename "$picpath" | tr -cd '0-9')
        [[ -z "$curcount" ]] && curcount=0
        
        local nextcount=$((curcount + 1))
        [[ $nextcount -le 9 ]] && nextcount="0$nextcount"
        
        local prefixpath=$(dirname "$picpath")
        local newpath="${prefixpath}/${nextcount}"
        
        mkdir -p "$newpath"
        mv -f "$fullfilename" "$newpath/$(basename "$fullfilename")"
        
        logger -t "PicMonitor" "Moved $fullfilename to $newpath"
    fi
}

function autoDiffDownloadPicureByName() {                                           # Desc: function: 利用fswatch监控目录，通过比对文本中文件名，实现自动去重下载的图片
        local PICPATH=$(cat "$HOME/.picpath")
    local MYRUNTIME=$(cat "$HOME/.myruntime")
    local DBFILE="$MYRUNTIME/tools/pictures_db.log"
    local FULLFILENAMESDB="$MYRUNTIME/tools/pictures_fullfilenames_db.log"
    local COMMANDBIN=sqlite3
    local FULLFILENAMESDB2="$MYRUNTIME/tools/fullfilenames_db.log.sqlitedb"
    IFSHOWTHUMB=0
    RECORDTYPE=0
    local msg=""

    [[ -n "$1" ]] && IFSHOWTHUMB=$1
    [[ -n "$2" ]] && RECORDTYPE=$2

    # 锁文件路径
    local LOCKFILE="$MYRUNTIME/tools/pic_monitor.lock"
    
    # 检查是否已有实例运行
    if [[ -f "$LOCKFILE" ]]; then
        local pid=$(cat "$LOCKFILE")
        if ps -p "$pid" >/dev/null; then
            echo "监控进程已在运行 (PID: $pid)"
            return 1
        else
            rm -f "$LOCKFILE"
        fi
    fi
    
    # 创建锁文件
    echo $$ > "$LOCKFILE"
    trap "rm -f '$LOCKFILE'" EXIT

    # 创建必要的目录和文件
    mkdir -p "$(dirname "$DBFILE")"
    touch "$DBFILE" "$FULLFILENAMESDB"

    if [[ ! -f "$FULLFILENAMESDB2" ]]; then
        local SQL="CREATE TABLE pictures ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'pic_name' TEXT DEFAULT NULL, 'created_at' DATETIME NOT NULL DEFAULT CURRENT_TIME, 'pic_path' TEXT DEFAULT NULL);"
        $COMMANDBIN "$FULLFILENAMESDB2" <<EOF
$SQL
EOF
    fi

    # 浏览器进程检测函数
    is_browser_running() {
        pgrep -f 'Firefox\.app/Contents/MacOS/firefox' >/dev/null
    }

    # 启动文件监控（后台进程）
    (
        # 文件监控进程
        fswatch -0 "$PICPATH" | while IFS= read -r -d '' event; do
            [[ ! -f "$event" ]] && continue
            local fullfilename="$event"
            local filename=$(basename -- "$fullfilename")
            [[ "$filename" =~ ^\._ ]] && continue

            local showtype=0
            local tmpresult=""
            
            case $RECORDTYPE in
                0)
                    if grep -q --fixed-strings -- "$filename" "$FULLFILENAMESDB"; then
                        tmpresult=$(find "$PICPATH" -type f -name "$filename" ! -path "$fullfilename" | wc -l)
                        if (( tmpresult > 0 )); then
                            msg="Duplicate found, deleting..."
                            /bin/rm -f "$fullfilename"
                        else
                            msg="File exists but no duplicate found"
                        fi
                    else
                        echo "$filename" >> "$FULLFILENAMESDB"
                        msg="New file recorded"
                        showtype=1
                        echo "$fullfilename" >> "$DBFILE"
                    fi
                    ;;
                1)
                    local SQL="SELECT COUNT(*) FROM pictures WHERE pic_name = '${filename//\'/\'\'}';"
                    tmpresult=$($COMMANDBIN "$FULLFILENAMESDB2" "$SQL")
                    
                    if (( tmpresult > 0 )); then
                        tmpresult=$(find "$PICPATH" -type f -name "$filename" ! -path "$fullfilename" | wc -l)
                        if (( tmpresult > 0 )); then
                            msg="Duplicate found (SQL), deleting..."
                            /bin/rm -f "$fullfilename"
                        else
                            msg="File exists in DB but no duplicate found"
                        fi
                    else
                        local tmp_path=$(dirname "$fullfilename")
                        SQL="INSERT INTO pictures (pic_name, pic_path) VALUES ('${filename//\'/\'\'}', '${tmp_path//\'/\'\'}');"
                        $COMMANDBIN "$FULLFILENAMESDB2" "$SQL"
                        msg="New file recorded in SQLite"
                        showtype=1
                        echo "$fullfilename" >> "$DBFILE"
                    fi
                    ;;
            esac
            
            logger -t "PicMonitor" "$msg: $filename"
            _checkDirFull "$fullfilename"
            
            if (( IFSHOWTHUMB == 1 && showtype == 1 )); then
                if [[ -f "$fullfilename" ]]; then
                    printf '\033]1337;File=inline=1;width=20%%;preserveAspectRatio=0'
                    printf ":"
                    base64 < "$fullfilename"
                    printf '\a\n'
                fi
            fi
        done
    ) &
    local fswatch_pid=$!
    
    # 浏览器监控循环（主进程）
    while true; do
        if ! is_browser_running; then
            kill -TERM $fswatch_pid 2>/dev/null
            wait $fswatch_pid 2>/dev/null
            break
        fi
        sleep 5
    done
}

function goodfonWithAutoDiff() {                                                    # Desc: function: 打开goodfon.ru后 通过目录监控自动过滤重名文件
    goodfon
    autoDiffDownloadPicureByName $@
}
alias gfa="goodfonWithAutoDiff"                                                     # Desc: alias: gfa:goodfonWithAutoDiff命令的别名,打开goodfon.ru后 通过目录监控自动过滤重名文件

function goodfonWithAutoDiff2() {                                                   # Desc: function: 打开goodfon.ru后 通过目录监控自动过滤重名文件
    # 启动火狐浏览器
    local BROWSERPATH="/Applications/Firefox.app"
    local URL="https://www.goodfon.ru/"
    
    if [[ -d "$BROWSERPATH" ]]; then
        open -a "$BROWSERPATH" "$URL"
        # 添加延迟确保浏览器完全启动
        sleep 3
    else
        echo "Firefox not found at $BROWSERPATH"
        return 1
    fi
    
    # 启动监控
    autoDiffDownloadPicureByName 0 1
}
alias gfa2="goodfonWithAutoDiff2"                                                   # Desc: alias: gfa2:goodfonWithAutoDiff2命令的别名,打开goodfon.ru后通过目录监控自动过滤重名文件

function fzf_change_default_browser() {                                             # Desc: function: fzf_change_default_browser: 利用fzf和duti修改默认浏览器
    hasduti=$(ifHasCommand duti)
    if [[ "$hasduti" = "1" ]]; then
        local browser=$(printf "%s\n" \
            "Safari" \
            "Chrome" \
            "Firefox" \
            "Brave" \
            "Edge" | \
            fzf --header " 选择浏览器 " \
                --prompt "主菜单 ❯ " \
                --preview-window=up:30% \
                --preview "echo '请选择默认浏览器'" \
                --height=15% \
                --bind='space:jump,jump:accept' \
                --reverse)
        case $browser in
            Safari) 
                duti -s com.apple.Safari http
                duti -s com.apple.Safari https
            ;;
            Chrome) 
                duti -s com.google.chrome http
                duti -s com.google.chrome https
            ;;
            Firefox) 
                duti -s org.mozilla.firefox http
                duti -s org.mozilla.firefox https
            ;;
            Brave) 
                duti -s com.brave.Browser http
                duti -s com.brave.Browser https
            ;;
            Edge) 
                duti -s com.microsoft.edgemac http
                duti -s com.microsoft.edgemac https
            ;;
        esac
    else
        echo "Command duti does not install !"
        echo "Install with : brew install duti"
        return
    fi
}

alias fcdb="fzf_change_default_browser"                                             # Desc: alias: fzf_change_default_browser命令的别名，利用fzf和duti修改默认浏览器
