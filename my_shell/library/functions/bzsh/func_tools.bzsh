### Package Desc: 自定义工具相关命令


function create_tmp_aliases() {                                                       # Desc: function: create_tmp_aliases:以a+数字形式创建临时别名命令
    if [ "$#" -gt "0" ]; then
        tmp_command_file=$(mktemp)
        #创建临时脚本
        n=1
        for tcommand in $argv; do
            echo "alias a${n}=\"${tcommand}\"\n" >> $tmp_command_file
            ((n=n+1))
        done
        if [ -f $tmp_command_file ]; then
            source $tmp_command_file
        fi
    else
        return
    fi
}
alias cta="create_tmp_aliases"                                                        # Desc: alias: cta:create_tmp_aliases命令的别名,以a+数字形式创建临时别名命令

function temprature_monitor() {                                                       # Desc: function: temprature_monitor: 温度监控
    $USE_GUM && custom_gum_header --border-foreground 99 "温度监控" || echo -e "温度监控"
    while true; do
        
        # 先安装: brew install osx-cpu-temp
        if command -v osx-cpu-temp &>/dev/null; then
            temp=$(osx-cpu-temp | grep -oE '[0-9.]+')
            echo "CPU 温度: ${temp}°C"
        # 高温警告
            if (( $(echo "$temp > 80" | bc -l) )); then
                echo "警告: CPU 温度过高!"
            fi
        else
            echo "请先安装: brew install osx-cpu-temp"
        fi
    done
}
alias tm="temprature_monitor"                                                         # Desc: alias: tm: temprature_monitor命令的别名，温度监控

function net_port_monitor() {                                                         # Desc: function: net_port_monitor: 网络端口监控
    # 监控特定端口
    local text='请输入要监控的端口号 '
    $USE_GUM && port=$(gum input --placeholder "$text") || read -rep "$text" port </dev/tty

    # port=8080

    $USE_GUM && custom_gum_header --border-foreground 99 "网络端口监控" || echo -e "网络端口监控"
    while true; do
        if lsof -i :$port >/dev/null; then
            echo "$(date) - 端口 $port 正在监听"
        else
            echo "$(date) - 警告: 端口 $port 未监听!"
        fi

        # 监控网络响应
        if ping -c1 -t2 8.8.8.8 &>/dev/null; then
            echo "外网连接正常"
        else
            echo "警告: 外网连接失败!"
        fi
    done
}
alias mnp="net_port_monitor"                                                          # Desc: alias: mnp: net_port_monitor命令的别名，网络端口监控

function disk_monitor() {                                                             # Desc: function: disk_monitor: 硬盘监控
    # 检查根目录使用率
    $USE_GUM && custom_gum_header --border-foreground 99 "硬盘监控" || echo -e "硬盘监控"
    while true; do
        disk_usage=$(/bin/df -h / | tail -1 | awk '{print $5}' | tr -d '%')
        threshold=85

        if [[ "$disk_usage" -gt "$threshold" ]]; then
            echo "警告: 根目录使用率 ${disk_usage}% > ${threshold}%"
        else
            echo "磁盘正常: ${disk_usage}%"
        fi
    done
    # 可选：监控特定挂载点
    # df -h /Volumes/YourDrive
}
alias dm="disk_monitor"                                                               # Desc: alias: dm: disk_monitor命令的别名，硬盘监控

function real_time_cup_memory_monitor() {                                             # Desc: function: real_time_cup_memory_monitor: 实时监控CPU和内存
    # 兼容 bash 和 zsh
    $USE_GUM && custom_gum_header --border-foreground 99 "实时监控CPU和内存" || echo -e "实时监控CPU和内存"
    while true; do
        echo "===== $(date) ====="    
        # CPU 使用率 (macOS 适配)
        cpu_usage=$(ps -A -o %cpu | awk '{s+=$1} END {printf "%.1f%%", s}')
        echo "CPU Usage: $cpu_usage"

        # 内存使用情况 (使用 vm_stat)
        total_mem=$(sysctl -n hw.memsize)
        page_size=$(vm_stat | grep 'page size' | awk '{print $8}')
        free_pages=$(vm_stat | grep 'Pages free' | awk '{print $3}' | sed 's/.//g')
        used_mem=$(( (total_mem - (free_pages * page_size)) / 1024 / 1024 ))
        total_mem=$(( total_mem / 1024 / 1024 ))
        echo "Memory: ${used_mem}MB / ${total_mem}MB"

        sleep 2
    done
}
alias rcmm="real_time_cup_memory_monitor"                                             # Desc: alias: rcmm: real_time_cup_memory_monitor命令的别名，实时监控CPU和内存

function fzf_monitor_manager() {                                                      # Desc: function: fzf_monitor_manager: 利用fzf管理监控命令
    local options=(
        "实时CPU和内存"
        "磁盘"
        "进程"
        "网络"
        "温度"
        "🔙 返回"
    )
    
    $USE_GUM && custom_gum_header --border-foreground 99 "监控管理" || echo -e "监控管理"
    while true; do
        local selection=$(printf '%s\n' "${options[@]}" | fzf \
            --height=30% \
            --reverse \
            --prompt="➤ 监控 > " \
            --preview="echo -e '\n${THEME_PREVIEW}当前主题: ${THEME_NAME}${COLOR_RESET}'" \
            --preview-window="top:3:wrap"
        )
        
        case "$selection" in
            "实时CPU和内存") real_time_cup_memory_monitor ;;
            "磁盘") disk_monitor ;;
            "进程") process_monitor ;;
            "网络") network_monitor ;;
            "温度") temprature_monitor ;;
            "🔙 返回"|*)
                break
                ;;
        esac
    done
}
alias fmm="fzf_monitor_manager"                                                       # Desc: alias: fmm: fzf_monitor_manager命令的别名，利用fzf管理监控命令

vedio_list_manager() {
    local current_dir=$HOME/data/Vedioes/
    local tmp_current_dir=$PWD
    $USE_GUM && custom_gum_header --border-foreground 99 "视频列表" || echo -e "视频列表"
    while true; do
        cd $current_dir
        local selection=$(ls $current_dir | awk -v dir="$current_dir" '
                BEGIN { print ".." }
                { print }
                END { print "↩️ 返回" }
            ' | fzf)
        # 处理选择结果
        if [[ "$selection" == "↩️ 返回" ]]; then
            break
        elif [[ "$selection" == ".." ]]; then
            current_dir=$(dirname "$current_dir")
        elif [[ -d "${current_dir}/${selection}" ]]; then
            current_dir="${current_dir}/${selection}"
        else
            $MYRUNTIME/customs/bin/_operator "${current_dir}/${selection}"
        fi
    done
    cd $tmp_current_dir
}

vedio_web_manager() {
    $USE_GUM && custom_gum_header --border-foreground 99 "视频网站管理" || echo -e "视频网站管理"
    local vediomark=$MYRUNTIME/tools/m_vedio_mark
    [[ ! -f $vediomark ]] && touch $vediomark
    urls=$(cat "$vediomark" | awk -v dir="$current_dir" '
                { print }
                END { print "↩️ 返回" }
            ' | fzf \
    --multi \
    --delimiter='#' \
    --with-nth=1 \
    --header="🌐 选择网址 (Tab多选) [${header%%#*}]" \
    --preview='echo "{1}\n{2}"' \
    --preview-window="right:70%:wrap" \
	--height=95% \
    --bind="ctrl-y:execute-silent(printf '%s' {2} | pbcopy)+abort" \
    --bind="ctrl-e:execute(nvim \"$vediomark\" < /dev/tty > /dev/tty)+reload(cat \"$vediomark\")" \
    --bind="ctrl-o:execute(open -R \"$vediomark\")+abort" \
    --bind="ctrl-h:change-preview-label( ╢ Help Infomation ╟ )+preview($MYRUNTIME/customs/bin/web help)+show-preview" \
    --header-first \
    --prompt="➤ " | \
    awk -F'#' '{print $2}')
    
    [[ -z "$urls" ]] && return
    local OPENBROWSER='Brave Browser'
    while read -r url; do
        [[ -n "$url" ]] && open -a "$OPENBROWSER" "$url"
    done <<< "$urls"
}

ofen_used_soft_manager() {
    local ofenmark=$MYRUNTIME/tools/m_ofen_used_soft
    [[ ! -f $ofenmark ]] && touch $ofenmark

    $USE_GUM && custom_gum_header --border-foreground 99 "常用软件管理" || echo -e "常用软件管理"
    
    local selection=$(cat $ofenmark | awk -v dir="$FZF_CURRENT_DIR" '
            { print }
            END { print "🔙 返回" }
        ' | fzf --reverse \
            --bind="ctrl-o:execute(open {})+abort" \
            --bind="ctrl-e:execute(nvim \"$ofenmark\" < /dev/tty > /dev/tty)+reload(cat \"$ofenmark\" | awk -v dir=\"$FZF_CURRENT_DIR\" '
            { print }
            END { print \"🔙 返回\" }
        ')" \
            --prompt="➤ 常用软件管理 > ")
    [[ -z "$selection" ]] && return
    [[ "$selection" = "🔙 返回" ]] && return
    while read -r selected; do
        [[ -n $selected ]] && open "$selected"
    done <<< $selection
}

fzf_recreation_manager() {
    local options=(
        "视频列表"
        "常看视频网站"
        "打开目录"
        "常用软件"
        "↩️ 返回"
    )
    
    $USE_GUM && custom_gum_header "娱乐管理" || echo -e "娱乐管理"
    while true; do
        local selection=$(printf '%s\n' "${options[@]}" | fzf \
            --height=30% \
            --reverse \
            --prompt="➤ 娱乐管理 > "
        )
        
        case $selection in
            *视频列表*) vedio_list_manager ;;
            *常看视频网站*) vedio_web_manager ;;
            *打开目录*) open $HOME/data/Vedioes && return ;;
            *常用软件*) ofen_used_soft_manager ;;
            *返回*|*) break ;;
        esac
    done
}