### Package Desc: 自定义命令

function search_aliases() {                                                         # Desc: function: search_aliases:显示所有含有字符串的自定义命令及注释
    MYRUNTIME=$(cat $HOME/.myruntime)
    customcd $MYRUNTIME/customs/my_shell/library/functions/bzsh
    local Content
    if [ ""  != "$1" ]; then
        Content=$(find *.bzsh | xargs ag "$1" | awk -F':' '{print $1}' | sort | uniq )
    else
        Content=$(find *.bzsh | awk -F':' '{print $1}' | sort | uniq )
    fi
    echo "$Content" | fzf --no-sort \
    --tac \
    $FZF_CUSTOM_PARAMS \
    --preview-window right:70%:rounded:hidden:wrap \
    --preview 'bat --theme=gruvbox-dark --color=always --style=header,grid,numbers {}' \
    --header="$(_buildFzfHeader '' 'search_aliases')"
    customcd -
}
alias sas="search_aliases"                                                          # Desc: alias: sas:search_aliases命令的别名,显示所有含有字符串的自定义命令及注释

function fzf_all_aliases() {                                                        # Desc: function: fzf_all_aliases:显示所有自定义的别名及注释
    TMP_ALIASES_FILE=$(mktemp)
    alias | sed -e "s/^alias //g" > $TMP_ALIASES_FILE
    if [ -f $TMP_ALIASES_FILE ]; then
        eval $(cat $TMP_ALIASES_FILE | awk -F'=' '{print $1}' | sed -e "s/^[ ]*//g" | grep -v -E "^--(.*?)" | fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:rounded:hidden:wrap \
--preview "$MYRUNTIME/customs/bin/_show_custom_alias {} $TMP_ALIASES_FILE"  \
--header="$(_buildFzfHeader '' 'fzf_all_aliases')" \
--bind "ctrl-r:execute(bat --theme=gruvbox-dark --color=always --style=header,grid,numbers $TMP_ALIASES_FILE > /dev/tty)")
        rm -f $TMP_ALIASES_FILE
    fi
}
alias faa="fzf_all_aliases"                                                         # Desc: alias: faa: fzf_all_aliases命令的别名,显示所有自定义的别名及注释

function fzf_custom_aliases() {                                                     # Desc: function: fzf_custom_aliases:显示所有自定义命令及注释
    local TMP_ALIASES_FILE=$(mktemp)

    find $MYRUNTIME/customs/my_shell/* -type f ! -path "$MYRUNTIME/customs/my_shell/nu/*" ! -path "$MYRUNTIME/customs/my_shell/fish/*" ! -path "$MYRUNTIME/customs/my_shell/library/functions/fish/*" | xargs grep -rE '^alias\ ' > $TMP_ALIASES_FILE
    if [ -f $TMP_ALIASES_FILE ]; then
        eval $(cat $TMP_ALIASES_FILE | awk '{print $2}' | sed "s/'//g" | sed 's/"//g' | awk -F'=' '{print $1}' | fzf --no-sort --tac $FZF_CUSTOM_PARAMS \
--preview-window right:70%:rounded:nohidden:wrap \
--preview "$MYRUNTIME/customs/bin/_show_custom_alias {} ${TMP_ALIASES_FILE} \"customs\""  \
--bind 'focus:transform-preview-label:echo -n "[ {} ]";' \
--bind "ctrl-r:execute(bat --theme=gruvbox-dark --color=always --style=header,grid,numbers $TMP_ALIASES_FILE > /dev/tty)" \
--header="$(_buildFzfHeader '' 'fzf_custom_aliases')")
        rm -f $TMP_ALIASES_FILE
    fi
}
alias fca="fzf_custom_aliases"                                                      # Desc: alias: fca:fzf_custom_aliases命令的别名,显示所有自定义命令及注释

function custom_aliases_from_a2z() {                                                # Desc: function: custom_aliases_from_a2z:显示从a-z的自定义命令
    # 创建临时文件
    local TMP_A2Z_ALIASES_FILE=$(mktemp)
    # 将所有a-z的别名内容写入临时文件
    if [ ! -f $TMP_A2Z_ALIASES_FILE ]; then
        echo "Tmpfile does not exists !"
        return 1
    fi

    hr "⬳" > $TMP_A2Z_ALIASES_FILE
    echo -n "[ $(echo -e {a..z}) ]\n" >> $TMP_A2Z_ALIASES_FILE
    hr "⬳" >> $TMP_A2Z_ALIASES_FILE
    echo "⭆ Already exists command:" >> $TMP_A2Z_ALIASES_FILE
    hr "⬳" >> $TMP_A2Z_ALIASES_FILE
    for word in {a..z}; do
        if [ "$(command -v $word)" != "" ]; then
            echo "alias_${word}_start" >> $TMP_A2Z_ALIASES_FILE
            type $word | grep -v "not found" >> $TMP_A2Z_ALIASES_FILE
            if [ "$nowshell" != "bash" ]; then
                hr "↼" >> $TMP_A2Z_ALIASES_FILE
                which $word | grep -v "not found" >> $TMP_A2Z_ALIASES_FILE
                hr "↼" >> $TMP_A2Z_ALIASES_FILE
            fi
            echo "alias_${word}_end" >> $TMP_A2Z_ALIASES_FILE
        fi
    done

    if [ "all" = "$1" ] && [ "" != "$1" ]; then
        bat $TMP_A2Z_ALIASES_FILE
    else
        # 利用fzf
        seq 1 26 |  awk '{printf "%c\n", NR+96}' | fzf $FZF_CUSTOM_PARAMS \
        --header="$(_buildFzfHeader '' 'custom_aliases_from_a2z')" \
        --preview-window 'right,70%,rounded,+{2}+3/3,~3' \
        --preview "$MYRUNTIME/customs/bin/_show_custom_alias {} ${TMP_A2Z_ALIASES_FILE} \"a2z\""
    fi
}
alias a2z="custom_aliases_from_a2z"                                                 # Desc: alias: a2z:custom_aliases_from_a2z命令的别名,显示从a-z的自定义命令

function fzf_all_custom_functions() {                                               # Desc: function: fzf_all_custom_functions:显示所有函数(仅zsh下有效)
    local TMP_ALL_FUNCTIONS_FILE=$(mktemp)

    if [[ "zsh" = "$nowshell" ]]; then
        functions > $TMP_ALL_FUNCTIONS_FILE 
        selected=$(cat $TMP_ALL_FUNCTIONS_FILE | grep -E '(.*?)[^(]*.*{' | grep -v '$MYRUNTIME' | grep '() {' | grep -v '$MYRUNTIME'  | grep -E '^[+_@.-:]+[a-zA-Z0-9_]*|[a-zA-Z0-9_]*'| sed 's/^[[:blank:]]\{1,\}//' | grep -v '^() {' |sed 's/ () {//' | grep -v ' ' | fzf $FZF_CUSTOM_PARAMS +m \
        --preview-window right:70%:rounded:hidden:wrap \
        --preview "$MYRUNTIME/customs/bin/_show_awesome_function {} $TMP_ALL_FUNCTIONS_FILE 'functions' $nowshell" \
        --header="$(_buildFzfHeader '' 'fzf_all_custom_functions')" \
        --bind="ctrl-y:execute-silent($MYRUNTIME/customs/bin/_show_awesome_function {} $TMP_ALL_FUNCTIONS_FILE 'functions' $nowshell| pbcopy)+abort")
    fi
    if [[ "bash" = "$nowshell" ]]; then
        declare -f > $TMP_ALL_FUNCTIONS_FILE
        selected=$(cat $TMP_ALL_FUNCTIONS_FILE | grep -E '(.*?)[^ (]*.*' |grep -v '$MYRUNTIME' |grep ' ()' |grep -v '$MYRUNTIME'  | grep -E '^[+_@.-:]+[a-zA-Z0-9_]*|[a-zA-Z0-9_]* ()'|grep -v '"' | grep -v "'" | grep -v ' function ' | sed 's/^[[:blank:]]\{1,\}//' | grep -v '^()$' |sed 's/ ()//' | fzf $FZF_CUSTOM_PARAMS +m \
        --preview-window right:70%:rounded:hidden:wrap \
        --preview "$MYRUNTIME/customs/bin/_show_awesome_function {} $TMP_ALL_FUNCTIONS_FILE 'functions' $nowshell" \
        --header="$(_buildFzfHeader '' 'fzf_all_custom_functions')" \
        --bind="ctrl-y:execute-silent($MYRUNTIME/customs/bin/_show_awesome_function {} $TMP_ALL_FUNCTIONS_FILE 'functions' $nowshell| pbcopy)+abort")
    fi
    if [ -n "$selected" ]; then
        $MYRUNTIME/customs/bin/_show_awesome_function $selected $TMP_ALL_FUNCTIONS_FILE 'functions' $nowshell
    fi
    rm -f $TMP_ALL_FUNCTIONS_FILE
}
alias faf='fzf_all_custom_functions'                                                # Desc: alias: faf: fzf_all_custom_functions命令的别名,显示所有函数(仅zsh下有效)

function fzf_customs_functions() {                                                  # Desc: function: fzf_customs_functions:显示所有自定义命令及注释
    TMP_FUNCTIONS_FILE=$(mktemp)
    find $MYRUNTIME/customs/my_shell/library/functions/ -type f -name "*bzsh" |xargs grep -E "(function )(.*?)[^(]*.*#.*Desc" |grep -v '$MYRUNTIME' > $TMP_FUNCTIONS_FILE
    if [ -f $TMP_FUNCTIONS_FILE ]; then
        eval $(cat $TMP_FUNCTIONS_FILE | awk '{$1=""; print $0 }' | \
sed 's/^[[:blank:]]\{1,\}//' | \
sed -e "s/() {//" | awk -F'#' '{print $1}' | \
grep -E "(.*?)[^(]*" | \
sed -e 's/ $//g' | \
fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:rounded:hidden:wrap \
--preview "$MYRUNTIME/customs/bin/_show_awesome_function {} $TMP_FUNCTIONS_FILE" \
--header="$(_buildFzfHeader '' 'fzf_customs_functions')" \
--bind "ctrl-r:execute(bat $TMP_FUNCTIONS_FILE > /dev/tty)")
        rm -f $TMP_FUNCTIONS_FILE
    fi
}
alias fcf="fzf_customs_functions"                                                   # Desc: alias: fcf:fzf_customs_functions命令的别名,显示所有自定义命令及注释

function fzf_customs_fzf_awesome_functions_list() {                                 # Desc: function: fzf_customs_fzf_awesome_functions_list: 利用fzf列出所有自定义fzf相关命令
    if [ ! -f $HOME/.myruntime ]; then
        echo "Awesome Fzf Functions Location Not Found !"
    else
        AWESOME_FZF_FUNCTIONS_LOCATION=$(cat $HOME/.myruntime)/customs/my_shell/
        TMP_FZF_FUNCTIONS_FILE=$(mktemp)
        find $AWESOME_FZF_FUNCTIONS_LOCATION -type f -name "*bzsh" |xargs grep -E "(function fzf_)(.*?)[^(]*" > $TMP_FZF_FUNCTIONS_FILE
        if [ ! -f $TMP_FZF_FUNCTIONS_FILE ]; then
            echo "Awesome Fzf Functions Collection File Does Not Exists !"
        else
            eval $(cat $TMP_FZF_FUNCTIONS_FILE | \
            awk '{$1=""; print $0 }' | \
            sed 's/^[[:blank:]]\{1,\}//' | sed -e "s/() {//" | \
            awk -F'#' '{print $1}' | \
            grep -E "(^fzf_)(.*?)[^(]*" | \
            sed -e 's/ $//g' | \
            fzf $FZF_CUSTOM_PARAMS \
--preview "$MYRUNTIME/customs/bin/_show_awesome_function {} $TMP_FZF_FUNCTIONS_FILE" \
--preview-window right:70%:rounded:hidden:wrap \
--bind "ctrl-r:execute(bat $TMP_FZF_FUNCTIONS_FILE > /dev/tty)" \
--header="$(_buildFzfHeader '' 'fzf_customs_fzf_awesome_functions_list')")
            rm -f $TMP_FZF_FUNCTIONS_FILE
        fi
    fi
}
alias fff="fzf_customs_fzf_awesome_functions_list"                                  # Desc: alias: fff: fzf_customs_fzf_awesome_functions_list命令的别名,利用fzf列出所有自定义fzf相关命令
alias 3f="fzf_customs_fzf_awesome_functions_list"                                   # Desc: alias: 3f: fzf_customs_fzf_awesome_functions_list命令的别名,利用fzf列出所有自定义fzf相关命令

function update_iterm2_shell_integration() {                                        # Desc: function: update_iterm2_shell_integration:更新iterm2的扩展shell
	curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash
}
alias uii="update_iterm2_shell_integration"                                         # Desc: alias: uii:update_iterm2_shell_integration命令的别名,更新iterm2的扩展shell

function my_message() {                                                             # Desc: function: my_message:显示我的自定义SHELL头信息
    clear
    _COLUMNS=$(tput cols)
    source $MYRUNTIME/tools/m_title
    y=$(( ( $_COLUMNS - ${#_TITLE} )  / 2 ))
    spaces=$(printf "%-${y}s" " ")
    echo " "
    echo -e "${spaces}\033[41;37;5m ${_TITLE} \033[0m"
    echo " "


    _COLUMNS=$(tput cols)
    source $MYRUNTIME/tools/m_message
    y=$(( ( $_COLUMNS - ${#_MESSAGE} )  / 2 ))
    spaces=$(printf "%-${y}s" " ")
    echo -e "${spaces}${_MESSAGE}"
    echo " "
    for ((i=1; i<=$(tput cols); i ++))  ; do echo -n '*';done

    echo " "
}
alias mm="my_message"                                                               # Desc: alias: mm:my_message命令的别名,显示我的自定义SHELL头信息

function show_bad_links() {                                                         # Desc: function: show_bad_links:列出所有失效软连接,默认读取家目录,可以指定目录badlink /data
    local readpath="${1:-$HOME}"
    echo "File List broken links:"
    for file in $(ls -a $readpath); do
    realpath=$(/usr/bin/readlink $readpath/$file)
    if [ ! -f $realpath ] && [ ! -d $realpath ]; then
        echo $readpath/$file
    fi
    done
}
alias badlinks="show_bad_links"                                                     # Desc: alias: badlink:show_bad_links命令的别名,列出所有失效软连接,默认读取家目录,可以指定目录badlink /data
alias sbl="show_bad_links"                                                          # Desc: alias: sbl:show_bad_links命令的别名,列出所有失效软连接,默认读取家目录,可以指定目录badlink /data

function build_by_extension() {                                                     # Desc: function: build_by_extension:生成【参数为后缀名的】的数据文件
    [ $# -eq 0 ] && return
    cmd="find `pwd`"
    for ext in $@; do
        cmd=" $cmd -name '*.$ext' -o"
    done
    echo ${cmd: 0: ${#cmd} - 3}
    eval "${cmd: 0: ${#cmd} - 3}" > cscope.files &&
        cscope -b -q && rm cscope.files
}
alias bbe="build_by_extension"                                                      # Desc: alias: bbe: build_by_extension命令的别名,生成【参数为后缀名的】的数据文件

function clear_camera_cache() {                                                     # Desc: function: clear_camera_cache:清理摄像头缓存
    sudo killall VDCAssistant
}
alias 3c="clear_camera_cache"                                                       # Desc: alias: 3c: clear_camera_cache命令的别名,清理摄像头缓存

function sign_tnt_code_name() {                                                     # Desc: function: sign_tnt_code_name:TNT破解失效 更改签名
    if [ $# -ne 1 ]; then
        echo "Type $0 App path to replace the app sign"
        return 1
    fi
    if [ -d "$1" ]; then
        /usr/bin/codesign --force --deep --sign - "$1"
    else
        echo "The app path does not exists !!!"
        return 1
    fi
}
alias cs="sign_tnt_code_name"                                                       # Desc: alias: cs:sign_tnt_code_name命令的别名,TNT破解失效,更改签名
alias stnt="sign_tnt_code_name"                                                     # Desc: alias: stnt:sign_tnt_code_name命令的别名,TNT破解失效,更改签名

function speaking_by_osx_voice() {                                                  # Desc: function: speaking_by_osx_voice:利用osx系统发音说话
    words="$@"
    hasgum=$(ifHasCommand gum)
    if [ "" = "$words" ]; then
        [[ 1 = $hasgum ]] && (gum input --placeholder "Type something...") || (echo "请输入要说的话 \n例如：$0 haha " && return 1)
    fi
    #osascript -e 'say "'$words'" using "Cellos"'
    osascript -e 'say "'$words'" using "Ting-Ting"'
}
alias sbov="speaking_by_osx_voice"                                                  # Desc: alias: sbov: speaking_by_osx_voice命令的别名,利用osx系统发音说话

function my_weather() {                                                             # Desc: function: my_weather:获取哈尔滨天气
    if [ -f /opt/homebrew/opt/curl/bin/curl ]; then
        /opt/homebrew/opt/curl/bin/curl https://wttr.in/harbin\?lang\=zh
    else
        curl https://wttr.in/harbin\?lang\=zh
    fi
}
alias myweather="my_weather"                                                        # Desc: alias: myweather:my_weather命令的别名,获取哈尔滨天气

function history_sort_by_used() {                                                   # Desc: function: history_sort_by_used:按执行次数倒序显示历史命令
    local last_command_type=`history | tail -n 1 | awk '{print($0~/^[-]?([0-9])+[.]?([0-9])+$/)?"number":"string"}'`
    if [ "$last_command_type" = "number" ]; then
        history | awk '{$1="";print}' | sort -rn | uniq -c | sort -rn | less
    else
        history | sort -rn | uniq -c | sort -rn | less
    fi
}
alias hsu="history_sort_by_used"                                                    # Desc: alias: hsu: history_sort_by_used命令的别名,按执行次数倒序显示历史命令

function fzf_history_repeat() {                                                     # Desc: function: fzf_history_repeat:列出历史操作命令,选择后执行
    eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac $FZF_CUSTOM_PARAMS \
--preview ' echo {} | awk "{\$1=\"\";print}"' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'ctrl-y:execute-silent(echo {} | awk "{\$1=\"\";print}" | pbcopy)+abort' \
--header="$(_buildFzfHeader '' 'fzf_aliases')" \
     | sed 's/ *[0-9]* *//')
}
alias fhr="fzf_history_repeat"                                                      # Desc: alias: fhr:fzf_history_repeat命令的别名,列出历史操作命令,选择后执行

function help_by_tldr() {                                                           # Desc: function: help_by_tldr:help帮助,tldr命令别名
    tldr $@
}
alias help="help_by_tldr"                                                           # Desc: alias: help:help_by_tldr命令的别名,help帮助,tldr命令别名

function ps_or_procs_search() {                                                     # Desc: function: ps_or_procs_search:ps -ef或procs |grep 进程
    [[ "" = "$@" ]] && return 1
    if command -v procs &> /dev/null
    then
        procs | grep "$@" | grep -v grep 
    else
        ps -ef|grep "$@" | grep -v grep #|fzf
    fi
}
alias p='ps_or_procs_search'                                                        # Desc: alias: p:ps_or_procs_search命令的别名,ps -ef或procs |grep 进程

function btop() {                                                                   # Desc: function: btop:bashtop命令的别名 
    [[ -f /usr/local/bin/bashtop ]] && /usr/local/bin/bashtop "$@" || echo "bashtop does not exists !"
}
alias bt="btop"                                                                     # Desc: alias: bt: btop命令的别名,bashtop命令的别名 

function fzf_history() {                                                            # Desc: function: fzf_history:依赖fzf读取history结果
    history | fzf $FZF_CUSTOM_PARAMS \
--preview ' echo {} | awk "{\$1=\"\";print}"' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--header="$(_buildFzfHeader '' 'fzf_history')" \
--bind 'ctrl-y:execute-silent(echo {} | awk "{\$1=\"\";print}" | pbcopy)+abort'
}
alias fh="fzf_history"                                                              # Desc: alias: fh:fzf_history命令的别名,依赖fzf读取history结果

function file_tree() {                                                              # Desc: function: file_tree:tree命令
	mpath='./'
	[[ "" != "$1" ]] && mpath=$1
	ls -R $mpath | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'
}
alias ftree="file_tree"                                                             # Desc: alias: ftree:file_tree命令的别名,tree命令

function fzf_history_print() {                                                      # Desc: function: fzf_history_print:列出历史操作命令,选择后打印
    print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac $FZF_CUSTOM_PARAMS \
--preview ' echo {} | awk "{\$1=\"\";print}"' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'ctrl-y:execute-silent(echo {} | awk "{\$1=\"\";print}" | pbcopy)+abort' \
--header="$(_buildFzfHeader '' 'fzf_history_print')" \
    | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}
alias fhp='fzf_history_print'                                                       # Desc: alias: fhp:fzf_history_print命令的别名,列出历史操作命令,选择后打印

function fzf_theme_selector() {                                                     # Desc: function: fzf_theme_selector:fzf主题选择器
    #MYRUNTIME=$(cat $HOME/.myruntime)
    themes_path=$MYRUNTIME/customs/tools/fzf_themes/
    choose_theme=$(ls $themes_path | fzf $FZF_CUSTOM_PARAMS --preview-window right:70%:rounded:hidden:wrap --preview " bat $themes_path/{} " --header="$(_buildFzfHeader '' 'fzf_aliases')")
    [[ ! "$choose_theme" ]] && echo "Action abort!" && return
    if [[ -f ${themes_path}/$choose_theme ]]; then
        source ${themes_path}/$choose_theme
    fi
}
alias fts='fzf_theme_selector'                                                      # Desc: alias: fts:fzf_theme_selector命令的别名,fzf主题选择器

function command_sl_selector() {                                                    # Desc: function: command_sl_selector:输入命令sl并执行时，二次验证选择
    echo "执行命令行小火车：1, ls命令：2"
    hasgum=$(ifHasCommand gum)
    [[ "$hasgum" = "1" ]]  && choose=$(gum choose "1" "2") || read choose
    case "$choose" in
    "1")
        [[ -f /opt/homebrew/bin/sl ]] && /opt/homebrew/bin/sl
        [[ -f /usr/local/bin/sl ]] && /usr/local/bin/sl
    ;;
    "2")
        [[ -f /usr/local/bin/lsd ]] && /usr/local/bin/lsd -la
        [[ -f /opt/homebrew/bin/lsd ]] && /opt/homebrew/bin/lsd -la
    ;;
    "*")
        echo "无效选择，自动退出..."
    ;;
    esac
}
alias sl='command_sl_selector'                                                      # Desc: alias: sl:command_sl_selector命令的别名,输入命令sl并执行时，二次验证选择

function fzf_man() {                                                                # Desc: function: fzf_man:fzf版本的man命令
  batman="man {1} | col -bx | bat --language=man --plain --color always --theme=\"Monokai Extended\""
   man -k . | sort \
   | awk -v cyan=$(tput setaf 6) -v blue=$(tput setaf 4) -v res=$(tput sgr0) -v bld=$(tput bold) '{ $1=cyan bld $1; $2=res blue;} 1' \
   | fzf -q "$1" --ansi --tiebreak=begin $FZF_CUSTOM_PARAMS \
--preview-window '50%,rounded,<50(up,85%,rounded)' \
--preview "${batman}" \
--bind 'enter:become(man {1})' \
--bind 'ctrl-c:+change-preview(cheat {1})+change-prompt(ﯽ Cheat > )' \
--bind 'ctrl-m:+change-preview(${batman})+change-prompt( Man > )' \
--bind 'ctrl-r:+change-preview(tldr --color=always {1})+change-prompt(ﳁ TLDR > )' \
--header="$(_buildFzfHeader '' 'fzf_man')"
  echo ""
}
alias fman="fzf_man"                                                                # Desc: alias: fman:fzf_man命令的别名,fzf版本的man命令

function mark_by_cheatsh() {                                                        # Desc: function: mark_by_cheatsh:依托于cheat.sh的备忘录
    if [ $# -lt 1 ]; then
        echo "Usage:$0 language function"
        echo ""
        echo "---------------------------------------"
        echo ""
        curl cht.sh
        return 0
    fi
    url="cheat.sh/"
    if [ "$1" != "" ]; then
        url="cheat.sh/$1/"
    fi
    if [ "$2" != "" ]; then
        url="cheat.sh/$1/$2"
    fi
    if [ "$3" != "" ]; then
        url="cheat.sh/$1/$2+$3"
    fi
    curl $url
}
alias mbc="mark_by_cheatsh"                                                         # Desc: alias: mbc:mark_by_cheatsh命令的别名,依托于cheat.sh的备忘录

function fzf_env_vars() {                                                           # Desc: function: fzf_env_vars:利用fzf选用env变量的值
  env | fzf $FZF_CUSTOM_PARAMS \
--bind 'ctrl-k:execute-silent(echo {1} | pbcopy)+abort' \
--bind 'ctrl-v:execute-silent(echo {2} | pbcopy)+abort' \
--bind 'focus:transform-preview-label:echo [ {1} ]' \
--delimiter='=' \
--preview='echo {2}' \
--header="$(_buildFzfHeader '' 'fzf_env_vars')"
}
alias fev="fzf_env_vars"                                                            # Desc: alias: fev: fzf_env_vars命令的别名,利用fzf选用env变量的值

function fold() {                                                                   # Desc: function: fold: Default `fold` to screen width and break at spaces
  if [ $# -eq 0 ]; then
    /usr/bin/fold -w $COLUMNS -s
  else
    /usr/bin/fold $*
  fi
}

function fzf_spell() {                                                              # Desc: function: fzf_spell: Use `fzf` against system dictionary
  cat /usr/share/dict/words | fzf $FZF_CUSTOM_PARAMS \
--preview-window up:70%:rounded:hidden:wrap \
--preview 'wn {} -over | fold' \
--header="$(_buildFzfHeader '' 'fzf_spell')"
}
alias fspell='fzf_spell'                                                            # Desc: alias: fspell: fzf_spell命令的别名,Use `fzf` against system dictionary

function dic() {                                                                    # Desc: function: dic: Lookup definition of word using `wn $1 -over`.If $1 is not provided, we'll use the `spell` command to pick a word. Requires:brew install wordnet, brew install fzf
  if [ $# -eq 0 ]; then
    wn `fzf_spell` -over | fold
  else
    wn $1 -over | fold
  fi
}

function fzf_fg() {                                                                 # Desc: function: fzf_fg: 利用fzf显示所有的后台执行程序
  job="$(jobs | fzf -0 -1 $FZF_CUSTOM_PARAMS \
--preview 'echo {} | awk "{\$1=\"\";\$2=\"\";\$3=\"\";print}"' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'ctrl-y:execute-silent(echo {} | awk "{\$1=\"\";\$2=\"\";\$3=\"\";print}" | pbcopy)+abort' \
--header="$(_buildFzfHeader '' 'fzf_fg')" \
  | sed -E 's/\[(.+)\].*/\1/')" && echo '' && fg %$job
}
alias ffg="fzf_fg"                                                                  # Desc: alias: ffg: fzf_fg命令的别名,利用fzf显示所有的后台执行程序

function su() {                                                                     # Desc: function: su:su命令后,theme自动切换主题
	(
		INHIBIT_THEME_HIST=1 $MYRUNTIME/customs/bin/theme red-alert
		trap '$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"' INT
		env su "$@"
		$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"
	)
}

function sudo() {                                                                   # Desc: function: sudo:sudo命令后,theme自动切换主题
	(
		pid=$(exec sh -c 'echo "$PPID"')
		# If the command takes less than .2s, don't change the theme.
		# We could also just match on 'su' and ignore everything else,
		# but this also accomodates other long running commands
		# like 'sudo sleep 5s'. Modify to taste.
		(
				sleep .2s
				ps -p "$pid" > /dev/null && INHIBIT_THEME_HIST=1 $MYRUNTIME/customs/bin/theme gruvbox-original-light-medium
		) &
		trap '$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"' INT
		env sudo "$@"
		$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"
	)
}

function ssh() {                                                                    # Desc: function: ssh:ssh命令后,theme自动切换主题
	# A tiny ssh wrapper which extracts a theme from $HOME/.ssh_themes
	# and applies it for the duration of the current ssh command.
	# Each line in $HOME/.ssh_themes has the format:
	#     <hostname>: <theme>.
	# Restoration relies on the fact that you are using theme.sh to manage
	# the current theme.  (that is, you set the theme in your bashrc.)
	# This can probably be made more robust. It is just a small demo
	# of what is possible.
	touch $HOME/.ssh_themes
	host="$(echo "$@"|awk '{gsub(".*@","",$NF);print $NF}')"
	theme="$(awk -vhost="$host" -F': *' 'index($0, host":") == 1 {print $2}' < $HOME/.ssh_themes)"
	if [ -z "$theme" ]; then
		env ssh "$@"
		return
	fi
	INHIBIT_THEME_HIST=1 $MYRUNTIME/customs/bin/theme "$theme"
	trap '$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"' INT
	env ssh "$@"
	$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"
}

function last_theme() {                                                             # Desc: function: last_theme: 获取theme命令最后一次的设置
	echo $($MYRUNTIME/customs/bin/theme -l|tail -n2|head -n1)
}
alias ltheme="last_theme"                                                           # Desc: alias: ltheme: last_theme命令的别名,获取theme命令最后一次的设置

function fzf_open_app() {                                                           # Desc: function: fzf_open_app: 利用fzf通过终端打开App
    ls /Applications/ | fzf --ansi $FZF_CUSTOM_PARAMS \
--preview-window right:70%:rounded:hidden:wrap \
--preview 'tree /Applications/{}' \
--bind 'enter:become(open /Applications/{})' \
--header="$(_buildFzfHeader '' 'fzf_open_app')" \
--bind 'ctrl-y:execute-silent(echo "open /Applications/{}"| pbcopy)+abort'
}
alias foa="fzf_open_app"                                                            # Desc: alias: foa: fzf_open_app命令的别名,利用fzf通过终端打开App

function cp_forward() {                                                             # Desc: function: cp_forward: cp复制完成后跳转至目录
    cp "$@" && go2 "$_";
}
alias cpf="cp_forward"                                                              # Desc: alias: cpf:cp_forward命令的别名,cp复制完成后跳转至目录

function mv_forward() {                                                             # Desc: function: mv_forward: mv移动完成后跳转至目录
    mv "$@" && go2 "$_";
}
alias mvf="mv_forward"                                                              # Desc: alias: mvf:mv_forward命令的别名,mv移动完成后跳转至目录

function mkdir_forward() {                                                          # Desc: function: mkdir_forward: mkdir创建目录完成后跳转至目录
    mkdir -p $1; cd $1
}
alias mkf="mkdir_forward"                                                           # Desc: alias: mkf: mkdir_forward命令的别名,mkdir创建目录完成后跳转至目录

function fzf_most_used_command() {                                                  # Desc: function: fzf_most_used_command:历史操作中使用最多的50个命令
    #除了history外,在omz中可以使用:omz_history -n | sed 's/^[[:space:]]*//g' | sed 's/^[0-9]*//g' | sed 's/^[[:space:]]*//g' | sort | uniq -c | sort -n -k1 | tail -30 | tac
    history | sed 's/^[[:space:]]\{0,\}[0-9]\{1,\}//g' | sed 's/^[[:space:]]*//g' | sed 's/^[[:space:]]\{0,\}[0-9]\{1,\}//g' | sed 's/^[[:space:]]*//g' | sort | uniq -c | sort -n -k1 | tail -50 | tac |fzf $FZF_CUSTOM_PARAMS --no-sort \
--preview-window right:70%:rounded:hidden:wrap \
--preview 'echo {} | awk "{\$1=\"\";print}"' \
--bind 'enter:become(echo {} | awk "{\$1=\"\";print}")' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--header="$(_buildFzfHeader '' 'fzf_most_used_command')" \
--bind 'ctrl-y:execute-silent(echo {} | awk "{\$1=\"\";print}" | pbcopy)+abort'
}
alias fmu="fzf_most_used_command"                                                   # Desc: alias: fmu: fzf_most_used_command命令的别名,历史操作中使用最多的50个命令

function fzf_manage() {                                                             # Desc: function: fzf_manage: 利用fzf管理目录下的子文件夹、文件、图片等
    local ACTIONCOMMAND
    if [[ $(ifHasCommand gum) = 1 ]]; then
        ACTIONCOMMAND='gum confirm "确认删除?" && rm -f '
    else
        ACTIONCOMMAND='rm -f '
    fi
    fd --max-depth 1 -H --exclude={.git,.idea,.vscode,.sass-cache,node_modules,build} | fzf $FZF_CUSTOM_PARAMS \
    --bind "ctrl-d:execute($ACTIONCOMMAND {})+reload(ls || true)" \
    --bind "change:reload:sleep 0.1; fd --max-depth 1 -H --exclude={.git,.idea,.vscode,.sass-cache,node_modules,build} || true" \
    --bind "ctrl-r:execute-silent(open -R {})" \
    --bind "ctrl-f:transform:$fzf_transformer_search_swap_type" \
    --header="$(_buildFzfHeader '' 'fzf_manage')" \
    --preview-window right:70%:rounded:hidden:wrap --preview " $MYRUNTIME/customs/bin/_previewer {} "
}
alias fm2="fzf_manage"                                                              # Desc: alias: fm2: fzf_manage命令的别名,利用fzf管理目录下的子文件夹、文件、图片等

function open_directory_whereis_command() {                                         # Desc: function: open_directory_whereis_command:打开which命令找到的目录或文件
    hascommand=$(ifHasCommand $@)
    [[ $hascommand != 1 ]] && echo "Command $@ does not exists !" && return 1
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        open `dirname $(which "$1")`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ] || [ -d $endfile ]; then
            open $(dirname $endfile)
        else
            open_directory_whereis_command $endfile
        fi
    fi
}
alias openw="open_directory_whereis_command"                                        # Desc: alias: openw:open_directory_whereis_command命令的别名,打开which命令找到的目录或文件

function cd_parent_directory_by_which_command() {                                   # Desc: function: cd_parent_directory_by_which_command:进入命令所在的父级文件夹
    hascommand=$(ifHasCommand $@)
    [[ $hascommand != 1 ]] && echo "Command $@ does not exists !" && return 1
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        cd `dirname $(dirname $(which "$1"))`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ]; then
            cd $(dirname $(dirname $endfile))
        else
            cd_parent_directory_by_which_command $endfile
        fi
    fi
}
alias cdpw="cd_parent_directory_by_which_command"                                   # Desc: alias: cdpw:cd_parent_directory_by_which_command命令的别名,进入命令所在的父级文件夹

function cd_directory_by_which_command() {                                          # Desc: function: cd_directory_by_which_command:进入命令所在的文件夹
    [[ -f $1 ]] && cd $(dirname $1) && return 1
    [[ -d $1 ]] && cd $1 && return 1
    hascommand=$(ifHasCommand $@)
    [[ $hascommand != 1 ]] && echo "Command $@ does not exists !" && return 1
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        cd `dirname $(which "$1")`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ]; then
            cd $(dirname $endfile)
        else
            cd_directory_by_which_command $endfile
        fi
    fi
}
alias cdw="cd_directory_by_which_command"                                           # Desc: alias: cdw:cd_directory_by_which_command命令的别名,进入命令所在的文件夹

function action_which() {                                                           # Desc: function: action_which:用which命令找出文件或命令的位置,并用参数中的命令操作
    local COMMANDBIN="$1"
    local TMPFILEPATH=$(pwd)
    [[ "" = "$1" ]] && echo "Command is empty !" && return 1
    [[ "" != "$2" ]] && TMPFILEPATH="$2"
    
    if [ -d $TMPFILEPATH ] || [ -f $TMPFILEPATH ]; then
        eval "$COMMANDBIN $TMPFILEPATH"
        return
    elif [ "$(type $TMPFILEPATH | grep 'a shell function from')" != "" ] || [ "$(type $TMPFILEPATH | grep 'is an alias for')" != "" ] || [ "$(type $TMPFILEPATH | grep 'is a shell builtin')" != "" ]; then
        endfile=$(type "$TMPFILEPATH" | awk '{print $NF}')
        if [ "$endfile" = "builtin" ]; then
            echo "$TMPFILEPATH is a shell builtin !"
            echo "Chanel ..."
            return 1
        elif [ -f "$endfile" ] || [ -d "$endfile" ]; then
            eval "$COMMANDBIN $endfile"
            return
        else
            action_which "$COMMANDBIN" "$endfile"
            return
        fi
    else
        # 如果 TMPFILEPATH 是一个普通命令，直接执行
        eval "$COMMANDBIN $(which "$TMPFILEPATH")"
        return
    fi
}
alias aw="action_which"                                                             # Desc: alias: aw: action_which命令的别名,用which命令找出文件或命令的位置,并用参数中的命令操作

function get_which_command_directory() {                                            # Desc: function: get_which_command_directory:获取命令所在目录
    local COMMANDBIN="/usr/bin/dirname"
    action_which $COMMANDBIN $1
}
alias dirw="get_which_command_directory"                                            # Desc: alias: dirw:get_which_command_directory命令的别名,获取命令所在目录
alias pwdw="get_which_command_directory"                                            # Desc: alias: pwdw:get_which_command_directory命令的别名,获取命令所在的文件夹

function code_which() {                                                             # Desc: function: code_which:visual studio code 编辑which命令找到的文件地址
    local COMMANDBIN="/usr/local/bin/code"
    action_which $COMMANDBIN $1
}
alias cw="code_which"                                                               # Desc: alias: cw: code_which命令的别名,visualstudio code编辑which命令找到的文件地址
alias codew="code_which"                                                            # Desc: alias: codew: code_which命令的别名,visualstudio code编辑which命令找到的文件地址

function sublime_text_which() {                                                     # Desc: function: sublime_text_which:sublimetext编辑which命令找到的文件地址
    local COMMANDBIN="$HOME/bin/subl"
    action_which $COMMANDBIN $1
}
alias sw="sublime_text_which"                                                       # Desc: alias: sw:sublime_text_which命令的别名,sublimetext编辑which命令找到的文件地址
alias stw="sublime_text_which"                                                      # Desc: alias: stw:sublime_text_which命令的别名,sublimetext编辑which命令找到的文件地址

function vim_which() {                                                              # Desc: function: vim_which:vim编辑which命令找到的文件地址
    if [ -f /usr/local/bin/vim ]; then
        local COMMANDBIN="/usr/local/bin/vim"
    elif [ -f /opt/homebrew/bin/vim ]; then
        local COMMANDBIN="/opt/homebrew/bin/vim"
    fi
    action_which $COMMANDBIN $1
}
alias vw="vim_which"                                                                # Desc: alias: vw: vim_which命令的别名,vim编辑which命令找到的文件地址
alias viw="vim_which"                                                               # Desc: alias: viw: vim_which命令的别名,vim编辑which命令找到的文件地址

function neovim_which() {                                                           # Desc: function: neovim_which:neovim编辑which命令找到的文件地址
    if [ -f /usr/local/bin/nvim ]; then
        local COMMANDBIN="/usr/local/bin/nvim"
    elif [ -f /opt/homebrew/bin/nvim ]; then
        local COMMANDBIN="/opt/homebrew/bin/nvim"
    fi
    action_which $COMMANDBIN $1
}
alias nw="neovim_which"                                                             # Desc: alias: nw: neovim_which命令的别名,neovim编辑which命令找到的文件地址
alias nviw="neovim_which"                                                           # Desc: alias: nviw: neovim_which命令的别名,neovim编辑which命令找到的文件地址

function head_whereis_file() {                                                      # Desc: function: headw:head命令打印which命令找到的文件地址
    local COMMANDBIN="/usr/bin/head"
    action_which $COMMANDBIN $1
}
alias headw="head_whereis_file"                                                     # Desc: alias: headw:head_whereis_file命令的别名,head命令打印which命令找到的文件地址

function tail_whereis_file() {                                                      # Desc: function: tail_whereis_file:tail命令打印which命令找到的文件地址
    local lines=50
    [[ "" != "$2" ]] && lines="$2"
    local COMMANDBIN="/usr/bin/tail -n $lines"
    action_which $COMMANDBIN $1
}
alias tailw="tail_whereis_file"                                                     # Desc: alias: tailw:tail_whereis_file命令的别名,tail命令打印which命令找到的文件地址

function cat_whereis_file() {                                                       # Desc: function: cat_whereis_file:cat打印which命令找到的文件地址
    local COMMANDBIN="/bin/cat"
    [[ -f /usr/local/bin/ccat ]] && COMMANDBIN="/usr/local/bin/ccat"
    [[ -f /opt/homebrew/bin/ccat ]] && COMMANDBIN="/opt/homebrew/bin/ccat"
    action_which $COMMANDBIN $1
}
alias catw="cat_whereis_file"                                                       # Desc: alias: catw:cat_whereis_file命令的别名,cat打印which命令找到的文件地址

function bat_whereis_file() {                                                       # Desc: function: bat_whereis_file:bat命令打印which命令找到的文件地址
    [[ -f /usr/local/bin/bat ]] && COMMANDBIN="/usr/local/bin/bat"
    [[ -f /opt/homebrew/bin/bat ]] && COMMANDBIN="/opt/homebrew/bin/bat"
    action_which $COMMANDBIN $1
}
alias batw="bat_whereis_file"                                                       # Desc: alias: batw:bat_whereis_file命令的别名,bat命令打印which命令找到的文件地址

function type_whereis_file() {                                                      # Desc: function: type_whereis_file:type命令打印which命令找到的文件地址
    local COMMANDBIN="/usr/bin/type"
    action_which $COMMANDBIN $1
}
alias typew="type_whereis_file"                                                     # Desc: alias: typew:type_whereis_file命令的别名,type命令打印which命令找到的文件地址

function ll_whereis_command() {                                                     # Desc: function: ll_whereis_command:打印which命令找到的文件地址
    local COMMANDBIN="/bin/ls -l"
    action_which $COMMANDBIN $1
}
alias llw="ll_whereis_command"                                                      # Desc: alias: llw:ll_whereis_command命令的别名,打印which命令找到的文件地址

function fzf_search_custom_functions_by_desc() {                                    # Desc: function: fzf_search_custom_functions_by_desc:根据自定义的描述和函数名查询自定义命令
    TMP_FUNCTIONS_FILE=$(mktemp)
    local COMMANDPATH=$MYRUNTIME/customs/my_shell/
    find $COMMANDPATH -type f -name "*.bzsh" |xargs grep 'Desc: function:' | grep -v 'TMP_FUNCTIONS_FILE' > $TMP_FUNCTIONS_FILE
    if [ -f $TMP_FUNCTIONS_FILE ] && [ "" != "$(cat $TMP_FUNCTIONS_FILE)" ]; then
        local CHOOSE=$(cat $TMP_FUNCTIONS_FILE | awk -F'# Desc: function:' '{print $2}' | fzf $FZF_CUSTOM_PARAMS \
        --preview-window right:70%:rounded:hidden:wrap \
        --preview "echo {} | sed 's/:/\\n/g'" \
        --delimiter ':' \
        --bind "enter:become(echo {1})" \
        --bind 'ctrl-y:execute-silent(echo -n {1}| pbcopy)+abort' \
        --header="$(_buildFzfHeader '' 'fzf_search_custom_functions_by_desc')" \
        --bind "ctrl-e:execute(bat $TMP_FUNCTIONS_FILE > /dev/tty)")
        if [ "" != "$CHOOSE" ]; then
            echo "$CHOOSE"
            echo ""
            eval "$CHOOSE"
        fi
        rm -f $TMP_FUNCTIONS_FILE
    fi
}
alias fsf="fzf_search_custom_functions_by_desc"                                     # Desc: alias: fsf: fzf_search_custom_functions_by_desc命令的别名,根据自定义的描述和函数名查询自定义命令

function fzf_search_custom_alias_by_desc() {                                        # Desc: function: fzf_search_custom_alias_by_desc:根据自定义的描述和别名查询自定义命令
    TMP_ALIAS_FILE=$(mktemp)
    local COMMANDPATH=$MYRUNTIME/customs/my_shell/
    find $COMMANDPATH -type f -name "*.bzsh" |xargs grep 'Desc: alias:' | grep -v 'TMP_ALIAS_FILE' > $TMP_ALIAS_FILE
    if [ -f $TMP_ALIAS_FILE ] && [ "" != "$(cat $TMP_ALIAS_FILE)" ]; then
        local CHOOSE=$(cat $TMP_ALIAS_FILE | awk -F'# Desc: alias:' '{print $2}' | fzf $FZF_CUSTOM_PARAMS \
        --preview-window right:70%:rounded:hidden:wrap \
        --preview "echo {} | sed 's/:/\\n/g'" \
        --delimiter ':' \
        --bind "enter:become(echo {1})" \
        --bind 'ctrl-y:execute-silent(echo -n {1}| pbcopy)+abort' \
        --header="$(_buildFzfHeader '' 'fzf_search_custom_alias_by_desc')" \
        --bind "ctrl-e:execute(bat $TMP_ALIAS_FILE > /dev/tty)")
        if [ "" != "$CHOOSE" ]; then
            echo "$CHOOSE"
            echo ""
            eval "$CHOOSE"
        fi
        rm -f $TMP_ALIAS_FILE
    fi
}
alias fsa="fzf_search_custom_alias_by_desc"                                         # Desc: alias: fsa: fzf_search_custom_alias_by_desc命令的别名,根据自定义的描述和别名查询自定义命令

function fzf_full_files_manager() {                                                 # Desc: function: fzf_full_files_manager:利用fzf管理文件夹、文件、图片、文本搜索、影音文件等
    ___fzf_manage_all() {
        local ACTION="$1"
        echo "$ACTION" > $TMP_FZF_SEARCH_SWAP_FILE
        local var_name="fzf_transformer_filter_$ACTION"
        local CMD=$fzf_transformer_filter_all
        [[ -n "$BASH_VERSION" ]] && CMD="${!var_name}"
        [[ -n "$ZSH_VERSION" ]] && CMD="${(P)var_name}"
        eval "$CMD" | fzf $FZF_CUSTOM_PARAMS \
        --preview "(${MYRUNTIME}/customs/bin/_previewer {}) 2> /dev/null | head -500" \
        --header="$(_buildFzfHeader '' 'fzf_full_files_manager')"
    }

    while true; do
        action=$(printf "%s\n" \
            "🔎 所有文件" \
            "📁 文件夹搜索" \
            "📄 文件搜索" \
            "🫥 隐藏文件搜索" \
            "🖼️ 图片搜索" \
            "📖 文本搜索" \
            "🎶 媒体操作" \
            "💻 开发语言" \
            "📝 全文搜索" \
            "🚪 退出系统" | \
            fzf --header " 文件管理系统 " \
                --prompt "主菜单 ❯ " \
                --preview-window=up:30% \
                --preview "echo '选择操作类型'" \
                --height=15% \
                --reverse)

        case $action in
        *所有文件*) ___fzf_manage_all "all" ;;
        *文件夹搜索*) ___fzf_manage_all "directories" ;;
        *隐藏文件搜索*) ___fzf_manage_all "hiddens" ;;
        *文件搜索*) ___fzf_manage_all "files" ;;
        *图片搜索*) ___fzf_manage_all "images" ;;
        *文本搜索*) ___fzf_manage_all "documents" ;;
        *媒体操作*) ___fzf_manage_all "medias" ;;
        *开发语言*) ___fzf_manage_all "languages" ;;
        *全文搜索*) ___fzf_manage_all "contents" ;;
        *退出系统*) break 1 ;;
        esac
    done
}
alias ffm="fzf_full_files_manager"                                                  # Desc: alias: ffm: fzf_full_files_manager命令的别名,利用fzf管理文件夹、文件、图片、文本搜索、影音文件等