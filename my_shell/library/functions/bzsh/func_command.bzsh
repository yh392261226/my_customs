### Package Desc: 自定义命令


function search_aliases() { # Desc: function: search_aliases:显示所有含有字符串的自定义命令及注释
    MYRUNTIME=$(cat $HOME/.myruntime)
    customcd $MYRUNTIME/customs/my_shell/library/functions/bzsh

    if [ ""  != "$1" ]; then
        find *.bzsh | xargs ag "$1" | awk -F':' '{print $1}' | sort | uniq | fzf --no-sort \
        --tac \
        $FZF_CUSTOM_PARAMS \
        --height 95% \
        --preview-window right:70%:border-rounded:hidden:wrap \
        --preview 'bat {}' \
        --preview-label='[ 命令及注释 ]'
    else
        find *.bzsh | awk -F':' '{print $1}' | sort | uniq | fzf --no-sort \
        --tac \
        $FZF_CUSTOM_PARAMS \
        --height 95% \
        --preview-window right:70%:border-rounded:hidden:wrap \
        --preview 'bat {}' \
        --preview-label='[ 命令及注释 ]'
    fi
}
alias sas="search_aliases"                                                          # Desc: alias: sas:search_aliases命令的别名,显示所有含有字符串的自定义命令及注释

function fzf_customs_functions() { # Desc: function: fzf_customs_functions:显示所有自定义命令及注释
    TMP_FUNCTIONS_FILE=$(mktemp)
    find $MYRUNTIME/customs/my_shell/library/functions/ -type f -name "*bzsh" |xargs grep -E "(function )(.*?)[^(]*.*#.*Desc" |grep -v '$MYRUNTIME' > $TMP_FUNCTIONS_FILE
    if [ -f $TMP_FUNCTIONS_FILE ]; then
        eval $(cat $TMP_FUNCTIONS_FILE | awk '{$1=""; print $0 }' | \
sed -e "s/^[ ]*//g" | \
sed -e "s/() {//" | awk -F'#' '{print $1}' | \
grep -E "(.*?)[^(]*" | \
sed -e 's/ $//g' | \
fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview "$MYRUNTIME/customs/bin/_show_awesome_function {} $TMP_FUNCTIONS_FILE" \
--preview-label='[ 命令及注释 ]')
        rm -f $TMP_FUNCTIONS_FILE
    fi
}
alias fcf="fzf_customs_functions"                                                   # Desc: alias: fcf:fzf_customs_functions命令的别名,显示所有自定义命令及注释
if [ "zsh" = "$nowshell" ]; then
    zle -N fzf_customs_functions
    bindkey "^f" "fzf_customs_functions"
fi

function fzf_all_aliases() { # Desc: function: fzf_all_aliases:显示所有自定义的别名及注释
    TMP_ALIASES_FILE=$(mktemp)
    alias | sed -e "s/^alias //g" > $TMP_ALIASES_FILE
    if [ -f $TMP_ALIASES_FILE ]; then
        eval $(cat $TMP_ALIASES_FILE | awk -F'=' '{print $1}' | sed -e "s/^[ ]*//g" | grep -v -E "^--(.*?)" | fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview "$MYRUNTIME/customs/bin/_show_custom_alias {} $TMP_ALIASES_FILE"  \
--preview-label='[ Awesome Customs Aliases ]')
        rm -f $TMP_ALIASES_FILE
    fi
}
alias faa="fzf_all_aliases"                                                         # Desc: alias: faa: fzf_all_aliases命令的别名,显示所有自定义的别名及注释
if [ "zsh" = "$nowshell" ]; then
    zle -N fzf_all_aliases
    bindkey å "fzf_all_aliases"
fi

function fzf_custom_aliases() { # Desc: function: fzf_custom_aliases:显示所有自定义命令及注释
    local TMP_ALIASES_FILE=$(mktemp)

    find $MYRUNTIME/customs/my_shell/* -type f ! -path "$MYRUNTIME/customs/my_shell/nu/*" ! -path "$MYRUNTIME/customs/my_shell/fish/*" ! -path "$MYRUNTIME/customs/my_shell/library/functions/fish/*" | xargs grep -rE '^alias\ ' > $TMP_ALIASES_FILE
    if [ -f $TMP_ALIASES_FILE ]; then
        eval $(cat $TMP_ALIASES_FILE | awk '{print $2}' | sed "s/'//g" | sed 's/"//g' | awk -F'=' '{print $1}' | fzf --no-sort --tac $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview "$MYRUNTIME/customs/bin/_show_custom_alias {} ${TMP_ALIASES_FILE} \"customs\""  \
--bind 'focus:transform-preview-label:echo -n "[ {} ]";' \
--preview-label='[ 文件 ]')
        rm -f $TMP_ALIASES_FILE
    fi
}
alias fca="fzf_custom_aliases"                                                      # Desc: alias: fca:fzf_custom_aliases命令的别名,显示所有自定义命令及注释

function fzf_aliases() { # Desc: function: fzf_aliases:利用fzf显示所有别名
    alias | sed -e "s/^alias //g" | fzf --no-sort --tac \
$FZF_CUSTOM_PARAMS \
--height 95% \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview "$MYRUNTIME/customs/bin/_positalias {}" \
--preview-label='[ 文件 ]'
}
alias fsa="fzf_aliases"                                                             # Desc: alias: fsa:fzf_aliases命令的别名,利用fzf显示所有别名

function fzf_customs_fzf_awesome_functions_list() { # Desc: function: fzf_customs_fzf_awesome_functions_list: 利用fzf列出所有自定义fzf相关命令
    if [ ! -f $HOME/.myruntime ]; then
        echo "Awesome Fzf Functions Location Not Found !"
    else
        AWESOME_FZF_FUNCTIONS_LOCATION=$(cat $HOME/.myruntime)/customs/my_shell/
        TMP_FZF_FUNCTIONS_FILE=$(mktemp)
        find $AWESOME_FZF_FUNCTIONS_LOCATION -type f -name "*bzsh" |xargs grep -E "(function fzf_)(.*?)[^(]*" > $TMP_FZF_FUNCTIONS_FILE
        if [ ! -f $TMP_FZF_FUNCTIONS_FILE ]; then
            echo "Awesome Fzf Functions Collection File Does Not Exists !"
        else
            eval $(cat $TMP_FZF_FUNCTIONS_FILE | \
            awk '{$1=""; print $0 }' | \
            sed -e "s/^[ ]*//g" | sed -e "s/() {//" | \
            awk -F'#' '{print $1}' | \
            grep -E "(^fzf_)(.*?)[^(]*" | \
            sed -e 's/ $//g' | \
            fzf $FZF_CUSTOM_PARAMS \
--preview "$MYRUNTIME/customs/bin/_show_awesome_function {} $TMP_FZF_FUNCTIONS_FILE" \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview-label='[ 命令及注释 ]')
            rm -f $TMP_FZF_FUNCTIONS_FILE
        fi
    fi
}
alias fafl="fzf_customs_fzf_awesome_functions_list"                                 # Desc: alias: fafl: fzf_customs_fzf_awesome_functions_list命令的别名,利用fzf列出所有自定义fzf相关命令

function custom_aliases_from_a2z() { # Desc: function: custom_aliases_from_a2z:显示从a-z的自定义命令
    hr "⬳"
    echo -n "[ $(echo -e {a..z}) ]\n"
    hr "⬳"
    echo "⭆ Already exists command:"
    hr "⬳"
    for word in {a..z}; do
        if [ "$(command -v $word)" != "" ]; then
            type $word | grep -v "not found";
            if [ "$nowshell" != "bash" ]; then
                hr "↼"
                which $word | grep -v "not found";
                hr "↼"
            fi
        fi
    done
}
alias a2z="custom_aliases_from_a2z"                                                 # Desc: alias: a2z:custom_aliases_from_a2z命令的别名,显示从a-z的自定义命令

function update_iterm2_shell_integration() { # Desc: function: update_iterm2_shell_integration:更新iterm2的扩展shell
	curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash
}
alias upisi="update_iterm2_shell_integration"                                       # Desc: alias: upisi:update_iterm2_shell_integration命令的别名,更新iterm2的扩展shell

function my_ps() { # Desc: function: my_ps:显示当前用户的进程
    ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ;
}
alias myps="my_ps"                                                                  # Desc: alias: myps:my_ps命令的别名,显示当前用户的进程

function my_message() { # Desc: function: my_message:显示我的自定义SHELL头信息
    clear
    _COLUMNS=$(tput cols)
    source $MYRUNTIME/tools/m_title
    y=$(( ( $_COLUMNS - ${#_TITLE} )  / 2 ))
    spaces=$(printf "%-${y}s" " ")
    echo " "
    echo -e "${spaces}\033[41;37;5m ${_TITLE} \033[0m"
    echo " "


    _COLUMNS=$(tput cols)
    source $MYRUNTIME/tools/m_message
    y=$(( ( $_COLUMNS - ${#_MESSAGE} )  / 2 ))
    spaces=$(printf "%-${y}s" " ")
    echo -e "${spaces}${_MESSAGE}"
    echo " "
    for ((i=1; i<=$(tput cols); i ++))  ; do echo -n '*';done

    echo " "
}
alias mymessage="my_message"                                                        # Desc: alias: myMessage:my_message命令的别名,显示我的自定义SHELL头信息

function acdul() { # Desc: function: acdul:acd 操作？
    acdcli ul -x 8 -r 4 -o "$@"
}

function show_bad_links() { # Desc: function: show_bad_links:列出所有失效软连接,默认读取家目录,可以指定目录badlink /data
    local readpath=$HOME
    if [ "" != "$1" ]; then
        readpath=$1
    fi
    echo "File List broken links:"
    for file in $(ls -a $readpath); do
    realpath=$(/usr/bin/readlink $readpath/$file)
    if [ ! -f $realpath ] && [ ! -d $realpath ]; then
        echo $readpath/$file
    fi
    done
}
alias badlinks="show_bad_links"                                                     # Desc: alias: badlink:show_bad_links命令的别名,列出所有失效软连接,默认读取家目录,可以指定目录badlink /data

function build_by_extension() { # Desc: function: build_by_extension:生成【参数为后缀名的】的数据文件
    [ $# -eq 0 ] && return

    cmd="find `pwd`"
    for ext in $@; do
        cmd=" $cmd -name '*.$ext' -o"
    done
    echo ${cmd: 0: ${#cmd} - 3}
    eval "${cmd: 0: ${#cmd} - 3}" > cscope.files &&
        cscope -b -q && rm cscope.files
}
alias csbuild="build_by_extension"                                                  # Desc: alias: csbuild: build_by_extension命令的别名,生成【参数为后缀名的】的数据文件

function clear_camera_cache() { # Desc: function: clear_camera_cache:清理摄像头缓存
    sudo killall VDCAssistant
}
alias ccamera="clear_camera_cache"                                                  # Desc: alias: ccamera: clear_camera_cache命令的别名,清理摄像头缓存

function sign_tnt_code_name() { # Desc: function: sign_tnt_code_name:TNT破解失效 更改签名
    if [ $# -ne 1 ]; then
        echo "Type $0 App path to replace the app sign"
        return 1
    fi
    if [ -d "$1" ]; then
        /usr/bin/codesign --force --deep --sign - "$1"
    else
        echo "The app path does not exists !!!"
        return 1
    fi
}
alias cs="sign_tnt_code_name"                                                       # Desc: alias: cs:sign_tnt_code_name命令的别名,TNT破解失效,更改签名

function fzf_figlet_font_selector() { # Desc: function: fzf_figlet_font_selector:Figlet字体选择器
    cd $(brew --prefix)/figlet/*/share/figlet/fonts
    figlet -f `ls *.flf | sort | fzf $FZF_CUSTOM_PARAMS --preview-label='[ 字体 ]'` $*
}
alias fffs="fzf_figlet_font_selector"                                               # Desc: alias: fffs:fzf_figlet_font_selector命令的别名,Figlet字体选择器

function miniprompt() { # Desc: function: miniprompt:临时最简化,终端主题
    unset PROMPT_COMMAND
    export PS1="\[\e[38;5;168m\]> \[\e[0m\]"
}
alias mp="miniprompt"                                                               # Desc: alias: mp: miniprompt命令的别名,临时最简化,终端主题

function speaking_by_osx_voice() { # Desc: function: speaking_by_osx_voice:利用osx系统发音说话
    words="$@"
    hasgum=$(ifHasCommand gum)

    if [ "" = "$words" ]; then
        [[ 1 = $hasgum ]] && (gum input --placeholder "Type something...") || (echo "请输入要说的话 \n例如：$0 haha " && return 1)
    fi
    #osascript -e 'say "'$words'" using "Cellos"'
    osascript -e 'say "'$words'" using "Ting-Ting"'
}
sbov="speaking_by_osx_voice"                                                        # Desc: alias: sbov: speaking_by_osx_voice命令的别名,利用osx系统发音说话

function my_weather() { # Desc: function: my_weather:获取哈尔滨天气
    if [ -f /opt/homebrew/opt/curl/bin/curl ]; then
        /opt/homebrew/opt/curl/bin/curl https://wttr.in/harbin\?lang\=zh
    else
        curl https://wttr.in/harbin\?lang\=zh
    fi
}
alias myweather="my_weather"                                                        # Desc: alias: myweather:my_weather命令的别名,获取哈尔滨天气

function history_sort_by_used() { # Desc: function: history_sort_by_used:按执行次数倒序显示历史命令
    local last_command_type=`history | tail -n 1 | awk '{print($0~/^[-]?([0-9])+[.]?([0-9])+$/)?"number":"string"}'`
    if [ "$last_command_type" = "number" ]; then
        history | awk '{$1="";print}' | sort -rn | uniq -c | sort -rn | less
    else
        history | sort -rn | uniq -c | sort -rn | less
    fi
}
alias hsu="history_sort_by_used"                                                    # Desc: alias: hsu: history_sort_by_used命令的别名,按执行次数倒序显示历史命令

function fzf_history_repeat() { # Desc: function: fzf_history_repeat:列出历史操作命令,选择后执行
    eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac $FZF_CUSTOM_PARAMS \
--preview ' echo {} | awk "{\$1=\"\";print}"' \
--preview-label='[ 历史操作 ]' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'ctrl-y:execute-silent(echo {} | awk "{\$1=\"\";print}" | pbcopy)+abort' \
     | sed 's/ *[0-9]* *//')
}
alias fhr="fzf_history_repeat"                                                      # Desc: alias: fhr:fzf_history_repeat命令的别名,列出历史操作命令,选择后执行

function help_by_tldr() { # Desc: function: help_by_tldr:help帮助,tldr命令别名
    tldr $@
}
alias help="help_by_tldr"                                                           # Desc: alias: help:help_by_tldr命令的别名,help帮助,tldr命令别名

function ps_or_procs_search() { # Desc: function: ps_or_procs_search:ps -ef或procs |grep 进程
    [[ "" = "$@" ]] && return 1
    if command -v procs &> /dev/null
    then
        procs | grep "$@" | grep -v grep 
    else
        ps -ef|grep "$@" | grep -v grep #|fzf
    fi
}
alias p='ps_or_procs_search'                                                        # Desc: alias: p:ps_or_procs_search命令的别名,ps -ef或procs |grep 进程

function btop() { # Desc: function: btop:bashtop命令的别名 
    [[ -f /usr/local/bin/bashtop ]] && /usr/local/bin/bashtop "$@" || echo "bashtop does not exists !"
}
alias bt="btop"                                                                     # Desc: alias: bt: btop命令的别名,bashtop命令的别名 

function shell_debug() { # Desc: function: shell_debug:依赖shellcheck对shell脚本debug
    [[ -f /usr/local/bin/shellcheck ]] && /usr/local/bin/shellcheck "$@" || echo "shellcheck does not exsits !"
}
alias sdbug="shell_debug"                                                           # Desc: alias: sdbug:shell_debug命令的别名,依赖shellcheck对shell脚本debug

function fzf_history() { # Desc: function: fzf_history:依赖fzf读取history结果
    history | fzf $FZF_CUSTOM_PARAMS \
--preview ' echo {} | awk "{\$1=\"\";print}"' \
--preview-label='[ 操作历史 ]' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'ctrl-y:execute-silent(echo {} | awk "{\$1=\"\";print}" | pbcopy)+abort'
}
alias fh="fzf_history"                                                              # Desc: alias: fh:fzf_history命令的别名,依赖fzf读取history结果

function file_tree() { # Desc: function: file_tree:tree命令
	mpath='./'
	[[ "" != "$1" ]] && mpath=$1
	ls -R $mpath | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'
}
alias ftree="file_tree"                                                             # Desc: alias: ftree:file_tree命令的别名,tree命令

function fzf_history_print() { # Desc: function: fzf_history_print:列出历史操作命令,选择后打印
    print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac $FZF_CUSTOM_PARAMS \
--preview ' echo {} | awk "{\$1=\"\";print}"' \
--preview-label='[ 操作历史 ]' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'ctrl-y:execute-silent(echo {} | awk "{\$1=\"\";print}" | pbcopy)+abort' \
    | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}
alias fhp='fzf_history_print'                                                       # Desc: alias: fhp:fzf_history_print命令的别名,列出历史操作命令,选择后打印

function fzf_theme_selector() { # Desc: function: fzf_theme_selector:fzf主题选择器
    #MYRUNTIME=$(cat ~/.myruntime)
    themes_path=$MYRUNTIME/customs/tools/fzf_themes/
    choose_theme=$(ls $themes_path | fzf $FZF_CUSTOM_PARAMS --preview-window right:70%:border-rounded:hidden:wrap --preview " bat $themes_path/{} " --preview-label='[ 主题 ]')

    [[ ! "$choose_theme" ]] && echo "Action abort!" && return
    if [[ -f ${themes_path}/$choose_theme ]]; then
        source ${themes_path}/$choose_theme
    fi
}
alias fts='fzf_theme_selector'                                                      # Desc: alias: fts:fzf_theme_selector命令的别名,fzf主题选择器

function command_sl_selector() { # Desc: function: command_sl_selector:输入命令sl并执行时，二次验证选择
    echo "执行命令行小火车：1, ls命令：2"
    hasgum=$(ifHasCommand gum)

    [[ "$hasgum" = "1" ]]  && choose=$(gum choose "1" "2") || read choose
    case "$choose" in
    "1")
        [[ -f /opt/homebrew/bin/sl ]] && /opt/homebrew/bin/sl
        [[ -f /usr/local/bin/sl ]] && /usr/local/bin/sl
    ;;
    "2")
        [[ -f /usr/local/bin/lsd ]] && /usr/local/bin/lsd -la
        [[ -f /opt/homebrew/bin/lsd ]] && /opt/homebrew/bin/lsd -la
    ;;
    "*")
        echo "无效选择，自动退出..."
    ;;
    esac
}
alias sl='command_sl_selector'                                                      # Desc: alias: sl:command_sl_selector命令的别名,输入命令sl并执行时，二次验证选择

# Man without options will use fzf to select a page
function fzf_man() { # Desc: function: fzf_man:利用fzf选中man手册
	MAN="/usr/bin/man"
	if [ -n "$1" ]; then
		$MAN "$@"
		return $?
	else
		$MAN -k . | fzf $FZF_CUSTOM_PARAMS \
--preview="echo {1,2} | sed 's/ (/./' | sed -E 's/\)\s*$//' | xargs $MAN" \
--preview-label='[ 手册 ]' \
| awk '{print $1 "." $2}' | tr -d '()' | xargs -r $MAN
		return $?
	fi
}
alias fman="fzf_man"                                                                # Desc: alias: fzf_man的别名,利用fzf选中man手册

function fzf_man_widget() { # Desc: function: fzf_man_widget:fzf版本的man命令
  batman="man {1} | col -bx | bat --language=man --plain --color always --theme=\"Monokai Extended\""
   man -k . | sort \
   | awk -v cyan=$(tput setaf 6) -v blue=$(tput setaf 4) -v res=$(tput sgr0) -v bld=$(tput bold) '{ $1=cyan bld $1; $2=res blue;} 1' \
   | fzf -q "$1" --ansi --tiebreak=begin $FZF_CUSTOM_PARAMS \
--preview-window '50%,rounded,<50(up,85%,border-bottom)' \
--preview "${batman}" \
--bind 'enter:execute(man {1})' \
--bind 'ctrl-c:+change-preview(cheat {1})+change-prompt(ﯽ Cheat > )' \
--bind 'ctrl-m:+change-preview(${batman})+change-prompt( Man > )' \
--bind 'ctrl-t:+change-preview(tldr --color=always {1})+change-prompt(ﳁ TLDR > )' \
--header 'CTRL-C Cheat | CTRL-M Man | CTRL-T Tldr | CTRL-S 切换排序 | CTRL-Y 复制内容 | CTRL-/ 切换预览窗口  | CTRL-N 下翻页 | CTRL-P 上翻页'
  echo ""
}
alias fmw="fzf_man_widget"                                                          # Desc: alias: fmw:fzf_man_widget命令的别名,fzf版本的man命令

#   mans:   Search manpage given in agument '1' for term given in argument '2' (case insensitive)
#           displays paginated result with colored search terms and two lines surrounding each hit.             Example: mans mplayer codec
#   --------------------------------------------------------------------
function mans () { # Desc: function: mans:man command[$1] and highlight keyword[$2]
    man $1 | grep -iC2 --color=always $2 | less
}

function mark_by_cheatsh() { # Desc: function: mark_by_cheatsh:依托于cheat.sh的备忘录
    if [ $# -lt 1 ]; then
        echo "Usage:$0 language function"
        echo ""
        echo "---------------------------------------"
        echo ""
        curl cht.sh
        return 0
    fi


    url="cheat.sh/"
    if [ "$1" != "" ]; then
        url="cheat.sh/$1/"
    fi

    if [ "$2" != "" ]; then
        url="cheat.sh/$1/$2"
    fi

    if [ "$3" != "" ]; then
        url="cheat.sh/$1/$2+$3"
    fi
    curl $url
}
alias mbc="mark_by_cheatsh"                                                         # Desc: alias: mbc:mark_by_cheatsh命令的别名,依托于cheat.sh的备忘录

function fzf_aliases_functions_selector() { # Desc: function: fzf_aliases_functions_selector:显示所有的alias和function并通过fzf选用
    CMD=$(
        (
            (alias)
            (functions | grep "()" | cut -d ' ' -f1 | grep -v "^_" )
        ) | fzf $FZF_CUSTOM_PARAMS --preview-label='[ 命令 ]' | cut -d '=' -f1
    );

    eval $CMD
}
alias faf="fzf_aliases_functions_selector"                                          # Desc: alias: faf: fzf_aliases_functions_selector命令的别名,显示所有的alias和function并通过fzf选用

function fzf_env_vars() { # Desc: function: fzf_env_vars:利用fzf选用env变量的值
  env | fzf $FZF_CUSTOM_PARAMS --preview-label='[ 环境变量 ]' \
--bind 'ctrl-k:execute-silent(echo {} | awk -F"=" "{print \$1}" | pbcopy)+abort' \
--bind 'ctrl-v:execute-silent(echo {} | awk -F"=" "{print \$2}" | pbcopy)+abort' \
--header 'CTRL-K 复制键 | CTRL-V 复制值 | CTRL-Y 复制整体内容 | CTRL-/ 切换预览窗口 | CTRL-S 切换排序 | CTRL-N 下翻页 | CTRL-P 上翻页'
}
alias fev="fzf_env_vars"                                                            # Desc: alias: fev: fzf_env_vars命令的别名,利用fzf选用env变量的值

function fzf_eval_preview() { # Desc: function: fzf_eval_preview: 利用fzf执行选中的命令并preview结果
    echo | fzf -q "$*" $FZF_CUSTOM_PARAMS --preview-window up:90%:border-rounded:hidden:wrap --preview="eval {q}" --preview-label='[ 命令 ]'
}
alias fep="fzf_eval_preview"                                                        # Desc: alias: fep: fzf_eval_preview命令的别名,利用fzf执行选中的命令并preview结果

function fold() { # Desc: function: fold: Default `fold` to screen width and break at spaces
  if [ $# -eq 0 ]; then
    /usr/bin/fold -w $COLUMNS -s
  else
    /usr/bin/fold $*
  fi
}

function fzf_spell() { # Desc: function: fzf_spell: Use `fzf` against system dictionary
  cat /usr/share/dict/words | fzf $FZF_CUSTOM_PARAMS \
--preview-window up:70%:border-rounded:hidden:wrap \
--preview 'wn {} -over | fold' \
--preview-label='[ 单词 ]'
}
alias fspell='fzf_spell'                                                            # Desc: alias: fspell: fzf_spell命令的别名,Use `fzf` against system dictionary

function dic() { # Desc: function: dic: Lookup definition of word using `wn $1 -over`.If $1 is not provided, we'll use the `spell` command to pick a word. Requires:brew install wordnet, brew install fzf
  if [ $# -eq 0 ]; then
    wn `fzf_spell` -over | fold
  else
    wn $1 -over | fold
  fi
}

function fzf_fg() { # Desc: function: fzf_fg: 利用fzf显示所有的后台执行程序
  job="$(jobs | fzf -0 -1 $FZF_CUSTOM_PARAMS \
--preview 'echo {} | awk "{\$1=\"\";\$2=\"\";\$3=\"\";print}"' \
--preview-label='[ 后台程序 ]' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'ctrl-y:execute-silent(echo {} | awk "{\$1=\"\";\$2=\"\";\$3=\"\";print}" | pbcopy)+abort' \
  | sed -E 's/\[(.+)\].*/\1/')" && echo '' && fg %$job
}
alias ffg="fzf_fg"                                                                  # Desc: alias: ffg: fzf_fg命令的别名,利用fzf显示所有的后台执行程序

function su() { # Desc: function: su:su命令后,theme自动切换主题
	(
		INHIBIT_THEME_HIST=1 $MYRUNTIME/customs/bin/theme red-alert
		trap '$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"' INT
		env su "$@"
		$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"
	)
}

function sudo() { # Desc: function: sudo:sudo命令后,theme自动切换主题
	(
		pid=$(exec sh -c 'echo "$PPID"')

		# If the command takes less than .2s, don't change the theme.
		# We could also just match on 'su' and ignore everything else,
		# but this also accomodates other long running commands
		# like 'sudo sleep 5s'. Modify to taste.

		(
				sleep .2s
				ps -p "$pid" > /dev/null && INHIBIT_THEME_HIST=1 $MYRUNTIME/customs/bin/theme red-alert
		) &

		trap '$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"' INT
		env sudo "$@"
		$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"
	)
}

function ssh() { # Desc: function: ssh:ssh命令后,theme自动切换主题
	# A tiny ssh wrapper which extracts a theme from ~/.ssh_themes
	# and applies it for the duration of the current ssh command.
	# Each line in ~/.ssh_themes has the format:
	#     <hostname>: <theme>.

	# Restoration relies on the fact that you are using theme.sh to manage
	# the current theme.  (that is, you set the theme in your bashrc.)

	# This can probably be made more robust. It is just a small demo
	# of what is possible.


	touch ~/.ssh_themes

	host="$(echo "$@"|awk '{gsub(".*@","",$NF);print $NF}')"
	theme="$(awk -vhost="$host" -F': *' 'index($0, host":") == 1 {print $2}' < ~/.ssh_themes)"

	if [ -z "$theme" ]; then
		env ssh "$@"
		return
	fi

	INHIBIT_THEME_HIST=1 $MYRUNTIME/customs/bin/theme "$theme"
	trap '$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"' INT
	env ssh "$@"
	$MYRUNTIME/customs/bin/theme "$($MYRUNTIME/customs/bin/theme -l|tail -n1)"
}

function last_theme() { # Desc: function: last_theme: 获取theme命令最后一次的设置
	echo $($MYRUNTIME/customs/bin/theme -l|tail -n2|head -n1)
}
alias ltheme="last_theme"                                                           # Desc: alias: ltheme: last_theme命令的别名,获取theme命令最后一次的设置

function fzf_open_app() { # Desc: function: fzf_open_app: 利用fzf通过终端打开App
    ls /Applications/ | fzf --ansi $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview 'tree /Applications/{}' \
--preview-label='[ App ]' \
--bind 'enter:become(open /Applications/{})' \
--bind 'ctrl-y:execute-silent(echo "open /Applications/{}"| pbcopy)+abort'
}
alias foa="fzf_open_app"                                                            # Desc: alias: foa: fzf_open_app命令的别名,利用fzf通过终端打开App

function cp_forward() { # Desc: function: cp_forward: cp复制完成后跳转至目录
    cp "$@" && goto "$_";
}
alias cpf="cp_forward"                                                              # Desc: alias: cpf:cp_forward命令的别名,cp复制完成后跳转至目录

function mv_forward() { # Desc: function: mv_forward: mv移动完成后跳转至目录
    mv "$@" && goto "$_";
}
alias mvf="mv_forward"                                                              # Desc: alias: mvf:mv_forward命令的别名,mv移动完成后跳转至目录

function mkdir_forward() { # Desc: function: mkdir_forward: mkdir创建目录完成后跳转至目录
    mkdir -p $1; cd $1
}
alias mkf="mkdir_forward"                                                           # Desc: alias: mkf: mkdir_forward命令的别名,mkdir创建目录完成后跳转至目录

function most_used_command() { # Desc: function: most_used_command:历史操作中使用最多的50个命令
    #除了history外,在omz中可以使用:omz_history -n | sed 's/^[[:space:]]*//g' | sed 's/^[0-9]*//g' | sed 's/^[[:space:]]*//g' | sort | uniq -c | sort -n -k1 | tail -30 | tac

    history | sed 's/^[[:space:]]\{0,\}[0-9]\{1,\}//g' | sed 's/^[[:space:]]*//g' | sed 's/^[[:space:]]\{0,\}[0-9]\{1,\}//g' | sed 's/^[[:space:]]*//g' | sort | uniq -c | sort -n -k1 | tail -50 | tac |fzf $FZF_CUSTOM_PARAMS --no-sort \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview 'echo {} | awk "{\$1=\"\";print}"' \
--preview-label='[ 使用次数 ]' \
--bind 'enter:become(echo {} | awk "{\$1=\"\";print}")' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'ctrl-y:execute-silent(echo {} | awk "{\$1=\"\";print}" | pbcopy)+abort'
}
alias muc="most_used_command"                                                       # Desc: alias: muc: most_used_command命令的别名,历史操作中使用最多的50个命令
