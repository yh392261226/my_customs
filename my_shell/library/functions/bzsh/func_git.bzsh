### Package Desc: Git版本控制工具相关


function is_git() { # Desc: function: is_git:pick files from `git status -s`
    git rev-parse HEAD > /dev/null 2>&1
}

function fzf_checkout_git_branch() { # Desc: function: fzf_checkout_git_branch:checkout git branch
    local branches branch
    branches=$(git branch --all | grep -v HEAD) &&
        branch=$(echo "$branches" |
    fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
        git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
alias fzf_br="fzf_checkout_git_branch"      # Desc: alias: fzf_br:fzf_checkout_git_branch命令的别名,checkout git branch
alias fbr="fzf_checkout_git_branch"         # Desc: alias: fbr:fzf_checkout_git_branch命令的别名,checkout git branch

function fzf_git_checkout_commit() { # Desc: function: fzf_git_checkout_commit:checkout git commit
    local commits commit
    commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
    commit=$(echo "$commits" | fzf --tac +s +m -e --reverse \
                                   --margin=1 \
                                   --padding=1 \
                                   --preview-window bottom:6:border-rounded:hidden:wrap \
                                   --preview " echo {2} " \
                                   --preview-label-pos top,4 \
                                   --preview-label='[ checkout ]' \
                                   --prompt="checkout > "\
                                   --bind 'ctrl-/:toggle-preview' \
                                   --bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
                                   --bind 'ctrl-y:execute-silent(echo -n {1}| pbcopy)+abort' \
                                   --header "Press CTRL-Y to copy content into clipboard Or CTRL-/ to toggle preview window" \
) &&
    git checkout $(echo "$commit" | sed "s/ .*//")
}
alias fcoc="fzf_git_checkout_commit"    # Desc: alias: fcoc:fzf_git_checkout_commit命令的别名,checkout git commit

function fzf_git_checkout_preview() { # Desc: function: fzf_git_checkout_preview:checkout git branch/tag, with a preview showing the commits between the tag/branch and HEAD
    local tags branches target
    tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
    branches=$(
    git branch --all | grep -v HEAD |
    sed "s/.* //" | sed "s#remotes/[^/]*/##" |
    sort -u | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
    target=$(
    (echo "$tags"; echo "$branches") |
    fzf --no-hscroll \
        --no-multi \
        --delimiter="\t" -n 2 \
        --ansi \
        --reverse \
        --margin=1 \
        --padding=1 \
        --preview-window right:70%:border-rounded:hidden:wrap \
        --preview="git log -200 --pretty=format:%s $(echo {+2..} |  sed 's/$/../' )" \
        --preview-label-pos top,4 \
        --preview-label='[ Checkout Preview ]' \
        --prompt="Checkout Preview > "\
        --bind 'ctrl-/:toggle-preview' \
        --bind 'focus:transform-preview-label:echo -n "[ {2} ]";' \
        --bind 'ctrl-y:execute-silent(echo -n {2}| pbcopy)+abort' \
        --header "Press CTRL-Y to copy content into clipboard Or CTRL-/ to toggle preview window" \
        ) || return
    git checkout $(echo "$target" | awk '{print $2}')
}
alias fcop="fzf_git_checkout_preview"        # Desc: alias: fcop:fzf_git_checkout_preview命令的别名,checkout git branch/tag, with a preview showing the commits between the tag/branch and HEAD

function fzf_git_commit_sha() { # Desc: function: fzf_git_commit_sha:get git commit sha. example usage: git rebase -i `fcs`
    local commits commit
    commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
    commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse \
                                   --margin=1 \
                                   --padding=1 \
                                   --preview-window bottom:6:border-rounded:hidden:wrap \
                                   --preview " echo {2} " \
                                   --preview-label-pos top,4 \
                                   --preview-label='[ Commit Sha ]' \
                                   --prompt="Commit Sha > "\
                                   --bind 'ctrl-/:toggle-preview' \
                                   --bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
                                   --bind 'ctrl-y:execute-silent(echo -n {1}| pbcopy)+abort' \
                                   --header "Press CTRL-Y to copy content into clipboard Or CTRL-/ to toggle preview window" \
    ) &&
    echo -n $(echo "$commit" | sed "s/ .*//")
}
alias fcs="fzf_git_commit_sha"  # Desc: alias: fcs:fzf_git_commit_sha命令的别名,get git commit sha. example usage: git rebase -i `fcs`

function fzf_git_checkout() { # Desc: function: fzf_git_checkout:checkout git branch/tag
    local tags branches target
    tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
    branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
    target=$(
    (echo "$tags"; echo "$branches") |
    fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
    git checkout $(echo "$target" | awk '{print $2}')
}
alias fco="fzf_git_checkout"        # Desc: alias: fco:fzf_git_checkout命令的别名,checkout git branch/tag

function fzf_git_checkout2() { # Desc: function: fzf_git_checkout2:checkout git branch
    if git rev-parse --git-dir > /dev/null 2>&1; then
        if [[ "$#" -eq 0 ]]; then
            local branches branch
            branches=$(git branch -a) &&
            branch=$(echo "$branches" |
            fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
            git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
        elif [ `git rev-parse --verify --quiet $*` ] || \
             [ `git branch --remotes | grep  --extended-regexp "^[[:space:]]+origin/${*}$"` ]; then
            echo "Checking out to existing branch"
            git checkout "$*"
        else
            echo "Creating new branch"
            git checkout -b "$*"
        fi
    else
        echo "Can't check out or create branch. Not in a git repo"
    fi
}
alias fco2="fzf_git_checkout2"        # Desc: alias: fco2:fzf_git_checkout2命令的别名,checkout git branch

function fzf_git_stash() { # Desc: function: fzf_git_stash:Easier way to deal with stashes. type fstash to get a list of your stashes. enter shows you the contents of the stash. ctrl-d shows a diff of the stash against your current HEAD. ctrl-b checks the stash out as a branch, for easier merging
    local out q k sha
    while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi \
        --no-sort \
        --query="$q" \
        --print-query \
        --expect=ctrl-d,ctrl-b \
        --reverse \
        --margin=1 \
        --padding=1 \
        --preview-window bottom:6:border-rounded:hidden:wrap \
        --preview " echo {} " \
        --preview-label-pos top,4 \
        --preview-label='[ Git Stash ]' \
        --prompt="Git Stash > "\
        --bind 'ctrl-/:toggle-preview' \
        --bind 'focus:transform-preview-label:echo -n "[ {} ]";' \
        --bind 'ctrl-y:execute-silent(echo -n {}| pbcopy)+abort' \
        --header-lines 2 \
        --header "CTRL-Y 复制内容 | CTRL-/ 切换预览窗口 | CTRL-d 比对存储与HEAD | CTRL-b 将存储切成分支" \
        );
    do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
        git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
        git stash branch "stash-$sha" $sha
        break;
    else
        git stash show -p $sha
    fi
    done
}
alias fgsh="fzf_git_stash"    # Desc: alias: fgsh:fzf_git_stash命令的别名,Easier way to deal with stashes. type fgsh to get a list of your stashes. enter shows you the contents of the stash. ctrl-d shows a diff of the stash against your current HEAD. ctrl-b checks the stash out as a branch, for easier merging

function fzf_git_status() { # Desc: function: fzf_git_status: 显示当前git的状态,并用编辑打开选择的文件
  git rev-parse --git-dir > /dev/null 2>&1 || {
    echo "You are not in a git repository" && return
  }
  local selected
  selected=$(git -c color.status=always status --short |
      fzf --height 70% "$@" \
          --border -m \
          --ansi \
          --nth 2..,.. \
          --reverse \
          --margin=1 \
          --padding=1 \
          --preview-window right:70%:border-rounded:hidden:wrap \
          --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' \
          --preview-label-pos top,4 \
          --preview-label='[ 预览 ]' \
          --prompt="预览 > "\
          --bind 'ctrl-/:toggle-preview' \
          --bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
          --bind 'ctrl-y:execute-silent(echo -n {-1}| pbcopy)+abort' \
          --header "CTRL-Y 复制内容 | CTRL-/ 切换预览窗口" \
      | cut -c4- | sed 's/.* -> //')
    if [[ $selected ]]; then
        for prog in $(echo $selected); do
		$EDITOR $prog; 
	done;
    fi
}
alias fgs="fzf_git_status"  # Desc: alias: fgs:fzf_git_status的别名,显示当前git的状态,并用编辑打开选择的文件

function fzf_git_untracked() { # Desc: function: fzf_git_untracked:显示当前git版本库中未添加进版本的修改或新增文件列表
    is_git || return

    local cmd="${FZF_CTRL_T_COMMAND:-"command git status -s"}"

    eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} \
    --reverse $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" \
    fzf -m "$@" \
        --reverse \
        --margin=1 \
        --padding=1 \
        --preview-window bottom:6:border-rounded:hidden:wrap \
        --preview " echo {2} " \
        --preview-label-pos top,4 \
        --preview-label='[ 预览 ]' \
        --prompt="预览 > "\
        --bind 'ctrl-/:toggle-preview' \
        --bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
        --bind 'ctrl-y:execute-silent(echo -n {2}| pbcopy)+abort' \
        --header "CTRL-Y 复制内容 | CTRL-/ 切换预览窗口" \
    | while read -r item; do
    echo "$item" | awk '{print $2}'
    done
    echo
}
alias fgu="fzf_git_untracked"      # Desc: alias: fgu:fzf_git_untracked命令的别名,显示当前git版本库中未添加进版本的修改或新增文件列表

function fzf_git_commit_browser() { # Desc: function: fzf_git_commit_browser:git commit browser
git log --graph --color=always \
    --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" | fzf --ansi \
                                                               --no-sort \
                                                               --reverse \
                                                               --margin=1 \
                                                               --padding=1 \
                                                               --tiebreak=index \
                                                               --preview-window bottom:6:border-rounded:hidden:wrap \
                                                               --preview " echo {} " \
                                                               --preview-label-pos top,4 \
                                                               --preview-label='[ 预览 ]' \
                                                               --prompt="预览 > "\
                                                               --bind 'focus:transform-preview-label:echo -n "[ {2} ]";' \
                                                               --bind 'ctrl-s:toggle-sort' \
                                                               --bind 'ctrl-y:execute-silent(echo -n {2}| pbcopy)+abort' \
                                                               --bind "ctrl-m:execute:(grep -o '[a-f0-9]\{7\}' | head -1 | xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
{}" \
                                                               --bind 'ctrl-/:toggle-preview' \
                                                               --header "CTRL-Y 复制内容 | CTRL-/ 切换预览窗口 | CTRL-S 切换排序 | CTRL-M 显示修改内容"
}
alias fgcb="fzf_git_commit_browser"    # Desc: fgcb:fzf_git_commit_browser命令的别名,git commit browser

function git_diff_branches() { # Desc: function: git_diff_branches:Git比对两个分支
    if [ $# -ne 2 ]; then
        echo two branch names required
        return
    fi
    git log --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' \
        --abbrev-commit --date=relative $1..$2
}
alias gd2b="git_diff_branches"     # Desc: alias: gd2b:git_diff_branches命令的别名,Git比对两个分支

function update_git_files_and_modules() { # Desc: function: update_git_files_and_modules:更新git的目录及git module的目录
    if [ "" != "$1" ]; then
        filepath=$1
    else
        filepath=$MYRUNTIME
    fi

    for f in $(/bin/ls $filepath/); do
        if [ -d $filepath/$f/.git ]; then
            echo $filepath/$f
            customcd $filepath/$f/ && /usr/bin/git pull
        fi
        if [ -f $filepath/$f/.gitmodules ]; then
            echo $filepath/$f
            customcd $filepath/$f/ && /usr/bin/git submodule update --init --recursive
        fi
    done
    customcd ~
}
alias upgitfiles="update_git_files_and_modules"     # Desc: alias: upgitfiles:update_git_files_and_modules命令的别名,更新git的目录及git module的目录


function fzf_git_vim_to_line() { # Desc: function:fzf_git_vim_to_line: Git版本中全部文件内容展示,并利用fzf选择后由vim打开并定位到行
    git grep --line-number . | fzf --delimiter : --nth 3.. \
                                   --reverse \
                                   --margin=1 \
                                   --padding=1 \
                                   --preview-window bottom:6:border-rounded:hidden:wrap \
                                   --preview " echo {} " \
                                   --preview-label-pos top,4 \
                                   --preview-label='[ 查找 ]' \
                                   --prompt="查找 > "\
                                   --bind 'ctrl-/:toggle-preview' \
                                   --bind 'focus:transform-preview-label:echo -n "[ {} ]";' \
                                   --bind 'ctrl-y:execute-silent(echo -n {}| pbcopy)+abort' \
                                   --bind 'enter:become(vim {1} +{2})' \
                                   --header "CTRL-Y 复制内容 | CTRL-/ 切换预览窗口"
}
alias fgvl="fzf_git_vim_to_line" # Desc: alias: fgvl: fzf_git_vim_to_line命令的别名,Git版本中全部文件内容展示,并利用fzf选择后由vim打开并定位到行
