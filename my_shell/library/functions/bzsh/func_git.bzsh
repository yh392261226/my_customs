### Package Desc: Git版本控制工具相关


function check_is_git() {                                                               # Desc: function: check_is_git:验证是否是git版本库
    git rev-parse HEAD > /dev/null 2>&1
}
alias isgit="check_is_git"                                                              # Desc: alias: isgit: check_is_git命令的别名,验证是否是git版本库

function auto_create_git_respository() {                                                # Desc: function: auto_create_git_respository: 自动创建版本库
	local ACTIONPATH="${1:-$PWD}"
    mkdir $ACTIONPATH
	cd $ACTIONPATH
	git init
	touch README.md
	git add README.md
	git commit -m '自动创建版本库'
    local GITPATHNAME=$(echo $ACTIONPATH | sed 's,/,_,g')
	git remote add origin git@github.com:yh392261226/$GITPATHNAME.git
	git push origin master
}
alias acgr="auto_create_git_respository"                                                # Desc: alias: acgr: auto_create_git_respository命令的别名,自动创建版本库

function fzf_git_checkout_branch() {                                                    # Desc: function: fzf_git_checkout_branch:checkout git branch
    local branches branch
    branches=$(git branch --all | grep -v HEAD) &&
        branch=$(echo "$branches" |
    fzf $FZF_CUSTOM_PARAMS --preview='$MYRUNTIME/customs/bin/_previewer {}' --header="$(_buildFzfHeader '' 'fzf_git_checkout_branch')" -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
        git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
alias fcb="fzf_git_checkout_branch"                                                     # Desc: alias: fcb:fzf_git_checkout_branch命令的别名,checkout git branch

function fzf_git_checkout_commit() {                                                    # Desc: function: fzf_git_checkout_commit:checkout git commit
    local commits commit
    commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
    commit=$(echo "$commits" | fzf --tac +s +m -e $FZF_CUSTOM_PARAMS \
--preview " echo {2} " \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'f12:execute-silent(echo -n {1}| pbcopy)+abort' \
--header="$(_buildFzfHeader '' 'fzf_git_checkout_commit')" \
) &&
    git checkout $(echo "$commit" | sed "s/ .*//")
}
alias fgcc="fzf_git_checkout_commit"                                                    # Desc: alias: fgcc:fzf_git_checkout_commit命令的别名,checkout git commit

function fzf_git_checkout_preview() {                                                   # Desc: function: fzf_git_checkout_preview:checkout git branch/tag, with a preview showing the commits between the tag/branch and HEAD
    local tags branches target
    tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
    branches=$(
    git branch --all | grep -v HEAD |
    sed "s/.* //" | sed "s#remotes/[^/]*/##" |
    sort -u | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
    target=$(
    (echo "$tags"; echo "$branches") |
    fzf --no-hscroll --no-multi --delimiter="\t" -n 2 --ansi $FZF_CUSTOM_PARAMS \
--preview-window right:70%:rounded:hidden:wrap \
--preview="git log -200 --pretty=format:%s $(echo {+2..} |  sed 's/$/../' )" \
--bind 'focus:transform-preview-label:echo -n "[ {2} ]";' \
--bind 'f12:execute-silent(echo -n {2}| pbcopy)+abort' \
--header="$(_buildFzfHeader '' 'fzf_git_checkout_preview')" \
        ) || return
    git checkout $(echo "$target" | awk '{print $2}')
}
alias fgcp="fzf_git_checkout_preview"                                                   # Desc: alias: fgcp:fzf_git_checkout_preview命令的别名,checkout git branch/tag, with a preview showing the commits between the tag/branch and HEAD

function fzf_git_commit_sha() {                                                         # Desc: function: fzf_git_commit_sha:get git commit sha. example usage: git rebase -i `fcs`
    local commits commit
    commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
    commit=$(echo "$commits" | fzf --tac +s +m -e --ansi $FZF_CUSTOM_PARAMS --preview " echo {2} " --bind 'focus:transform-preview-label:echo -n "[ {1} ]";' --bind 'f12:execute-silent(echo -n {1}| pbcopy)+abort' --header="$(_buildFzfHeader '' 'fzf_git_commit_sha')") &&
    echo -n $(echo "$commit" | sed "s/ .*//")
}
alias fgcs="fzf_git_commit_sha"                                                         # Desc: alias: fgcs:fzf_git_commit_sha命令的别名,get git commit sha. example usage: git rebase -i `fcs`

function fzf_git_checkout() {                                                           # Desc: function: fzf_git_checkout:checkout git branch/tag
    local tags branches target
    tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
    branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
    target=$(
    (echo "$tags"; echo "$branches") |
    fzf $FZF_CUSTOM_PARAMS --preview='$MYRUNTIME/customs/bin/_previewer {}' --header="$(_buildFzfHeader '' 'fzf_git_checkout')" -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
    git checkout $(echo "$target" | awk '{print $2}')
}
alias fgc="fzf_git_checkout"                                                            # Desc: alias: fgc:fzf_git_checkout命令的别名,checkout git branch/tag

function fzf_git_checkout2() {                                                          # Desc: function: fzf_git_checkout2:checkout git branch
    if git rev-parse --git-dir > /dev/null 2>&1; then
        if [[ "$#" -eq 0 ]]; then
            local branches branch
            branches=$(git branch -a) &&
            branch=$(echo "$branches" |
            fzf $FZF_CUSTOM_PARAMS --preview='$MYRUNTIME/customs/bin/_previewer {}' --header="$(_buildFzfHeader '' 'fzf_git_checkout2')" -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
            git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
        elif [ `git rev-parse --verify --quiet $*` ] || \
             [ `git branch --remotes | grep  --extended-regexp "^[[:space:]]+origin/${*}$"` ]; then
            echo "Checking out to existing branch"
            git checkout "$*"
        else
            echo "Creating new branch"
            git checkout -b "$*"
        fi
    else
        echo "Can't check out or create branch. Not in a git repo"
    fi
}
alias fgc2="fzf_git_checkout2"                                                          # Desc: alias: fgc2:fzf_git_checkout2命令的别名,checkout git branch

function fzf_git_branch_with_remote() {                                                 # Desc: function: fzf_git_branch_with_remote: checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
alias fbr="fzf_git_branch_with_remote"                                                  # Desc: alias: fbr:fzf_git_branch_with_remote命令的别名,checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches

function fzf_git_stash() {                                                              # Desc: function: fzf_git_stash:Easier way to deal with stashes. type fstash to get a list of your stashes. enter shows you the contents of the stash. ctrl-d shows a diff of the stash against your current HEAD. ctrl-b checks the stash out as a branch, for easier merging
    local out q k sha
    while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf $FZF_CUSTOM_PARAMS \
    --ansi \
    --no-sort \
    --query="$q" \
    --print-query \
    --expect=ctrl-d,ctrl-b \
    --header="$(_buildFzfHeader '' 'fzf_git_stash')" \
        );
    do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
        git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
        git stash branch "stash-$sha" $sha
        break;
    else
        git stash show -p $sha
    fi
    done
}
alias fgsh="fzf_git_stash"                                                              # Desc: alias: fgsh:fzf_git_stash命令的别名,Easier way to deal with stashes. type fgsh to get a list of your stashes. enter shows you the contents of the stash. ctrl-d shows a diff of the stash against your current HEAD. ctrl-b checks the stash out as a branch, for easier merging

function fzf_git_status() {                                                             # Desc: function: fzf_git_status: 显示当前git的状态,并用编辑打开选择的文件
  git rev-parse --git-dir > /dev/null 2>&1 || {
    echo "You are not in a git repository" && return
  }
  local selected
  selected=$(git -c color.status=always status --short |
      fzf "$@" --border -m --ansi --nth 2..,.. $FZF_CUSTOM_PARAMS \
--preview-window right:70%:rounded:hidden:wrap \
--preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'f12:execute-silent(echo -n {-1}| pbcopy)+abort' \
--header="$(_buildFzfHeader '' 'fzf_git_status')" \
      | cut -c4- | sed 's/.* -> //')
    if [[ $selected ]]; then
        for prog in $(echo $selected); do
		$EDITOR $prog; 
	done;
    fi
}
alias fgs="fzf_git_status"                                                              # Desc: alias: fgs:fzf_git_status的别名,显示当前git的状态,并用编辑打开选择的文件

function fzf_git_untracked() {                                                          # Desc: function: fzf_git_untracked:显示当前git版本库中未添加进版本的修改或新增文件列表
    check_is_git || return

    local cmd="${FZF_CTRL_T_COMMAND:-"command git status -s"}"

    eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-60%} \
    --reverse $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" \
    fzf -m "$@" $FZF_CUSTOM_PARAMS \
--preview " echo {2} " \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'f12:execute-silent(echo -n {2}| pbcopy)+abort' \
--header="$(_buildFzfHeader '' 'fzf_git_untracked')" \
    | while read -r item; do
    echo "$item" | awk '{print $2}'
    done
    echo
}
alias fgu="fzf_git_untracked"                                                           # Desc: alias: fgu:fzf_git_untracked命令的别名,显示当前git版本库中未添加进版本的修改或新增文件列表

function fzf_git_commit_browser() {                                                     # Desc: function: fzf_git_commit_browser:git commit browser
git log --graph --color=always \
    --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" | fzf --ansi \
--no-sort $FZF_CUSTOM_PARAMS \
--tiebreak=index \
--bind 'focus:transform-preview-label:echo -n "[ {2} ]";' \
--bind 'f12:execute-silent(echo -n {2}| pbcopy)+abort' \
--bind "ctrl-m:execute:(grep -o '[a-f0-9]\{7\}' | head -1 | xargs -I % sh -c 'git show --color=always % | delta') << 'FZF-EOF'
{}" \
--header="$(_buildFzfHeader '' 'fzf_git_commit_browser')"
}
alias fgcb="fzf_git_commit_browser"                                                     # Desc: alias: fgcb: fzf_git_commit_browser命令的别名,git commit browser

function fzf_gitlog_multi() {                                                           # Desc: function: fzf_gitlog_multi: 利用fzf列出git log,选中后直接显示
  local git_cmd
  local fzf_cmd

  git_cmd='git log \
    --all \
    --graph \
    --date-order \
    --format=format:"%C(auto)%s %d %h %C(cyan)%cd %C(bold black)%an %C(auto)" \
    --date=short \
    --color=always'

  fzf_cmd='fzf $FZF_CUSTOM_PARAMS \
    --height 100% \
    --multi \
    --ansi \
    --reverse \
    --no-sort \
    --tiebreak=index \
    --header="$(_buildFzfHeader \"\" \"fzf_gitlog_multi\")" \
    --preview="echo {} | grep -o \"[a-f0-9]\{7\}\" | xargs -I % sh -c \"git show % --color\"" \
    --bind=ctrl-x:toggle-sort'

  eval "$git_cmd | $fzf_cmd" \
    | grep -o '[a-f0-9]\{7\}' \
    | xargs -I % sh -c 'git show % --color' \
    | delta
}
alias fgm='fzf_gitlog_multi'                                                            # Desc: alias: fgm: fzf_gitlog_multi命令的别名,利用fzf列出git log,选中后直接显示

function git_diff_branches() {                                                          # Desc: function: git_diff_branches:Git比对两个分支
    if [ $# -ne 2 ]; then
        echo two branch names required
        return
    fi
    git log --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' \
        --abbrev-commit --date=relative $1..$2
}
alias gd2b="git_diff_branches"                                                          # Desc: alias: gd2b:git_diff_branches命令的别名,Git比对两个分支

function update_git_files_and_modules() {                                               # Desc: function: update_git_files_and_modules:更新git的目录及git module的目录
    local filepath="${1:-$MYRUNTIME}"

    for f in $(/bin/ls $filepath/); do
        if [ -d $filepath/$f/.git ] || [ -f $filepath/$f/.git ]; then
            echo $filepath/$f
            customcd $filepath/$f/ && /usr/bin/git pull
        fi
        if [ -f $filepath/$f/.gitmodules ]; then
            echo $filepath/$f
            customcd $filepath/$f/ && /usr/bin/git submodule update --init --recursive && git submodule update --recursive --remote
            if [ "$(git status --porcelain)" != "" ]; then
                git add .
                git commit -m "Update submodules"
                git push
            fi
        fi
    done
    customcd ~
}
alias upgitfiles="update_git_files_and_modules"                                         # Desc: alias: upgitfiles:update_git_files_and_modules命令的别名,更新git的目录及git module的目录

function fzf_git_vim_to_line() {                                                        # Desc: function:fzf_git_vim_to_line: Git版本中全部文件内容展示,并利用fzf选择后由vim打开并定位到行
    git grep --line-number . | fzf --delimiter ':' --nth 3.. $FZF_CUSTOM_PARAMS \
--preview 'bat --color=always {1} --highlight-line {2}' \
--bind 'focus:transform-preview-label:echo -n "[ {1} ]";' \
--bind 'enter:become(vim {1} +{2})' \
--bind 'ctrl-r:execute(vim +{2} {1} < /dev/tty)' \
--bind 'f12:execute-silent(echo -n {1}| pbcopy)+abort' \
--preview-window 'right,70%,rounded,+{2}+3/3,~3' \
--header="$(_buildFzfHeader '' 'fzf_git_vim_to_line')"
}
alias fgitv2l="fzf_git_vim_to_line"                                                     # Desc: alias: fgitv2l: fzf_git_vim_to_line命令的别名,Git版本中全部文件内容展示,并利用fzf选择后由vim打开并定位到行

function fzf_git_modified_diff() {                                                      # Desc: function:fzf_git_modified_diff: 利用fzf列出当前Git版本文件中修改的文件并diff
    git status -s | fzf $FZF_CUSTOM_PARAMS \
    --no-sort \
    --preview 'git diff --color=always {+2} | diff-so-fancy' \
    --bind=ctrl-j:preview-down \
    --bind=ctrl-k:preview-up \
    --preview-window 'right,70%,rounded,+{2}+3/3,~3' \
    --header="$(_buildFzfHeader '' 'fzf_git_modified_diff')"
}
alias fgd='fzf_git_modified_diff'                                                       # Desc: alias: fgd: fzf_git_modified_diff命令的别名,利用fzf列出当前Git版本文件中修改的文件并diff

function git_submodule_add() {                                                          # Desc: function:git_submodule_add: Git版本文件中增加子模块
    check_is_git || return
    if [ $# -ne 2 ]; then
        echo "Usage: git_submodule_add <submodule_name> <git_url>"
        return
    fi
    git submodule add $2 $1
    git commit -m "Add $1 submodule"
    git push
}
alias gsa="git_submodule_add"                                                           # Desc: alias: gsa: git_submodule_add命令的别名,添加git子模块

function git_submodule_remove() {                                                       # Desc: function:git_submodule_remove: Git版本文件中删除子模块
    check_is_git || return
    if [ $# -ne 1 ]; then
        echo "Usage: git_submodule_remove <submodule_name>"
        return
    fi
    git submodule deinit $1
    git rm $1
    git commit -m "Remove $1 submodule"
    git push
}
alias gsr="git_submodule_remove"                                                        # Desc: alias: gsr: git_submodule_remove命令的别名,删除git子模块

function git_submodule_remove2() {                                                      # Desc: function:git_submodule_remove2: Git版本文件中删除子模块,同时删除本地文件
    check_is_git || return
    if [ $# -ne 1 ]; then
        echo "Usage: git_submodule_remove2 <submodule_name>"
        return
    fi
    git rm --cached -f $1
    rm -rf .git/modules/$1
    git commit -m "Remove $1 submodule"
    rm -rf $1
}
alias gsr2="git_submodule_remove2"                                                      # Desc: alias: gsr2: git_submodule_remove2命令的别名,删除git子模块,同时删除本地文件

function fzf_hyper_git() {                                                              # Desc: function:fzf-hyper-git:超维 Git 操作（集成 GitHub CLI 和语义分析）
    local action=$(echo "commit-fixup\nbranch-fusion\npr-orbit\nconflict-solver\nblame-explorer" | \
        fzf --reverse --header "超维 Git 控制台")

    case $action in
        commit-fixup)
            git log --oneline | fzf --multi --preview 'git show {1}' \
                --bind 'enter:execute(git commit --fixup={1})+abort'
            ;;
        branch-fusion)
            git branch --all | fzf --multi --preview 'git log --graph --oneline {1}' \
                --bind 'enter:execute(git merge {1} --no-ff)+abort'
            ;;
        pr-orbit)
            gh pr list | fzf --preview 'gh pr view {1}' \
                --bind 'enter:execute(gh pr checkout {1})'
            ;;
        conflict-solver)
            git diff --name-only --diff-filter=U | \
                fzf --preview 'git diff --color=always {} | delta' \
                --bind 'enter:execute(code --wait {})'
            ;;
        blame-explorer)
            local file=$(fzf)
            git blame "$file" | fzf --preview "echo {} | cut -d' ' -f1 | xargs git show | delta"
            ;;
    esac
}
alias fhg="fzf_hyper_git"                                                               # Desc: alias: fhg:fzf-hyper-git命令的别名,超维 Git 操作（集成 GitHub CLI 和语义分析）

function fzf_fuzzy_git_tools() {                                                        # Desc: function:fzf_fuzzy_git_tools:Git 超级工具集
    local choices=(
        "branch: 切换分支"
        "log: 查看提交历史"
        "reflog: 查看操作历史"
        "status: 查看状态"
        "stash: 储藏管理"
        "reset: 重置提交"
    )

    local cmd=$(printf "%s\n" "${choices[@]}" | fzf --height 40% --reverse --header="Git 操作面板" | cut -d: -f1)

    case $cmd in
        branch)
            git checkout $(git branch -a | fzf --height 40% --reverse --preview 'git log --oneline --graph -n 10 $(sed "s/.* //" <<< {})' | sed 's#^remotes/##' | awk '{print $1}')
            ;;
        log)
            git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" | fzf --ansi --reverse --preview 'grep -o "[a-f0-9]\{7\}" <<< {} | xargs git show --color=always' --bind "enter:execute:grep -o '[a-f0-9]\{7\}' <<< {} | xargs -I % sh -c 'git show % | delta'"
            ;;
        reflog)
            git reflog --color=always | fzf --ansi --reverse --preview 'echo {} | cut -d" " -f1 | xargs git show --color=always' --bind "enter:execute:echo {} | cut -d' ' -f1 | xargs -I % sh -c 'git show % | delta'"
            ;;
        status)
            git -c color.status=always status -s | fzf --ansi --reverse --preview 'git diff --color=always -- {-1}' --bind "enter:execute:git diff -- {-1} | delta"
            ;;
        stash)
            git stash list | fzf --ansi --reverse --preview 'git stash show -p $(echo {} | cut -d: -f1)' --bind "enter:execute:git stash show -p $(echo {} | cut -d: -f1) | delta"
            ;;
        reset)
            git log --oneline --graph | fzf --ansi --reverse --multi --preview 'git show --color=always {1}' | awk '{print $1}' | xargs -I % git reset %~1
            ;;
    esac
}
alias ffgt="fzf_fuzzy_git_tools"                                                        # Desc: alias: ffgt: fzf_fuzzy_git_tools命令的别名,Git 超级工具集