### Package Desc: 文件相关命令


function cat_whereis_file() {                                                          # Desc: function: cat_whereis_file:cat打印which命令找到的文件地址
    hascommand=$(ifHasCommand $@)
    [[ $hascommand != 1 ]] && echo "Command $@ does not exists !" && return 1
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        cat `which "$1"`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ]; then
            cat $endfile
        else
            cat_whereis_file $endfile
        fi
    fi
}
alias catw="cat_whereis_file"                                                          # Desc: alias: catw:cat_whereis_file命令的别名,cat打印which命令找到的文件地址

function bat_whereis_file() {                                                          # Desc: function: bat_whereis_file:bat命令打印which命令找到的文件地址
    hascommand=$(ifHasCommand $@)
    [[ $hascommand != 1 ]] && echo "Command $@ does not exists !" && return 1
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        bat `which "$1"`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ]; then
            bat $endfile
        else
            bat_whereis_file $endfile
        fi
    fi
}
alias batw="bat_whereis_file"                                                          # Desc: alias: batw:bat_whereis_file命令的别名,bat命令打印which命令找到的文件地址

function quick_preview () {                                                            # Desc: function: quick_preview:Opens any file in MacOS Quicklook Preview
    qlmanage -p "$*" >& /dev/null;
}
alias ql="quick_preview"                                                               # Desc: alias: ql:quick_preview命令的别名,Opens any file in MacOS Quicklook Preview

function get_hash_file() {                                                             # Desc: function: get_hash_file:get md5 or sha1 value of the file
    local MD5COMMAND=/sbin/md5
    local SHASUMCOMMAND=/usr/local/bin/shasum

    local paras=$?        #参数个数
    local filename=$1     #文件名
    local action=$2       #验证方法

    if [ "" = "$filename" ]; then
        echo "Please type the file name!";
        echo "Example: $0 abc.log ";
        return 1;
    fi

    if [ "$action" = "sha1" ] || [ "$action" = "shasum" ]; then
        $SHASUMCOMMAND $filename | awk '{print $1}' #sha1 file
    else
        $MD5COMMAND $filename | awk -F'=' '{print $2}' #default is md5 file
    fi
}
alias hashf="get_hash_file"                                                            # Desc: alias: hashf:get_hash_file命令的别名,get md5 or sha1 value of the file

function check_2files_by_md5() {                                                       # Desc: function: check_2files_by_md5:diff the two files md5 value
    local MD5COMMAND=/sbin/md5 #md5 command
    local LOCALPATH=$1 #args[0]
    local TARGETPATH=$2 #args[1]

    if [ ! -f $LOCALPATH ] || [ ! -f $TARGETPATH ]; then # one of the files is not exists
        echo "Please check the args, File or Path is not exists!"; return 1
    fi
    ## Both of the two files are exists, diff them
    if [ "$($MD5COMMAND $LOCALPATH)" = "$($MD5COMMAND $TARGETPATH)" ]; then
        #echo "The same file !";
        RESULT="The same file !";
    else
        #echo $LOCALPATH "and" $TARGETPATH ", are the diffrent files !";
        RESULT=$LOCALPATH "and" $TARGETPATH ", are the diffrent files !";
    fi
    echo $RESULT
    return 0
}
alias c2fmd5="check_2files_by_md5"                                                     # Desc: alias: c2fmd5:check_2files_by_md5命令的别名,diff the two files md5 value

function get_file_private_value() {                                                    # Desc: function: get_file_private_value:变更权限rwx为权限值【777】
    ls -l  "$@" | awk '
        {
        k=0;
        for (i=0;i<=8;i++)
            k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
        if (k)
            printf("%0o ",k);
        printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
        }'
}
alias gfpv="get_file_private_value"                                                    # Desc: alias: gfpv:get_file_private_value命令的别名,变更权限rwx为权限值【777】

function head_whereis_file() {                                                         # Desc: function: headw:head命令打印which命令找到的文件地址
    hascommand=$(ifHasCommand $@)
    [[ $hascommand != 1 ]] && echo "Command $@ does not exists !" && return 1
    lines=50
    if [ "" != "$2" ]; then
        lines=$2
    fi
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        head -n $lines `which "$1"`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ]; then
            head -n $lines $endfile
        else
            head_whereis_file $endfile $lines
        fi
    fi
}
alias headw="head_whereis_file"                                                        # Desc: alias: headw:head_whereis_file命令的别名,head命令打印which命令找到的文件地址

function tail_whereis_file() {                                                         # Desc: function: tail_whereis_file:tail命令打印which命令找到的文件地址
    hascommand=$(ifHasCommand $@)
    [[ $hascommand != 1 ]] && echo "Command $@ does not exists !" && return 1
    lines=50
    if [ "" != "$2" ]; then
        lines=$2
    fi
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        tail -n $lines `which "$1"`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ]; then
            tail -n $lines $endfile
        else
            tail_whereis_file $endfile $lines
        fi
    fi
}
alias tailw="tail_whereis_file"                                                        # Desc: alias: tailw:tail_whereis_file命令的别名,tail命令打印which命令找到的文件地址

function set_setting_links() {                                                         # Desc: function: set_setting_links:配置文件链接
    if [ "" != "$CPUCORE" ]; then
        if [ "$CPUCORE" = "arm64" ]; then
            #redis
            rm -f /opt/homebrew/etc/redis-sentinel.conf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/redis_arm64/redis-sentinel.conf /opt/homebrew/etc/redis-sentinel.conf
            rm -f /opt/homebrew/etc/redis.conf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/redis_arm64/redis.conf /opt/homebrew/etc/redis.conf
            #php
            rm -rf /opt/homebrew/etc/php && ln -sf $HOME/data/data/Dropbox/working/coding/conf/php_arm64/ /opt/homebrew/etc/php
            #mysql
            rm -f /opt/homebrew/etc/my.cnf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/mysql_arm64/8.0/my.cnf /opt/homebrew/etc/my.cnf
            #nginx
            rm -rf /opt/homebrew/etc/nginx && ln -sf $HOME/data/data/Dropbox/working/coding/conf/nginx_arm64/ /opt/homebrew/etc/nginx
        fi

        if [ "$CPUCORE" = "intel64" ]; then
            #redis
            rm -f /opt/homebrew/etc/redis-sentinel.conf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/redis/redis-sentinel.conf /opt/homebrew/etc/redis-sentinel.conf
            rm -f /opt/homebrew/etc/redis.conf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/redis/redis.conf /opt/homebrew/etc/redis.conf
            #php
            rm -rf /opt/homebrew/etc/php && ln -sf $HOME/data/data/Dropbox/working/coding/conf/php/ /opt/homebrew/etc/php
            #mysql
            rm -f /opt/homebrew/etc/my.cnf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/mysql/8.0/my.cnf /opt/homebrew/etc/my.cnf
            #nginx
            rm -rf /opt/homebrew/etc/nginx && ln -sf $HOME/data/data/Dropbox/working/coding/conf/nginx/ /opt/homebrew/etc/nginx
        fi
    fi
}
alias setl="set_setting_links"                                                         # Desc: alias: setl:set_setting_links命令的别名,配置文件链接

function fzf_list_hiddens() {                                                          # Desc: function: fzf_list_hiddens:列出隐藏文件
    local mpath
	[[ "" != "$1" ]] && mpath=$1 || mpath='./'
    /bin/ls -A $mpath | grep '^\.' | fzf $FZF_CUSTOM_PARAMS \
--preview ' [[ -d {} ]] && tree {} || bat {} ' \
--preview-window right:70%:border-rounded:hidden:wrap \
--bind 'ctrl-r:execute(rm -rf {})+reload((/bin/ls -A $mpath | grep "^\.") || true)' \
--header="$(_buildFzfHeader '' 'fzf_list_hiddens')"
}
alias flh="fzf_list_hiddens"                                                           # Desc: alias: flh:fzf_list_hiddens命令的别名,列出隐藏文件

function fzf_file_to_preview() {                                                       # Desc: function: fzf_file_to_preview:fzf列出文件夹及选中文件的内容
    [[ 1 -gt $nums ]] && nums=500
    fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--header="$(_buildFzfHeader '' 'fzf_file_to_preview')" \
--preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always{} || rougify {}  || highlight -O ansi -l {} || coderay {} || cat {}) 2> /dev/null | head -500'
}
alias fttp='fzf_file_to_preview'                                                       # Desc: alias: fttp:fzf_file_to_preview命令的别名,fzf列出文件夹及选中文件的内容

function fzf_open_or_edit() {                                                          # Desc: function: fzf_open_or_edit:fzf利用open命令打开文件或vim编辑文件 - CTRL-O to open with `open` command, CTRL-E or Enter key to open with the nvim
    IFS=$'\n' out=$(fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview 'bat {}' \
--query="$1" \
--exit-0 \
--expect=ctrl-o,ctrl-e \
--header="$(_buildFzfHeader '' 'fzf_open_or_edit')" \
)
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-nvim} "$file"
    fi
}
alias foe='fzf_open_or_edit'                                                           # Desc: alias: foe:fzf_open_or_edit命令的别名,fzf利用open命令打开文件或vim编辑文件 - CTRL-O to open with `open` command, CTRL-E or Enter key to open with the nvim

function fzf_search_term() {                                                           # Desc: function: fzf_search_term:find-in-file - usage: fif <searchTerm>
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    rg --files-with-matches \
       --no-messages "$1" | \
       fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--header="$(_buildFzfHeader '' 'fzf_search_term')" \
--preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}
alias fst='fzf_search_term'                                                            # Desc: alias: fst:fzf_search_term命令的别名,find-in-file - usage: fif <searchTerm>

function list_link_files() {                                                           # Desc: function: list_link_files:列出所有软连接文件
    local mpath='./'
    [[ "" != "$1" ]] && mpath="$1"
    /bin/ls -al ${mpath} | grep ^l
}
alias llf="list_link_files"                                                            # Desc: alias: llf:list_link_files命令的别名,列出所有软连接文件

function fzf_find_link_files() {                                                       # Desc: function: fzf_find_link_files:find找出所有软连接文件
    local mpath='./'
    [[ "" != "$1" ]] && mpath="$1"
    /usr/bin/find ${mpath} -type l -ls | fzf $FZF_CUSTOM_PARAMS --header="$(_buildFzfHeader '' 'fzf_aliases')"
}
alias fflf="fzf_find_link_files"                                                       # Desc: alias: fflf:fzf_find_link_files命令的别名,find找出所有软连接文件

function file_category() {                                                             # Desc: function: file_category: 获取文件类型的前一段,如application/image中的application
    [[ "" = "$1" ]] && return 1
    mime=$(file -bL --mime-type "$1")
    echo ${mime%%/*}
    return 0
}
alias fcate="file_category"                                                            # Desc: alias: fcate: file_category命令的别名,获取文件类型的前一段,如application/image中的application

function file_kind() {                                                                 # Desc: function: file_kind: 获取文件类型的后一段,如application/image中的image
    [[ "" = "$1" ]] && return 1
    mime=$(file -bL --mime-type "$1")
    echo ${mime##*/}
    return 0
}
alias fkind="file_kind"                                                                # Desc: alias: fkind: file_kind命令的别名,获取文件类型的后一段,如application/image中的image