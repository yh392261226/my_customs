function cat_whereis_file() { # Desc: cat_whereis_file:cat 打印which命令找到的文件地址
    command -v "$@" > /dev/null 2>&1
    [[ "$?" = "1" ]] && echo "Command $@ does not exists !" && return 1
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        cat `which "$1"`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ]; then
            cat $endfile
        else
            cat_whereis_file $endfile
        fi
    fi
}
alias catw="cat_whereis_file"

function bat_whereis_file() { # Desc: bat_whereis_file:bat命令打印which命令找到的文件地址
    command -v "$@" > /dev/null 2>&1
    [[ "$?" = "1" ]] && echo "Command $@ does not exists !" && return 1
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        bat `which "$1"`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ]; then
            bat $endfile
        else
            bat_whereis_file $endfile
        fi
    fi
}
alias batw="bat_whereis_file"

function quick_preview () { # Desc: quick_preview:Opens any file in MacOS Quicklook Preview
    qlmanage -p "$*" >& /dev/null;
}
alias ql="quick_preview"

function get_hash_file() { # Desc: get_hash_file:get md5 or sha1 value of the file
    local MD5COMMAND=/sbin/md5
    local SHASUMCOMMAND=/usr/local/bin/shasum

    local paras=$?        #参数个数
    local filename=$1     #文件名
    local action=$2       #验证方法

    if [ "" = "$filename" ]; then
        echo "Please type the file name!";
        echo "Example: $0 abc.log ";
        return 1;
    fi

    if [ "$action" = "sha1" ] || [ "$action" = "shasum" ]; then
        $SHASUMCOMMAND $filename | awk '{print $1}' #sha1 file
    else
        $MD5COMMAND $filename | awk -F'=' '{print $2}' #default is md5 file
    fi
}
alias hfile="get_hash_file"

function check_2files_by_md5() { # Desc: check_2files_by_md5:diff the two files md5 value
    local MD5COMMAND=/sbin/md5 #md5 command
    local LOCALPATH=$1 #args[0]
    local TARGETPATH=$2 #args[1]

    if [ ! -f $LOCALPATH ] || [ ! -f $TARGETPATH ]; then # one of the files is not exists
        echo "Please check the args, File or Path is not exists!"; return 1
    fi
    ## Both of the two files are exists, diff them
    if [ "$($MD5COMMAND $LOCALPATH)" = "$($MD5COMMAND $TARGETPATH)" ]; then
        #echo "The same file !";
        RESULT="The same file !";
    else
        #echo $LOCALPATH "and" $TARGETPATH ", are the diffrent files !";
        RESULT=$LOCALPATH "and" $TARGETPATH ", are the diffrent files !";
    fi
    echo $RESULT
    return 0
}
alias c2fmd5="check_2files_by_md5"

function get_file_private_value() { # Desc: get_file_private_value:变更权限rwx为权限值【777】
    ls -l  "$@" | awk '
        {
        k=0;
        for (i=0;i<=8;i++)
            k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
        if (k)
            printf("%0o ",k);
        printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
        }'
}
alias mla="get_file_private_value"

function head_whereis_file() { # Desc: headw:head命令打印which命令找到的文件地址
    command -v "$1" > /dev/null 2>&1
    [[ "$?" = "1" ]] && echo "Command $@ does not exists !" && return 1
    lines=50
    if [ "" != "$2" ]; then
        lines=$2
    fi
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        head -n $lines `which "$1"`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ]; then
            head -n $lines $endfile
        else
            head_whereis_file $endfile $lines
        fi
    fi
}
alias headw="head_whereis_file"

function tail_whereis_file() { # Desc: tail_whereis_file:tail命令打印which命令找到的文件地址
    command -v "$1" > /dev/null 2>&1
    [[ "$?" = "1" ]] && echo "Command $@ does not exists !" && return 1
    lines=50
    if [ "" != "$2" ]; then
        lines=$2
    fi
    if [ "$(type $1 | grep 'a shell function from')" = "" ] && [ "$(type $1 | grep 'is an alias for')" = "" ]; then
        tail -n $lines `which "$1"`
    else
        endfile=$(type "$1" | awk '{print $NF}')
        if [ -f $endfile ]; then
            tail -n $lines $endfile
        else
            tail_whereis_file $endfile $lines
        fi
    fi
}
alias tailw="tail_whereis_file"

function set_setting_links() { # Desc: set_setting_links:配置文件链接
    if [ "" != "$CPUCORE" ]; then
        if [ "$CPUCORE" = "arm64" ]; then
            #redis
            rm -f /opt/homebrew/etc/redis-sentinel.conf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/redis_arm64/redis-sentinel.conf /opt/homebrew/etc/redis-sentinel.conf
            rm -f /opt/homebrew/etc/redis.conf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/redis_arm64/redis.conf /opt/homebrew/etc/redis.conf
            #php
            rm -rf /opt/homebrew/etc/php && ln -sf $HOME/data/data/Dropbox/working/coding/conf/php_arm64/ /opt/homebrew/etc/php
            #mysql
            rm -f /opt/homebrew/etc/my.cnf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/mysql_arm64/8.0/my.cnf /opt/homebrew/etc/my.cnf
            #nginx
            rm -rf /opt/homebrew/etc/nginx && ln -sf $HOME/data/data/Dropbox/working/coding/conf/nginx_arm64/ /opt/homebrew/etc/nginx
        fi

        if [ "$CPUCORE" = "intel64" ]; then
            #redis
            rm -f /opt/homebrew/etc/redis-sentinel.conf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/redis/redis-sentinel.conf /opt/homebrew/etc/redis-sentinel.conf
            rm -f /opt/homebrew/etc/redis.conf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/redis/redis.conf /opt/homebrew/etc/redis.conf
            #php
            rm -rf /opt/homebrew/etc/php && ln -sf $HOME/data/data/Dropbox/working/coding/conf/php/ /opt/homebrew/etc/php
            #mysql
            rm -f /opt/homebrew/etc/my.cnf && ln -sf $HOME/data/data/Dropbox/working/coding/conf/mysql/8.0/my.cnf /opt/homebrew/etc/my.cnf
            #nginx
            rm -rf /opt/homebrew/etc/nginx && ln -sf $HOME/data/data/Dropbox/working/coding/conf/nginx/ /opt/homebrew/etc/nginx
        fi
    fi
}
alias slink="set_setting_links"

function hidden_files() { # Desc: hidden_files:显示隐藏文件
    local path='./'
	[[ "" != "$1" ]] && path=$1
    for f in $(/bin/ls -a $path); do
        local tmpfilename=$(/usr/bin/basename $f)
        if [ "." = "${tmpfilename:0:1}" ] && [ "$tmpfilename" != "." ] && [ "$tmpfilename" != ".." ]; then
            echo $tmpfilename
        fi
    done
}
alias hf="hidden_files"

function fzf_file_preview() { # Desc: preview file content
    [[ 1 -gt $nums ]] && nums=500
    fzf --preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always{} || rougify {}  || highlight -O ansi -l {} || coderay {} || cat {}) 2> /dev/null | head -500'
}
alias ftt='fzf_file_preview'

function fzf_open_or_edit(){ # Desc: fzf利用open命令打开文件或vim编辑文件 - CTRL-O to open with `open` command, CTRL-E or Enter key to open with the nvim
    IFS=$'\n' out=("$(fzf --preview 'cat {}' --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)")
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        # [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
        [ "$key" = ctrl-o ] && open "$file" || nvim "$file"
    fi
}
alias foe='fzf_open_or_edit'

function fzf_search_term(){ #Desc: find-in-file - usage: fif <searchTerm>
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}
alias fif='fzf_search_term'

function fzf_open_with_editor() { # Desc: This finds files with fd, pipes the list into fzf and the fuzzy matched results get opened with Vim. It also uses bat for file previews.
    export FZF_DEFAULT_COMMAND="fd -p -i -H -L -t f -t l -t x \
-E 'icloud/*' \
-E 'Library/*' \
-E 'Pictures/Photos Library.photoslibrary/*' \
-E '.git'"
    IFS=$'\n' \
       files=($(fzf --reverse \
                    --preview "bat --theme=timu-spacegrey --color=always {}" \
                    --query="$1" --multi --select-1 --exit-0))
    [[ -n "$files" ]] && vim "${files[@]}"
}
alias fv='fzf_open_with_editor'

function list_link_files() { # Desc: list_link_files 列出所有软连接文件
    local path='./'
    [[ "" != "$1" ]] && path="$1"
    /bin/ls -al ${path} | /usr/bin/grep ^l
}
alias llf="list_link_files"
