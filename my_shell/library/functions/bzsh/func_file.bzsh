### Package Desc: 文件相关命令

function quick_preview () {                                                            # Desc: function: quick_preview:Opens any file in MacOS Quicklook Preview
    qlmanage -p "$*" >& /dev/null;
}
alias ql="quick_preview"                                                               # Desc: alias: ql:quick_preview命令的别名,Opens any file in MacOS Quicklook Preview

function get_hash_file() {                                                             # Desc: function: get_hash_file:get md5 or sha1 value of the file
    local MD5COMMAND=/sbin/md5
    local SHASUMCOMMAND=/usr/local/bin/shasum

    local paras=$?        #参数个数
    local filename=$1     #文件名
    local action=$2       #验证方法

    if [ "" = "$filename" ]; then
        echo "Please type the file name!";
        echo "Example: $0 abc.log ";
        return 1;
    fi

    if [ "$action" = "sha1" ] || [ "$action" = "shasum" ]; then
        $SHASUMCOMMAND $filename | awk '{print $1}' #sha1 file
    else
        $MD5COMMAND $filename | awk -F'=' '{print $2}' #default is md5 file
    fi
}
alias hashf="get_hash_file"                                                            # Desc: alias: hashf:get_hash_file命令的别名,get md5 or sha1 value of the file

function check_2files_by_md5() {                                                       # Desc: function: check_2files_by_md5:diff the two files md5 value
    local MD5COMMAND=/sbin/md5 #md5 command
    local LOCALPATH="${1:-$PWD}"
    local TARGETPATH=$2 #args[1]

    if [ ! -f $LOCALPATH ] || [ ! -f $TARGETPATH ]; then # one of the files is not exists
        echo "Please check the args, File or Path is not exists!"; return 1
    fi
    ## Both of the two files are exists, diff them
    if [ "$($MD5COMMAND $LOCALPATH)" = "$($MD5COMMAND $TARGETPATH)" ]; then
        #echo "The same file !";
        RESULT="The same file !";
    else
        #echo $LOCALPATH "and" $TARGETPATH ", are the diffrent files !";
        RESULT=$LOCALPATH "and" $TARGETPATH ", are the diffrent files !";
    fi
    echo $RESULT
    return 0
}
alias c2fmd5="check_2files_by_md5"                                                     # Desc: alias: c2fmd5:check_2files_by_md5命令的别名,diff the two files md5 value

function get_file_private_value() {                                                    # Desc: function: get_file_private_value:变更权限rwx为权限值【777】
    ls -l  "$@" | awk '
        {
        k=0;
        for (i=0;i<=8;i++)
            k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
        if (k)
            printf("%0o ",k);
        printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
        }'
}
alias gfpv="get_file_private_value"                                                    # Desc: alias: gfpv:get_file_private_value命令的别名,变更权限rwx为权限值【777】

function fzf_list_hiddens() {                                                          # Desc: function: fzf_list_hiddens:列出隐藏文件
    local mpath="${1:-$PWD}"
    /bin/ls -A $mpath | grep '^\.' | fzf $FZF_CUSTOM_PARAMS \
--preview ' [[ -d {} ]] && tree {} || bat {} ' \
--preview-window right:70%:rounded:hidden:wrap \
--bind 'ctrl-r:execute(rm -rf {})+reload((/bin/ls -A $mpath | grep "^\.") || true)' \
--header="$(_buildFzfHeader '' 'fzf_list_hiddens')"
}
alias flh="fzf_list_hiddens"                                                           # Desc: alias: flh:fzf_list_hiddens命令的别名,列出隐藏文件

function change_files_hide() {                                                         # Desc: function: change_files_hide:文件夹不显示隐藏文件
    defaults write com.apple.Finder AppleShowAllFiles NO ; killall Finder /System/Library/CoreServices/Finder.app;
}
alias cfh="change_files_hide"                                                          # Desc: alias: cfh:change_files_hide命令的别名,文件夹不显示隐藏文件

function change_files_show() {                                                         # Desc: function: change_files_show:文件夹显示隐藏文件
    defaults write com.apple.Finder AppleShowAllFiles YES ; killall Finder /System/Library/CoreServices/Finder.app;
}
alias cfs="change_files_show"                                                          # Desc: alias: cfs:change_files_show命令的别名,文件夹显示隐藏文件

function fzf_open_or_edit() {                                                          # Desc: function: fzf_open_or_edit:fzf利用open命令打开文件或vim编辑文件 - CTRL-R to open with `open` command, CTRL-E or Enter key to open with the nvim
    IFS=$'\n' out=$(fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:rounded:hidden:wrap \
--preview 'bat {}' \
--query="$1" \
--exit-0 \
--expect=ctrl-r,ctrl-e \
--bind="ctrl-d:change-prompt(Directories> )+reload(fd --type d --exclude={.git,.idea,.vscode,.sass-cache,node_modules,build})" \
--bind="ctrl-f:change-prompt(Files> )+reload(fd --type f --exclude={.git,.idea,.vscode,.sass-cache,node_modules,build})" \
--header="$(_buildFzfHeader '' 'fzf_open_or_edit')" \
)
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        [ "$key" = ctrl-r ] && open "$file" || ${EDITOR:-nvim} "$file"
    fi
}
alias foe='fzf_open_or_edit'                                                           # Desc: alias: foe:fzf_open_or_edit命令的别名,fzf利用open命令打开文件或vim编辑文件 - CTRL-R to open with `open` command, CTRL-E or Enter key to open with the nvim

function fzf_search_term() {                                                           # Desc: function: fzf_search_term:find-in-file - usage: fif <searchTerm>
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    rg --files-with-matches \
       --no-messages "$1" | \
       fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:rounded:hidden:wrap \
--header="$(_buildFzfHeader '' 'fzf_search_term')" \
--preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}
alias fst='fzf_search_term'                                                            # Desc: alias: fst:fzf_search_term命令的别名,find-in-file - usage: fif <searchTerm>

function list_link_files() {                                                           # Desc: function: list_link_files:列出所有软连接文件
    local mpath="${1:-$PWD}"
    /bin/ls -al ${mpath} | grep ^l
}
alias llf="list_link_files"                                                            # Desc: alias: llf:list_link_files命令的别名,列出所有软连接文件

function fzf_find_link_files() {                                                       # Desc: function: fzf_find_link_files:find找出所有软连接文件
    local mpath="${1:-$PWD}"
    /usr/bin/find ${mpath} -type l -ls | fzf $FZF_CUSTOM_PARAMS --header="$(_buildFzfHeader '' 'fzf_aliases')"
}
alias fflf="fzf_find_link_files"                                                       # Desc: alias: fflf:fzf_find_link_files命令的别名,find找出所有软连接文件

function file_category() {                                                             # Desc: function: file_category: 获取文件类型的前一段,如application/image中的application
    [[ "" = "$1" ]] && return 1
    mime=$(file -bL --mime-type "$1")
    echo ${mime%%/*}
    return 0
}
alias fcate="file_category"                                                            # Desc: alias: fcate: file_category命令的别名,获取文件类型的前一段,如application/image中的application

function file_kind() {                                                                 # Desc: function: file_kind: 获取文件类型的后一段,如application/image中的image
    [[ "" = "$1" ]] && return 1
    mime=$(file -bL --mime-type "$1")
    echo ${mime##*/}
    return 0
}
alias fkind="file_kind"                                                                # Desc: alias: fkind: file_kind命令的别名,获取文件类型的后一段,如application/image中的image

function fzf_full_files_manager() {                                                    # Desc: function: fzf_full_files_manager:利用fzf管理文件夹、文件、图片、文本搜索、影音文件等
    custom_gum_show2hide_header "文件管理" || echo -e "文件管理"
    ___fzf_manage_all() {
        local Action="$1"
        local text
        [[ "$Action" = "files" ]] && text=文件
        [[ "$Action" = "all" ]] && text=所有文件
        [[ "$Action" = "directories" ]] && text=文件夹
        [[ "$Action" = "symbolic_link" ]] && text=软连接
        [[ "$Action" = "directories" ]] && text=文件夹
        [[ "$Action" = "hiddens" ]] && text=隐藏文件
        [[ "$Action" = "images" ]] && text=图片
        [[ "$Action" = "medias" ]] && text=媒体
        [[ "$Action" = "languages" ]] && text=开发
        [[ "$Action" = "documents" ]] && text=文本
        [[ "$Action" = "contents" ]] && text=全文搜索
        [[ "$Action" = "archives" ]] && text=压缩文件
        custom_gum_show2hide_header $text || echo -e $text

        local Varname="fzf_transformer_filter_$Action"
        local Cmd=$fzf_transformer_filter_all
        local Operate
        echo "$Action" > $TMP_FZF_SEARCH_SWAP_FILE
        [[ -n "$BASH_VERSION" ]] && Cmd="${!Varname}"
        [[ -n "$ZSH_VERSION" ]] && Cmd="${(P)Varname}"
        FZF_CURRENT_DIR=$PWD

        while true; do
        Operate=$(eval "$Cmd" | awk -v dir="$FZF_CURRENT_DIR" '
            BEGIN { print ".." }
            { print }
            END { print "🔙 返回" }
        ' | fzf $FZF_CUSTOM_PARAMS +m \
        --preview "(${MYRUNTIME}/customs/bin/_previewer {}) 2> /dev/null | head -500" \
        --header="$(_buildFzfHeader '' 'fzf_full_files_manager')" )
        
        if [ -n "$Operate" ]; then
            if [[ "$Operate" == "🔙 返回" ]]; then
                return  # 直接退出函数
            elif [[ "$Operate" == ".." ]]; then
                # 处理根目录情况
                if [[ "$FZF_CURRENT_DIR" != "/" ]]; then
                    FZF_CURRENT_DIR=$(dirname "$FZF_CURRENT_DIR")
                fi
                #PWD=$FZF_CURRENT_DIR
                cd "$FZF_CURRENT_DIR"  # 刷新工作目录
            elif [[ -d "${FZF_CURRENT_DIR}/${Operate}" ]]; then
                FZF_CURRENT_DIR="${FZF_CURRENT_DIR}/${Operate}"
                #PWD=$FZF_CURRENT_DIR
                cd "$FZF_CURRENT_DIR"  # 刷新工作目录
            else
                if [ "$Action" = "contents" ]; then
                    local tmpfilepath=$(echo "$Operate" | awk -F':' '{print $1}')
                    local tmplinenum=$(echo "$Operate" | awk -F':' '{print $2}')
                    if command -v code > /dev/null; then
                        /usr/local/bin/code --new-window --goto ${tmpfilepath}:${tmplinenum}
                    elif command -v nvim > /dev/null; then
                        nvim +${tmplinenum} ${tmpfilepath}
                    elif command -v vim > /dev/null; then
                        vim  +${tmplinenum} ${tmpfilepath}
                    else
                        bat --highlight-line="${tmplinenum}" --theme=gruvbox-dark --style='full' --color=always --pager=never "${tmpfilepath}"
                    fi
                else
                    # 添加文件打开逻辑
                    #open "${FZF_CURRENT_DIR}/${Operate}" &>/dev/null
                    echo $Operate
                fi
            fi
        else
            return
        fi
        done
    }

#    while true; do
        local action=$(printf "%s\n" \
            "🔍️ 所有文件(All)" \
            "📂 文件夹(Directory)" \
            "📄 文件(File)" \
            "🔗 软连接(Symbolic Link)" \
            "🥷 隐藏文件(Hidden)" \
            "🖼️ 图片(Image)" \
            "📖 文本(Document)" \
            "📻️ 媒体(Media)" \
            "🧾 开发(Develop)" \
            "📝 全文搜索(Content)" \
            "🗜️ 压缩文件(Archive)" \
            "🔙 返回(Back)" | \
            fzf +m \
                --header " 文件管理系统 " \
                --prompt "主菜单 ❯ " \
                --preview-window=up:30% \
                --preview "echo '请选择操作类型'" \
                --height=15% \
                --bind='space:jump,jump:accept' \
                --reverse)

        case $action in
            *所有文件*)     ___fzf_manage_all "all" ;;
            *文件夹*)       ___fzf_manage_all "directories" ;;
            *软连接*)       ___fzf_manage_all "symbolic_links" ;;
            *隐藏文件*)      ___fzf_manage_all "hiddens" ;;
            *压缩文件*)      ___fzf_manage_all "archives" ;;
            *文件*)         ___fzf_manage_all "files" ;;
            *图片*)         ___fzf_manage_all "images" ;;
            *文本*)         ___fzf_manage_all "documents" ;;
            *媒体*)         ___fzf_manage_all "medias" ;;
            *开发*)         ___fzf_manage_all "languages" ;;
            *全文搜索*)     ___fzf_manage_all "contents" ;;
            *返回*) return ;;
        esac
#    done
}
alias ffm="fzf_full_files_manager"                                                     # Desc: alias: ffm: fzf_full_files_manager命令的别名,利用fzf管理文件夹、文件、图片、文本搜索、影音文件等
