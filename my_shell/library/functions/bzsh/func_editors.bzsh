function editorw() { # Desc: function: editorw:use which command to find out the file or command then open with editors
    local COMMANDBIN=$1
    local FILENAME=$2
    if [ -f $COMMANDBIN ]; then
        if [ "" != "$FILENAME" ]; then
            command -v "$@" > /dev/null 2>&1
            [[ "$?" = "1" ]] && echo "Command $@ does not exists !" && return 1
            if [ "$(type $FILENAME | grep 'a shell function from')" = "" ] && [ "$(type $FILENAME | grep 'is an alias for')" = "" ]; then
                $COMMANDBIN `which "$FILENAME"`
            else
                endfile=$(type "$FILENAME" | awk '{print $NF}')
                if [ -f $endfile ] || [ -d $endfile ]; then
                    $COMMANDBIN $endfile
                else
                    editorw $COMMANDBIN $endfile
                fi
            fi
        else
            $COMMANDBIN `pwd`
        fi
    else
        echo "$COMMANDBIN does not exsits !!!"
        return 1
    fi
}

function codew() { # Desc: function: codew:visual studio code 编辑which命令找到的文件地址
    local COMMANDBIN=/usr/local/bin/code
    editorw $COMMANDBIN $1
}

function stw() { # Desc: function: stw:sublime text 编辑which命令找到的文件地址
    local COMMANDBIN=$HOME/bin/subl
    editorw $COMMANDBIN $1
}

function atomw() { # Desc: function: atomw:atom 编辑which命令找到的文件地址
    local COMMANDBIN=/usr/local/bin/atom
    editorw $COMMANDBIN $1
}

function viw() { # Desc: function: viw:vim 编辑which命令找到的文件地址
    if [ -f /usr/local/bin/vim ]; then
        local COMMANDBIN=/usr/local/bin/vim
    elif [ -f /opt/homebrew/bin/vim ]; then
        local COMMANDBIN=/opt/homebrew/bin/vim
    fi
    editorw $COMMANDBIN $1
}

function nviw() { # Desc: function: nviw:neovim 编辑which命令找到的文件地址
    if [ -f /usr/local/bin/nvim ]; then
        local COMMANDBIN=/usr/local/bin/nvim
    elif [ -f /opt/homebrew/bin/nvim ]; then
        local COMMANDBIN=/opt/homebrew/bin/nvim
    fi
    editorw $COMMANDBIN $1
}

function fzf_e() { # Desc: function: fzf_e:Open the selected file with the default editor. Bypass fuzzy finder if there's only one match (--select-1) Exit if there's no match (--exit-0)
    local file
    file=$(fzf-tmux --query="$1" --select-1 --exit-0)
    [ -n "$file" ] && ${EDITOR:-vim} "$file"
}
alias fe="fzf_e" # Desc: alias: fe: fzf_e命令的别名,Open the selected file with the default editor. Bypass fuzzy finder if there's only one match (--select-1) Exit if there's no match (--exit-0)

function fzf_tags() { # Desc: function: fzf_tags:search ctags
#    local line
#    [ -e tags ] &&
#        line=$(
#    awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
#    cut -c1-80 | fzf --nth=1,2
#    ) && $EDITOR $(cut -f3 <<< "$line") -c "set nocst" \
#        -c "silent tag $(cut -f2 <<< "$line")"


    local line
    [ -e tags ] &&
    line=$(
    awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
    fzf \
        --nth=1,2 \
        --with-nth=2 \
        --preview-window="50%" \
        --preview="bat {3} --color=always | tail -n +\$(echo {4} | tr -d \";\\\"\")"
    ) && ${EDITOR:-vim} $(cut -f3 <<< "$line") -c "set nocst" \
                                        -c "silent tag $(cut -f2 <<< "$line")"
}
alias ftags="fzf_tags" # Desc: alias: ftags: fzf_tags: search ctags

function v() { # Desc: function: v:open files in ~/.viminfo
    local files
    files=$(grep '^>' ~/.viminfo | cut -c3- |
    while read line; do
        [ -f "${line/\~/$HOME}" ] && echo "$line"
    done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
}

function fzf_open_with_editor() { # Desc: function: fzf_open_with_editor:Modified version where you can press CTRL-O to open with `open` command, CTRL-E or Enter key to open with the $EDITOR
    local out file key
    out=$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
    fi
}
alias fo="fzf_open_with_editor"     # Desc: alias: fo:fzf_open_with_editor命令的别名,Modified version where you can press CTRL-O to open with `open` command, CTRL-E or Enter key to open with the $EDITOR

function fzf_open_with_editor2() { # Desc: function: fzf_open_with_editor2:This finds files with fd, pipes the list into fzf and the fuzzy matched results get opened with Vim. It also uses bat for file previews.
    export FZF_DEFAULT_COMMAND="fd -p -i -H -L -t f -t l -t x \
-E 'icloud/*' \
-E 'Library/*' \
-E 'Pictures/Photos Library.photoslibrary/*' \
-E '.git'"
    IFS=$'\n' \
       files=($(fzf --reverse \
                    --preview "bat --theme=timu-spacegrey --color=always {}" \
                    --query="$1" --multi --select-1 --exit-0))
    [[ -n "$files" ]] && vim "${files[@]}"
}
alias fv='fzf_open_with_editor2'     # Desc: alias: fv:fzf_open_with_editor2命令的别名,This finds files with fd, pipes the list into fzf and the fuzzy matched results get opened with Vim. It also uses bat for file previews.

function ag_open_with_line() { # Desc: function: ag_open_with_line:fuzzy grep open via ag with line number
    local file
    local line

    read -r file line <<<"$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1, $2}')"

    if [[ -n $file ]]
    then
        vim $file +$line
    fi
}
alias vg="ag_open_with_line"    # Desc: alias: vg:ag_open_with_line命令的别名,fuzzy grep open via ag with line number

function fzf_nvim() { # Desc: function: fzf_nvim: 利用fzf选择文件并用nvim进行编辑
    files="$(fzf --preview "bat --style=numbers --line-range=:500 {}" )"
    count="$( echo "$files" | wc -l )"
    nvim $files
}
alias fnvi="fzf_nvim"   # Desc: alias: fnvi: fzf_nvim命令的别名,利用fzf选择文件并用nvim进行编辑
alias fnvim="fzf_nvim"   # Desc: alias: fnvim: fzf_nvim命令的别名,利用fzf选择文件并用nvim进行编辑


function fzf_vim() { # Desc: function: fzf_vim: 利用fzf选择文件并用vim进行编辑
    files="$(fzf --preview "bat --style=numbers --line-range=:500 {}" )"
    count="$( echo "$files" | wc -l )"
    vim $files
}
alias fvi="fzf_vim"   # Desc: alias: fvi: fzf_vim命令的别名,利用fzf选择文件并用vim进行编辑
alias fvim="fzf_vim"   # Desc: alias: fvim: fzf_vim命令的别名,利用fzf选择文件并用vim进行编辑

