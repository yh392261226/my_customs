### Package Desc: 编辑器相关命令


function editorw() { # Desc: function: editorw:use which command to find out the file or command then open with editors
    local COMMANDBIN=$1
    local FILENAME=$2
    if [ -f $COMMANDBIN ]; then
        if [ "" != "$FILENAME" ]; then
            command -v "$@" > /dev/null 2>&1
            [[ "$?" = "1" ]] && echo "Command $@ does not exists !" && return 1
            if [ "$(type $FILENAME | grep 'a shell function from')" = "" ] && [ "$(type $FILENAME | grep 'is an alias for')" = "" ]; then
                $COMMANDBIN `which "$FILENAME"`
            else
                endfile=$(type "$FILENAME" | awk '{print $NF}')
                if [ -f $endfile ] || [ -d $endfile ]; then
                    $COMMANDBIN $endfile
                else
                    editorw $COMMANDBIN $endfile
                fi
            fi
        else
            $COMMANDBIN `pwd`
        fi
    else
        echo "$COMMANDBIN does not exsits !!!"
        return 1
    fi
}

function codew() { # Desc: function: codew:visual studio code 编辑which命令找到的文件地址
    local COMMANDBIN=/usr/local/bin/code
    editorw $COMMANDBIN $1
}

function stw() { # Desc: function: stw:sublime text 编辑which命令找到的文件地址
    local COMMANDBIN=$HOME/bin/subl
    editorw $COMMANDBIN $1
}

function atomw() { # Desc: function: atomw:atom 编辑which命令找到的文件地址
    local COMMANDBIN=/usr/local/bin/atom
    editorw $COMMANDBIN $1
}

function viw() { # Desc: function: viw:vim 编辑which命令找到的文件地址
    if [ -f /usr/local/bin/vim ]; then
        local COMMANDBIN=/usr/local/bin/vim
    elif [ -f /opt/homebrew/bin/vim ]; then
        local COMMANDBIN=/opt/homebrew/bin/vim
    fi
    editorw $COMMANDBIN $1
}

function nviw() { # Desc: function: nviw:neovim 编辑which命令找到的文件地址
    if [ -f /usr/local/bin/nvim ]; then
        local COMMANDBIN=/usr/local/bin/nvim
    elif [ -f /opt/homebrew/bin/nvim ]; then
        local COMMANDBIN=/opt/homebrew/bin/nvim
    fi
    editorw $COMMANDBIN $1
}

function fzf_edit() { # Desc: function: fzf_edit:Open the selected file with the default editor. Bypass fuzzy finder if there's only one match (--select-1) Exit if there's no match (--exit-0)
    local file
    file=$(fzf-tmux --query="$1" --select-1 --exit-0)
    [ -n "$file" ] && ${EDITOR:-vim} "$file"
}
alias fe="fzf_edit" # Desc: alias: fe: fzf_edit命令的别名,Open the selected file with the default editor. Bypass fuzzy finder if there's only one match (--select-1) Exit if there's no match (--exit-0)

function fzf_tags() { # Desc: function: fzf_tags:search ctags
    local linen
    [ -e tags ] &&
    linen=$(
    awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
    fzf $FZF_CUSTOM_PARAMS --nth=1,2 --with-nth=2 \
--preview-window right:50%:border-rounded:hidden:wrap \
--preview="bat {3} --color=always | tail -n +\$(echo {4} | tr -d \";\\\"\")" \
--preview-label='[ Ctags ]' \
    ) && ${EDITOR:-vim} $(cut -f3 <<< "$linen") -c "set nocst" \
                                        -c "silent tag $(cut -f2 <<< "$linen")"
}
alias ftags="fzf_tags" # Desc: alias: ftags: fzf_tags: search ctags

function fzf_open_viminfo() { # Desc: function: fzf_open_viminfo:open files in ~/.viminfo
    local files
    files=$(grep '^>' ~/.viminfo | cut -c3- |
    while read line; do
        [ -f "${line/\~/$HOME}" ] && echo "$line"
    done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
}
alias fov="fzf_open_viminfo" # Desc: alias: fov: fzf_open_viminfo命令的别名,open files in ~/.viminfo

function fzf_open_with_editor() { # Desc: function: fzf_open_with_editor:Modified version where you can press CTRL-O to open with `open` command, CTRL-E or Enter key to open with the $EDITOR
    local out file key
    out=$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
    fi
}
alias fo="fzf_open_with_editor"     # Desc: alias: fo:fzf_open_with_editor命令的别名,Modified version where you can press CTRL-O to open with `open` command, CTRL-E or Enter key to open with the $EDITOR

function fzf_open_with_editor2() { # Desc: function: fzf_open_with_editor2:This finds files with fd, pipes the list into fzf and the fuzzy matched results get opened with Vim. It also uses bat for file previews.
    export FZF_DEFAULT_COMMAND="fd -p -i -H -L -t f -t l -t x \
-E 'icloud/*' \
-E 'Library/*' \
-E 'Pictures/Photos Library.photoslibrary/*' \
-E '.git'"
    IFS=$'\n' \
       files=($(fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview 'bat --theme=timu-spacegrey --color=always {}' \
--preview-label='[ 文件 ]' \
--query="$1" --multi --select-1 --exit-0 \
                    ))
    [[ -n "$files" ]] && vim "${files[@]}"
}
alias fv='fzf_open_with_editor2'     # Desc: alias: fv:fzf_open_with_editor2命令的别名,This finds files with fd, pipes the list into fzf and the fuzzy matched results get opened with Vim. It also uses bat for file previews.

function ag_open_with_line() { # Desc: function: ag_open_with_line:fuzzy grep open via ag with line number
    local cfile
    local cline
    local AGBIN
    [[ -f /opt/homebrew/bin/ag ]] && AGBIN=/opt/homebrew/bin/ag
    [[ -f /usr/local/bin/ag ]] && AGBIN=/usr/local/bin/ag

    read -r cfile cline <<<"$($AGBIN --nobreak --noheading $@ | fzf -0 -1 $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview-label='[ Search ]' \
| awk -F: '{print $1, $2}')"

    if [[ -n $cfile ]]
    then
        vim $cfile +$cline
    fi
}
alias vg="ag_open_with_line"    # Desc: alias: vg:ag_open_with_line命令的别名,fuzzy grep open via ag with line number

function fzf_nvim() { # Desc: function: fzf_nvim: 利用fzf选择文件并用nvim进行编辑
    files="$(fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview 'bat --style=numbers --line-range=:500 {}' \
--preview-label='[ 文件 ]' \
)"
    count="$( echo "$files" | wc -l )"
    [[ ! "$files" ]] && return
    nvim $files
}
alias fnvi="fzf_nvim"   # Desc: alias: fnvi: fzf_nvim命令的别名,利用fzf选择文件并用nvim进行编辑
alias fnvim="fzf_nvim"   # Desc: alias: fnvim: fzf_nvim命令的别名,利用fzf选择文件并用nvim进行编辑


function fzf_vim() { # Desc: function: fzf_vim: 利用fzf选择文件并用vim进行编辑
    files="$(fzf $FZF_CUSTOM_PARAMS \
--preview-window right:70%:border-rounded:hidden:wrap \
--preview 'bat --style=numbers --line-range=:500 {}' \
--preview-label='[ 文件 ]' \
)"
    count="$( echo "$files" | wc -l )"
    vim $files
}
alias fvi="fzf_vim"   # Desc: alias: fvi: fzf_vim命令的别名,利用fzf选择文件并用vim进行编辑
alias fvim="fzf_vim"   # Desc: alias: fvim: fzf_vim命令的别名,利用fzf选择文件并用vim进行编辑

function fzf_search_vim1() { # Desc: function: fzf_search_vim1: 1. Search for text in files using Ripgrep. 2. Interactively narrow down the list using fzf. 3. Open the file in Vim
    rg --color=always --line-number --no-heading --smart-case "${*:-}" |
    fzf --ansi \
      --color "hl:-1:underline,hl+:-1:underline:reverse" \
      --delimiter : \
      --preview 'bat --color=always {1} --highlight-line {2}' \
      --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
      --bind 'enter:become(vim {1} +{2})'
}
alias fsv1="fzf_search_vim1" # Desc: alias: fsv1: fzf_search_vim1命令的别名,1. Search for text in files using Ripgrep. 2. Interactively narrow down the list using fzf. 3. Open the file in Vim

function fzf_search_vim2() { # Desc: function: fzf_search_vim2: 1. Search for text in files using Ripgrep.  2. Interactively restart Ripgrep with reload action.  3. Open the file in Vim
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
INITIAL_QUERY="${*:-}"
    FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
    fzf --ansi \
        --disabled --query "$INITIAL_QUERY" \
        --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
        --delimiter : \
        --preview 'bat --color=always {1} --highlight-line {2}' \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
        --bind 'enter:become(vim {1} +{2})'
}
alias fsv2="fzf_search_vim2" # Desc: alias: fsv2: fzf_search_vim2命令的别名,1. Search for text in files using Ripgrep.  2. Interactively restart Ripgrep with reload action.  3. Open the file in Vim

function fzf_search_vim3() { # Desc: function: fzf_search_vim3:Two-phase filtering with Ripgrep and fzf 1. Search for text in files using Ripgrep 2. Interactively restart Ripgrep with reload action * Press ctrl-f to switch to fzf-only filtering 3. Open the file in Vim
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    INITIAL_QUERY="${*:-}"
    FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
    fzf --ansi \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --disabled --query "$INITIAL_QUERY" \
        --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
        --bind "ctrl-f:unbind(change,ctrl-f)+change-prompt(2. fzf> )+enable-search+clear-query" \
        --prompt '1. ripgrep> ' \
        --delimiter : \
        --header  '模式: CTRL-F (fzf)'  \
        --preview 'bat --color=always {1} --highlight-line {2}' \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
        --bind 'enter:become(vim {1} +{2})'
}
alias fsv3="fzf_search_vim3" # Desc: alias: fsv3: fzf_search_vim3命令的别名,Two-phase filtering with Ripgrep and fzf 1. Search for text in files using Ripgrep 2. Interactively restart Ripgrep with reload action * Press ctrl-f to switch to fzf-only filtering 3. Open the file in Vim

function fzf_search_vim4() { # Desc: function: fzf_search_vim4:Switch between Ripgrep launcher mode (CTRL-R) and fzf filtering mode (CTRL-F)
    \rm -f /tmp/rg-fzf-{r,f}
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    INITIAL_QUERY="${BUFFER:-}"
    FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
    fzf --query "$INITIAL_QUERY" \
        --ansi \
        --disabled \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --prompt          'ripgrep正则> '                                  \
        --delimiter       :                                                \
        --header          '模式: CTRL-R (ripgrep) | CTRL-F (fzf)'  \
        --preview         'bat --color=always {1} --highlight-line {2}'    \
        --preview-window  'up,60%,border-bottom,+{2}+3/3,~3'               \
        --bind  "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
        --bind  "ctrl-f:unbind(change,ctrl-f)+change-prompt(fzf模糊> )+enable-search+rebind(ctrl-r)+transform-query(echo {q} > /tmp/rg-fzf-r; cat /tmp/rg-fzf-f)" \
        --bind  "ctrl-r:unbind(ctrl-r)+change-prompt(1. ripgrep> )+disable-search+reload($RG_PREFIX {q} || true)+rebind(change,ctrl-f)+transform-query(echo {q} > /tmp/rg-fzf-f; cat /tmp/rg-fzf-r)" \
        --bind  "start:unbind(ctrl-r)" \
        --bind  "enter:become(nvr {1} +{2})"
}
alias fsv4="fzf_search_vim4" # Desc: alias: fsv4: fzf_search_vim5命令的别名,Switch between Ripgrep launcher mode (CTRL-R) and fzf filtering mode (CTRL-F)

function fzf_vim_to_line_by_keyword() { # Desc: function: fzf_vim_to_line_by_keyword: vim定位打开根据关键字搜索到文件及行号
    [[ "" = "$1" ]] && echo "Usage: fvlk <keyword>" && return 1
    grep --recursive --line-number --binary-files=without-match "$1" . | fzf --delimiter : --nth 3.. $FZF_CUSTOM_PARAMS \
--preview-label='[ 文件及行号 ]' \
--bind 'enter:become(vim {1} +{2})'
}
alias fvlk="fzf_vim_to_line_by_keyword" # alias: fvlk: fzf_vim_to_line_by_keyword命令的别名,vim定位打开根据关键字搜索到文件及行号