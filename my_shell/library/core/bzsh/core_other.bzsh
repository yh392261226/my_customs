# File              : my_other.sh
# Date              : 27.02.2021
# Last Modified Date: 27.02.2021
is_notify=0
### export 设定
[[ -d $HOME/.nvm ]] && export NVM_DIR="$HOME/.nvm"

### source 引入
#####nvm
[[ -s "$HOME/.nvm/nvm.sh"  ]] && source $HOME/.nvm/nvm.sh # Loads NVM into a shell session.
[[ -s "$NVM_DIR/nvm.sh" ]] && source "$NVM_DIR/nvm.sh"  # This loads nvm
[[ -f $HOME/.rvm/scripts/rvm ]] && source $HOME/.rvm/scripts/rvm
[[ -s $HOME/.autojump/etc/profile.d/autojump.sh  ]] && source $HOME/.autojump/etc/profile.d/autojump.sh

if [ "bash" = "$nowshell" ]; then
    [[ -f $HOME/.fzf.bash ]] && source $HOME/.fzf.bash
elif [ "zsh" = "$nowshell" ]; then
    [[ -f /opt/homebrew/share/antigen/antigen.zsh ]] && source /opt/homebrew/share/antigen/antigen.zsh
    [[ -f /usr/local/share/antigen/antigen.zsh ]] && source /usr/local/share/antigen/antigen.zsh
    [[ -f $HOME/.fzf.zsh ]] && source $HOME/.fzf.zsh
fi

if [ "bash" != "$nowshell" ] && [ -f $MYRUNTIME/customs/others/iterm2_rainbow_tabs.sh ]; then
	source $MYRUNTIME/customs/others/iterm2_rainbow_tabs.sh
fi


[[ -d /usr/local/opt/sphinx-doc/bin ]] && export PATH="/usr/local/opt/sphinx-doc/bin:$PATH"
[[ -d /opt/homebrew/opt/sphinx-doc/bin ]] && export PATH="/opt/homebrew/opt/sphinx-doc/bin:$PATH"
[[ -d /usr/local/opt/openssl/lib ]] && export LDFLAGS="-L/usr/local/opt/openssl/lib"
[[ -d /opt/homebrew/opt/openssl/lib ]] && export LDFLAGS="-L/opt/homebrew/opt/openssl/lib"
[[ -d /usr/local/opt/openssl/include ]] && export CPPFLAGS="-I/usr/local/opt/openssl/include"
[[ -d /opt/homebrew/opt/openssl/include ]] && export CPPFLAGS="-I/opt/homebrew/opt/openssl/include"

### vim&nvim  remote
if [ -f $HOME/.SpaceVim ] || [ -d $HOME/.SpaceVim ]; then 
	export PATH=$HOME/.SpaceVim/bin:$PATH
fi

[[ -d $HOME/.yarn/bin ]] && export PATH="$HOME/.yarn/bin:$PATH"
[[ -d $HOME/.local/bin ]] && export PATH="$HOME/.local/bin:$PATH"

### iterm2 shell integration
[[ -e $HOME/.iterm2_shell_integration.${nowshell} ]] && source $HOME/.iterm2_shell_integration.${nowshell}

#{{{ OH-MY-ZSH & Zinit plugins
if [ "zsh" = "$nowshell" ]; then
    if [ ! -d $HOME/.zinit/plugins ]; then
        mkdir -p $HOME/.zinit/plugins
    fi
    [[ -f ${MYRUNTIME}/customs/others/fuzzy-fs/fuzzy-fs ]] && source ${MYRUNTIME}/customs/others/fuzzy-fs/fuzzy-fs
    [[ -f ${MYRUNTIME}/customs/others/zsh-fzf-widgets/zsh-fzf-widgets.zsh ]] && source ${MYRUNTIME}/customs/others/zsh-fzf-widgets/zsh-fzf-widgets.zsh
    [[ -d ${MYRUNTIME}/customs/others/git-fuzzy/bin ]] && export PATH="${MYRUNTIME}/customs/others/git-fuzzy/bin:$PATH"
    [[ -f ${MYRUNTIME}/customs/others/zfm/zfm.zsh ]] && source ${MYRUNTIME}/customs/others/zfm/zfm.zsh
fi
#}}}

if [ -d $MYRUNTIME/customs/others/enhancd/ ]; then
    export ENHANCD_COMMAND=ecd
    source $MYRUNTIME/customs/others/enhancd/my_init.sh
    [[ -f /usr/local/bin/peco ]] && export ENHANCD_FILTER="/usr/local/bin/peco:fzf:non-existing-filter"
    [[ -f /opt/homebrew/bin/peco ]] && export ENHANCD_FILTER="/opt/homebrew/bin/peco:fzf:non-existing-filter"
    export ENHANCD_HOOK_AFTER_CD="lsd -l"
    export ENHANCD_FILTER="fzf --preview 'exa -al --tree --level 1 --group-directories-first --git-ignore --header --git --no-user --no-time --no-filesize --no-permissions {}' --preview-window right,50% --height 35% --reverse --ansi"
    export ENHANCD_USE_ABBREV=false
fi

#[[ -f $MYRUNTIME/customs/others/up/up.sh ]] && source $MYRUNTIME/customs/others/up/up.sh

if [ "zsh" = "$nowshell" ]; then
    source $MYRUNTIME/customs/others/fzf-help/src/fzf-help.zsh
    zle -N fzf-help-widget
    bindkey "^H" fzf-help-widget
elif [ "bash" = "$nowshell" ]; then
    source $MYRUNTIME/customs/others/fzf-help/src/fzf-help.bash
    bind -x '"\C-h": fzf-help-widget'
fi

#[[ -f /opt/homebrew/opt/autoenv/activate.sh ]] && source /opt/homebrew/opt/autoenv/activate.sh
#[[ -f /usr/local/opt/autoenv/activate.sh ]] && source /usr/local/opt/autoenv/activate.sh
[[ -f /opt/homebrew/bin/pokemon ]] && alias ding="/opt/homebrew/bin/pokemon"
[[ -f /usr/local/bin/pokemon ]] && alias ding="/usr/local/bin/pokemon"

if [ "$is_notify" -gt "0" ]; then
    echo "Please Restart a new terminal window to effect the changing !!!"
fi

### Bashhub.com Installation
if [ ! -d $HOME/.bashhub/ ]; then
	curl -OL https://bashhub.com/setup && zsh setup
fi

if [ "zsh" = "$nowshell" ] && [ -f $HOME/.bashhub/bashhub.zsh ]; then
    source $HOME/.bashhub/bashhub.zsh
elif [ "bash" = "$nowshell" ] && [ -f $HOME/.bashhub/bashhub.bash ]; then
    source $HOME/.bashhub/bashhub.bash
fi

if [ "$(command -v atuin)"  =  "" ]; then
    brew install atuin
fi

### SSH config && tmp directory
[[ ! -f $HOME/.ssh/config ]] && ln -sf $MYRUNTIME/customs/customs_modify_records/ssh_config $HOME/.ssh/config
[[ ! -d $HOME/.ssh/tmp ]] && mkdir -p $HOME/.ssh/tmp

### fz
[[ -f $MYRUNTIME/customs/others/fz/fz.sh ]] && source $MYRUNTIME/customs/others/fz/fz.sh

### _lessfilter
if [ -f $MYRUNTIME/customs/bin/_lessfilter ]; then
    if [ ! -f $HOME/.lessfilter ]; then
        ln -sf $MYRUNTIME/customs/bin/_lessfilter $HOME/.lessfilter
    fi
fi

### tag
if [ "zsh" = "$nowshell" ]; then
    if (( $+commands[tag] )); then
        export TAG_SEARCH_PROG=ag  # replace with rg for ripgrep
        tag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null; }
        # alias ag="tag"  # replace with rg for ripgrep
    fi
elif [ "bash" = "$nowshell" ]; then
    if hash ag 2>/dev/null; then
        export TAG_SEARCH_PROG=ag  # replace with rg for ripgrep
        tag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null; }
        # alias ag=tag  # replace with rg for ripgrep
    fi
fi

###zoxide
if [ "" != "$(brew --prefix zoxide)" ]; then
    if [ "zsh" = "$nowshell" ]; then
        eval "$(zoxide init zsh)"
    fi
    if [ "bash" = "$nowshell" ]; then
        eval "$(zoxide init bash)"
    fi
fi

[[ -d /opt/homebrew/opt/ssh-copy-id/bin ]] && export PATH="/opt/homebrew/opt/ssh-copy-id/bin:$PATH"
[[ -d /usr/local/opt/ssh-copy-id/bin ]] && export PATH="/opt/homebrew/opt/ssh-copy-id/bin:$PATH"

[[ -f $HOME/.cargo/env ]] && source "$HOME/.cargo/env"

### custom commands
## fasd
eval "$(fasd --init auto)"
## the fuck command
#eval $(thefuck --alias)
## the aliases command
eval "$(aliases init --global)"
## the atuin import
if [ "zsh" = "$nowshell" ]; then
    eval "$(atuin init zsh)"
elif [ "bash" = "$nowshell" ]; then
    eval "$(atuin init bash)"
fi

### fzf
# Set up fzf key bindings and fuzzy completion
if [ "zsh" = "$nowshell" ]; then
    eval "$(fzf --zsh)"
elif [ "bash" = "$nowshell" ]; then
    eval "$(fzf --bash)"
fi

### fzf-git.sh
if [ -d $MYRUNTIME/customs/others/fzf-git.sh ] && [ -f $MYRUNTIME/customs/others/fzf-git.sh/fzf-git.sh ]; then
    source $MYRUNTIME/customs/others/fzf-git.sh/fzf-git.sh
fi

#Git configs
#----------------------------------------------------------------------------------------------------------------
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.cm commit
git config --global alias.st status
git config --global alias.ad add
git config --global alias.df diff
git config --global alias.dfc "diff --cached"
git config --global alias.br branch
git config --global alias.lol "log --graph --decorate --pretty=oneline --abbrev-commit"
git config --global alias.lola "log --graph --decorate --pretty=oneline --abbrev-commit --all"
git config --global alias.subup "submodule update --init --recursive"
git config --global alias.subst "submodule status --recursive"

default_user=$(/usr/bin/whoami)
/bin/sh $MYRUNTIME/customs/bin/extendslocatetochangepicurl
[[ -f $MYRUNTIME/customs/bin/start ]] && $MYRUNTIME/customs/bin/start

#Dotbare
#----------------------------------------------------------------------------------------------------------------
#
#alias config=/usr/bin/git --git-dir=$HOME/.cfg --work-tree=$HOME                                                 # Desc: alias: config:git设置的别名,但紧接着被dotbare覆盖
export DOTBARE_DIR="$HOME/.cfg"
export DOTBARE_TREE="$HOME"
alias config=dotbare                                                                                              # Desc: alias: config:dotbare的别名

#Homebrew
#----------------------------------------------------------------------------------------------------------------
#
export HOMEBREW_NO_AUTO_UPDATE=1                                                                                  # Desc: 设置homebrew不自动更新
