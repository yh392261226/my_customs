#!/usr/bin/env bash
########################################
## Desc: 常用目录mark功能
## Author: 杨浩
########################################
MYRUNTIME=$(cat ~/.myruntime)                       #runtime path
show_msg=0                                          #if show msg 0:no 1:yes
MARKFILE=$MYRUNTIME/tools/m_mark                    #mark 记录文件位置
TMPMARKFILE=/tmp/tmp_mark_path                      #临时替换文件
TMPCOMMAND=/tmp/tmp_mark_command                    #临时命令
DESCFILE=".descfile"                                #描述文件名称
VIMCOMMAND=/usr/bin/vim                             #vim命令位置
action=$1                                           #操作参数
ifsort=0 											#是否排序


gotoPath() {
    local gotopath=$1
    if [ "$nowterm" = "iTerm" ]; then
        osascript -e "tell application \"iTerm.app\"
            tell current window
                tell current session
                    write text \"cd "${gotopath}"\"
                end tell
            end tell
        end tell"
    elif [ "$nowterm" = "Terminal" ]; then
        osascript -e "tell application \"Terminal\"
        activate
        do script \"cd ${gotopath}\" in window 1
        end tell"
    fi
}

del_mark() {
    local delpath="$(pwd|sed 's/\ /\\\ /g')"
    local tmpmarks=$(cat $MARKFILE | grep -vFx "$delpath")
    if [ -f $TMPMARKFILE ]; then
        rm -f $TMPMARKFILE
    fi
    IFS=$'\n'
    OLDIFS="$IFS"
    for mark in $tmpmarks; do
        echo "$mark" >> $TMPMARKFILE
    done
    IFS="$OLDIFS"
    if [ -f $TMPMARKFILE ]; then
        mv $TMPMARKFILE $MARKFILE
        if [ "$?" = "0" ]; then
            rm -f ${delpath}/$DESCFILE
            echo "Action successful !";
        else
            echo "Action faild !";
        fi
    fi
}

###按照数字删除喜欢
del_mark_by_num() {
    local marklists=`cat $MARKFILE`
    local number=$1
    local mark_array[0]=''
    local posit=0
    for i in ${marklists[*]}; do
        if [ "$i" != "" ]; then
            mark_array[$posit]=$i #加入数组
            ((posit+=1))
        fi
    done
    if [ "$number" -lt "${#mark_array[@]}" ]; then
        del_mark ${mark_array[$conf]}
    else
        echo "The number: $number you typed dose not exists !";
        exit 1
    fi
}


add_mark() {
    local curpath="$(pwd|sed 's/\ /\\\ /g')"                     #当前目录
    if [ ! -f $MARKFILE ]; then
		check=""
	  else
		check=$(cat $MARKFILE | grep -Fx "$curpath")
	  fi

    if [ "$check" != "" ]; then
        echo "Already marked !";
        exit 1
    fi
    echo "$curpath" >> $MARKFILE
    if [ "$?" = "0" ]; then
		if [ "$ifsort" = "1" ]; then
            cat $MARKFILE | sort > /tmp/m_cmark_temp
		else
			cat $MARKFILE > /tmp/m_cmark_temp
		fi

      if [ -f /tmp/m_cmark_temp ]; then
          rm -f $MARKFILE && mv /tmp/m_cmark_temp $MARKFILE
      fi
      echo "Action successful !";
      echo "Do not forget to write a description file!";
      $VIMCOMMAND $DESCFILE
    else
        echo "Action faild !";
    fi
}

###显示数量
list_num_mark() {
    check_mark

    local counts=`cat $MARKFILE | sort | uniq |wc -l`
    echo "Total : $counts"
}

###列出收藏
list_mark() {
    check_mark

    IFS=$'\n'
    OLDIFS="$IFS"
    local marklists=`cat $MARKFILE`
    local posit=0
    for i in ${marklists[*]}; do
        if [ "$i" != "" ]; then
            if [ -f ${i}/$DESCFILE ]; then
                desc=$(cat ${i}/$DESCFILE)
            else
                desc="Desc is empty!"
            fi
            printf "%-5s%-10s%-90s%-30s\n" "|" "$posit" "$i" "$desc"
            ((posit+=1))
        fi
    done
    list_num_mark
    IFS="$OLDIFS"
}

rebuild_mark() {
    check_mark

    IFS=$'\n'
    OLDIFS="$IFS"
    local marklists=`cat $MARKFILE`
    for i in ${marklists[*]}; do
        if [ "$i" != "" ]; then
            if [ ! -d ${i} ]; then
                gsed -i "/${i//\//\\/}/d" $MARKFILE
            fi
        fi
    done
    echo "Done..."
    return 0
    IFS="$OLDIFS"
}

chose_mark() {
    check_mark

    choose=$(cat $MYRUNTIME/tools/m_mark | fzf $FZF_CUSTOM_PARAMS \
    --preview-window right:70%:rounded:hidden:wrap \
    --preview "if [ -f {}/.descfile ]; then; cat {}/.descfile;fi;$MYRUNTIME/customs/bin/_previewer {}" \
    --header-first \
    --header $'Usage: $command list/l | num/n | add/a | del/d | chose/c | trun/t | rebuild/r | help/h  \n  用法： $command 列表   | 数量  | 添加  | 删除  | 选择    | 清空   |   重置    | 帮助' \
    --bind="ctrl-y:execute-silent(echo {} | pbcopy)+abort" \
    --bind='ctrl-d:execute((cat $MYRUNTIME/tools/m_mark | grep -vFx {}) > /tmp/m_cmark_temp && mv /tmp/m_cmark_temp $MYRUNTIME/tools/m_mark)+reload(cat $MYRUNTIME/tools/m_mark)')
    
    if [ "$choose" != "" ]; then
        # choose=$(echo $choose | gsed 's/ /\\\\ /g')
        gotoPath "$choose"
    fi
}

###清空
truncate_mark() {
    echo "Make sure your choice: y|Y|yes|YES/|n|N|no|NO";
    read choice
    if [ "$choice" = "yes" ] || [ "$choice" = "y" ] || [ "$choice" = "Y" ] || [ "$choice" = "YES" ]; then
        if [ -f $MARKFILE ]; then
            rm -f $MARKFILE
            if [ "$?" = "0" ]; then
                echo "Action successful !";
                exit 2
            else
                echo "Action faild !";
                exit 1
            fi
        fi
        echo "Mark file is empty !!!"
    else
        exit 1
    fi
}

help_mark() {
    command=$(basename $0)
    echo "Usage: $command list/l | num/n | add/a | del/d | chose/c | trun/t | rebuild/r | help/h" | lolcat -f -F 1.4
    echo "用法： $command 列表   | 数量  | 添加  | 删除  | 选择    | 清空   |   重置    | 帮助" | lolcat -f -F 1.4
}

check_mark() {
    if [ ! -d $MYRUNTIME ] || [ ! -f $MARKFILE ]; then
        echo "Runtime file or MARKFILE does not exists !!!"
        echo "You need to create it by yourself ."
        exit 1
    fi
}

init_mark() {
    # source $MYRUNTIME/customs/bin/mymessage
    hr '*' | lolcat -f -F 1.4
    case "$action" in
        [0-9]*) #直接填写数字
            chose_mark $action
            ;;
        "chose"|"c")
            if [ "$2" != "" ]; then
                chose_mark $2
            else
                    chose_mark
            fi
            ;;
        "list"|"l")
            list_mark
            ;;
        "num"|"n")
            list_num_mark
            ;;
        "add"|"a")
            add_mark
            ;;
        "del"|"d")
            if [ "" = "$2" ]; then
                del_mark
            else
                del_mark_by_num $2
            fi
            ;;
        "rebuild"|"r")
            rebuild_mark
            ;;
        "trun"|"truncate"|"t")
            truncate_mark
            ;;
        "help"|"h"|*)
            # help_mark
            # hr '*' | lolcat -f -F 1.4
            chose_mark
            ;;
    esac
}

init_mark