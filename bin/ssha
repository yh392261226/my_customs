#!/usr/bin/env bash
# Author   :    AlicFeng
# Email    :    a@samego.com
# Github   :    https://github.com/alicfeng/sshAutoLogin


server_list=()
SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR=~/.ssha
# load include server list configure
if [ $SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR ]; then
	# Determine whether the configuration folder exists
	if [ -d $SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR ];then
		# Traversing each configuration
		for config_file in $SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR/*ini;do 
			if [ "${config_file##*.}"x = "ini"x ]||[ "${config_file##*.}"x = "conf"x ];then
    				while read line_configure;do
                        eval $line_configure
					done < $config_file
                    server_list[${#server_list[*]}]="${Index} ${Name} ${Host} ${Port} ${User} ${PasswordOrKey}"
			else
				echo "file not rule" && exit 1
			fi
		done
	else
		echo  "SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR nothing configure files" && exit 1
	fi
else
	echo -e "Please setting SSH_INTELLIGENCE_AUTO_LOGIN_CONFIGURE_DIR \nmkdir ~/.ssha" && exit 1
fi

# server length
server_list_length=${#server_list[*]}

# list server
function list() {
    echo -e "Index\tDescription\tHost\t\tPort\t\tUsername\tPassword|SecretKeyFile"
    for ((i=0;i<${server_list_length};i++));do
        servers=(${server_list[$i]})
        serverIndex=$(($i+1))
        echo -e "${servers[0]}\t${servers[1]}\t\t${servers[2]}\t${servers[3]}\t${servers[4]}\t${servers[5]}\t"| toilet -f term -F border -t --gay
    done
    exit 0
}

function usage() {
    echo "usege:"
    echo "ssha [-h] [-l] [-s <server alias>]"
    exit 0
}

function login(){
    server=(${server_list[$1]})
    echo "$USER logging into the【${server[1]}】 server"| toilet -f term -F border --gay
    pem=${server[5]}

    rows=$(stty size | awk '{print $1}')
    columns=$(stty size | awk '{print $2}')
    if [ -f "$pem" ]; then
        $MYRUNTIME/customs/expect_scripts/ssha.exp ${server[1]} ${server[2]} ${server[3]} ${server[4]} ${server[5]} $rows $columns
    else
        $MYRUNTIME/customs/expect_scripts/ssha.exp ${server[1]} ${server[2]} ${server[3]} ${server[4]} ${server[5]} $rows $columns
    fi
    echo -e "\t$USER logged out the【${server[1]}】 server\t" | toilet -f term -F border --gay
}
# clear screen
if [ "" != "$1" ] && [[ "$1" == -* ]]; then
    while getopts hls: ARGS
    do
    if [ "" = "$ARGS" ]; then
        ARGS="h"
    fi
    case $ARGS in
        s)
            login $OPTARG
            ;;
        l)
            list
            ;;
        h)
            usage
            ;;
        *)
            usage
            ;;
    esac
    done
else
    usage
fi
