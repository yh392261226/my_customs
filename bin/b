#!/usr/bin/env bash
#################################
## Desc:   已下载图片记录、去重、分文件夹处理
## Author: 杨浩
## 使用方法：bbb
## 时    间：2021-01-09
#################################
##图片文件夹路径
PICPATH=$HOME/Pictures/down_pics/
##数据库文件路径
DBFILE=$PICPATH/db.log
##被去重文件数据库文件路径
DUPDBFILE=$PICPATH/duplicate_db.log
##去重后文件路径
UNIQFILE=$PICPATH/uniq.log
##被去重文件去重后文件路径
DUPUNIQFILE=$PICPATH/duplicate_uniq.log
##处理后的去重文件路径
DUPLICATEFILE=$PICPATH/result.log
##被去重文件夹处理后的去重文件路径
DUPDUPLICATEFILE=$PICPATH/duplicate_result.log
##去重文件数据库文件路径（仅有文件名）
FULLFILENAMESDB=$PICPATH/fullfilenames_db.log
##单个文件夹最多文件上限
MAXSIZE=2000

recordDB() {
    if [ -f $DBFILE ]; then
        rm -f $DBFILE $UNIQFILE;
    fi
    for path in $(ls $PICPATH | grep  -v duplicates_); do
        if [ -d $path ]; then 
            find ${PICPATH}${path} -type f -name "*jpg" >> $DBFILE
        fi
    done
}

recordDuplicateDB() {
    if [ -f $DUPDBFILE ]; then
        rm -f $DUPDBFILE $DUPUNIQFILE;
    fi
    for path in $(ls $PICPATH | grep duplicates_); do
        if [ -d $path ]; then 
            find ${PICPATH}${path} -type f -name "*jpg" >> $DUPDBFILE
        fi
    done
}

uniqDB() {
    rm -f /tmp/uniq_db_file_names $FULLFILENAMESDB
    for file in $(cat $DBFILE); do
        echo $(basename $file) >> /tmp/uniq_db_file_names
        echo $(basename $file) >> $FULLFILENAMESDB
    done
    if [ -f /tmp/uniq_db_file_names ]; then
        echo $(cat /tmp/uniq_db_file_names | sort -rn| uniq -c| awk '{if ($1 > 1) print $2}') >> $UNIQFILE
    fi
    if [ -f $UNIQFILE ]; then
        cat $UNIQFILE | tr ' ' '\n' > $DUPLICATEFILE
    fi
}

uniqDuplicateDB() {
    rm -f /tmp/uniq_duplicate_db_file_names
    for file in $(cat $DUPDBFILE); do
        echo $(basename $file) >> /tmp/uniq_duplicate_db_file_names
    done
    if [ -f /tmp/uniq_duplicate_db_file_names ]; then
        echo $(cat /tmp/uniq_duplicate_db_file_names | sort -rn| uniq -c| awk '{if ($1 > 1) print $2}') >> $DUPUNIQFILE
    fi
    if [ -f $DUPUNIQFILE ]; then
        cat $DUPUNIQFILE | tr ' ' '\n' > $DUPDUPLICATEFILE
    fi
}

moveUniq() {
    for file in $(cat $DUPLICATEFILE); do
        find $PICPATH -type f -name "$file" ! -path "${PICPATH}/*duplicates*" -exec $MYRUNTIME/customs/bin/_domove {} \;
    done
}

afterUniq() {
    local max=5
    local count=0
    for img in $(cat $UNIQFILE); do
        if [ $count -lt $max ]; then
            results=$(find $PICPATH/* -type f -name "$img" ! -path "${PICPATH}/*duplicates*")
            if [ "" != "$results" ] && [ "$(echo $results | sed 's, ,\r\n,g' |wc -l)" -gt 1 ]; then
                imgthumb $(echo $results | awk -F' ' '{print $1}')
                echo $results | sed 's, ,\r\n,g'
                ((count++))
            fi
        fi
    done
}

afterUniqDuplicate() {
    local max=5
    local count=0
    for img in $(cat $DUPUNIQFILE); do
        if [ $count -lt $max ]; then
            results=$(find $PICPATH/duplicates_* -type f -name "$img")
            if [ "" != "$results" ] && [ "$(echo $results | sed 's, ,\r\n,g' |wc -l)" -gt 1 ]; then
                imgthumb $(echo $results | awk -F' ' '{print $1}')
                echo $results | sed 's, ,\r\n,g'
                ((count++))
            fi
        fi
    done
}

unfull() {
    clear
    echo ""
    total=0
    need_total=0
    printf "\033[42m%-25s\033[0m\n" "*****************************************************************************************"
    printf "\033[0;33m%-25s\033[0m\n" "*****************************************************************************************"
    echo ""
    printf "\033[0;30m*****\033[0m \033[1;37m颜色代表\033[0m: \033[4;31m More多于需求 \033[0m , \033[4;33m Less少于需求 \033[0m , \033[4;32m Enough刚刚好 \033[0m \n"
    echo ""
    printf "\033[0;33m%-25s\033[0m\n" "*****************************************************************************************"
    printf "\033[42m%-25s\033[0m\n" "*****************************************************************************************"
    printf "\033[0;33m%-25s\033[0m\n" "========================================================================================="
    printf "\033[1;32m%-60s %-18s %-14s\033[0m\n" path counts needs
    printf "\033[0;33m%-25s\033[0m\n" "========================================================================================="
    for curpath in $(ls $PICPATH | sort -n); do
        if [ -d ${PICPATH}${curpath} ]; then 
            counts=$(find ${PICPATH}${curpath} -type f -name "*jpg" |wc -l)
            ((needs=$MAXSIZE-$counts))
            if [[ $curpath =~ duplicates_ ]]; then
                printf "\033[0;34m%-60s\033[0m \033[0;31m%-18s\033[0m %-14s\n" ${PICPATH}${curpath} $counts
                printf "\033[0;37m%-25s\033[0m\n" "-----------------------------------------------------------------------------------------"
            else
                if [ "$needs" -eq "0" ]; then
                    if [ ""  == "$1" ] || [ "$1" != "ne" ]; then
                        printf "\033[0;35m%-60s\033[0m \033[0;36m%-18s\033[0m \033[0;32m%-14s\033[0m\n" ${PICPATH}${curpath} $counts $needs
                        printf "\033[0;37m%-25s\033[0m\n" "-----------------------------------------------------------------------------------------"
                    fi
                elif [ "$needs" -gt "0" ]; then
                    if [ ""  == "$1" ] || [ "$1" = "ne" ]; then
                        printf "\033[0;35m%-60s\033[0m \033[0;36m%-18s\033[0m \033[0;33m%-14s\033[0m\n" ${PICPATH}${curpath} $counts $needs
                        printf "\033[0;37m%-25s\033[0m\n" "-----------------------------------------------------------------------------------------"
                    fi
                elif [ "$needs" -lt "0" ]; then
                    if [ ""  == "$1" ] || [ "$1" = "ne" ]; then
                        printf "\033[0;35m%-60s\033[0m \033[0;36m%-18s\033[0m \033[4;31m%-8s\033[0m\n" ${PICPATH}${curpath} $counts $needs
                        printf "\033[0;37m%-25s\033[0m\n" "-----------------------------------------------------------------------------------------"
                    fi
                fi
                ((total=$total+$counts))
                ((need_total=$need_total+$needs))
            fi
            # echo '-----------------------------------------------------------------------------------------'
        fi
    done
    printf "%-45s \033[1;33m %-25s \033[0m \033[1;31m %-20s \033[0m\n" "" "Total : $total" "Needs :  $need_total"
    echo ""

}

bCd() {
    echo "cd $PICPATH"
    `cd $PICPATH`
}


cd $PICPATH;
case "$1" in
    'r'|'record')
        recordDB
    ;;

    'dr'|'duprecord')
        recordDuplicateDB
    ;;

    'u'|'uniq')
        uniqDB
    ;;

    'du'|'dupuniq')
        uniqDuplicateDB
    ;;

    'a'|'after')
        afterUniq
    ;;

    'da'|'dupafter')
        afterUniqDuplicate
    ;;

    'm'|'move')
        moveUniq
    ;;

    'o'|'open')
        open $PICPATH
    ;;

    'un'|'unfull')
        unfull $2
    ;;
    'cd')
        bCd
    ;;

    *)
        echo "全目录记录->去重并记录->重复文件分离 最终文件都在duplicate文件夹中"
        hr '-'
        hr '*'
        hr '-'
        echo "Usage:     $0 r/record | u/uniq | m/move | o/open | un/unfull | a/after | dr/duprecord | du'|'dupuniq | da/dupafter"
        echo "使用方法： $0 全目录记录 | 去重并记录 | 重复文件分离 | 打开目录 | 未满 | 展示重复 | 去重后记录 | 去重后再去重 | 去重后展示重复"
    ;;
esac
