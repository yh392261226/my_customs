#!/bin/bash
####################################
##  描    述：vim 配置文件的更替脚本
##  使用方法：vimc
##  时    间：2016-06-08
##	每套配置的外层文件夹
##	1:都需要放在$MYRUNTIME下以
##	2:名称_vimfiles形式存在
##  3:每个配置的文件夹里，
##	  需要保证含有的几个文件：
##    .vim 或 vim
##    .vimrc 或 vimrc
##    fromurl
##	4:如果需要将文件夹内的
##	  .vim或vim或文件夹直接软连接为~/.vim_runtime 需要在配置文件夹内增加linktorun文件 文件内容如下：
##                      fromdir=$MYRUNTIME/newvim_vimfiles
##                      todir=$HOME/.vim_runtime_newvim
##
####################################
MYRUNTIME=$(cat ~/.myruntime)
MARKFILE=$MYRUNTIME/tools/m_vim
CURCONFIG=$HOME/.vimrc
CURGCONFIG=$HOME/.gvimrc
CURCONFIGFILE=$HOME/.vim
#配置文件地址
CONFIGSPATH=$MYRUNTIME
#文件夹后缀名
EXT=_vimfiles
#来源网址记录文件名称
FROMURL=fromurl

##删除已存在的配置软连接
UnSymlink() {
    echo "" > $MARKFILE
    needdel=( #需要删除的数组列表
        "$HOME/.vimrc.bundles"
        "$HOME/.vimrc.bundle"
        "$HOME/.vimrc.local"
        "$HOME/.vimrc.before.local"
        "$HOME/.vimrc.bundles.local"
        "$HOME/.vimrc.local.before"
        "$HOME/.vim"
        "$HOME/.vimrc"
        "$HOME/.ctags"
        "$HOME/.gvimrc"
        "$HOME/.jsbeautifyrc"
        "$HOME/.jscsrc"
        "$HOME/.jshintrc"
        "$HOME/rc"
        "$HOME/.vimrc.user.before"
        "$HOME/.vimrc.user.after"
        "$HOME/.vimrc.user.install"
        "$HOME/.gtkrc-2.0.mine"
        "$HOME/.vimrc_experiments"
        "$HOME/.gvimrc.before"
        "$HOME/.vimrc.before"
        "$HOME/.gvimrc.after"
        "$HOME/.vimrc.after"
        "$HOME/.vimrc.first"
        "$HOME/.vimrc.last"
        "$HOME/.vimrc.plugins"
        "/tmp/vimrc_human/"  #针对配置bootleq
        )
    for file in ${needdel[*]}; do
        if [ -f $file ] || [ -d $file ]; then   #如果存在就删除
            rm -rf $file
        fi
    done
# "$HOME/.vim_runtime" "$HOME/.spf13-vim-3" "$HOME/.oh-my-vim"  这三个不要清理  否则不好往回弄
}

##软连接配置
Symlink() {
    id=$1
    configs=($(ls $CONFIGSPATH|grep "$EXT"))
    choose=$CONFIGSPATH/${configs[$id]}
	
	#如果被选配置文件夹中存在set_to_my_symlink文件 则直接执行set_to_my_symlink 不往下走
	if [ -f $choose/set_to_my_symlink ]; then
		sh $choose/set_to_my_symlink
	else
        #软连接.vimrc 先用.vimrc 再找vimrc 最后找_vimrc 不要改动
        if [ -f $choose/.vimrc ]; then
            ln -sf $choose/.vimrc $CURCONFIG
        elif [ -f $choose/vimrc ]; then
            ln -sf $choose/vimrc $CURCONFIG
        elif [ -f $choose/_vimrc ]; then
            ln -sf $choose/_vimrc $CURCONFIG
        fi

        #软连接.gvimrc
        if [ -f $choose/gvimrc ]; then
            ln -sf $choose/gvimrc $CURGCONFIG
        elif [ -f $choose/.gvimrc ]; then
            ln -sf $choose/.gvimrc $CURGCONFIG
        elif [ -f $choose/_gvimrc ]; then
            ln -sf $choose/_gvimrc $CURGCONFIG
        elif [ -f $choose/vimrc ]; then
            ln -sf $choose/vimrc $CURCONFIG
        elif [ -f $choose/.vimrc ]; then
            ln -sf $choose/.vimrc $CURCONFIG
        fi

        #如果文件夹里含有linktorun文件则按照linktorun中的fromdir和todir来做软连接 如果需要创建目录就增加mdir变量
        if [ -f $choose/linktorun ]; then
            . $choose/linktorun
            if [ "" != "$fromdir" ] && [ "" != "$todir" ]; then
                if [ ! -d $mdir ]; then
                  mkdir -p $mdir
                fi
                ln -sf $fromdir $todir
                ln -sf $fromdir $CURCONFIGFILE
            fi
        else
            #软连接.vim
            if [ -d $choose/.vim ]; then
                ln -sf $choose/.vim $CURCONFIGFILE
            elif [ -d $choose/vim ]; then
                ln -sf $choose/vim $CURCONFIGFILE
            else
                ln -sf $choose $CURCONFIGFILE
            fi
    	fi

        #软连接vimrc.bundles
        if [ -f $choose/.vimrc.bundles ]; then
            ln -sf $choose/.vimrc.bundles $HOME/.vimrc.bundles
        elif [ -f $choose/vimrc.bundles ]; then
            ln -sf $choose/vimrc.bundles $HOME/.vimrc.bundles
        else
            :
        fi

        #软连接vimrc.bundle
        if [ -f $choose/.vimrc.bundle ]; then
            ln -sf $choose/.vimrc.bundle $HOME/.vimrc.bundle
        elif [ -f $choose/vimrc.bundle ]; then
            ln -sf $choose/vimrc.bundle $HOME/.vimrc.bundle
        else
            :
        fi

        #软连接vimrc.plugins
        if [ -f $choose/.vimrc.plugins ]; then
            ln -sf $choose/.vimrc.plugins $HOME/.vimrc.plugins
        elif [ -f $choose/vimrc.plugins ]; then
            ln -sf $choose/vimrc.plugins $HOME/.vimrc.plugins
        else
            :
        fi

        #软连接vimrc.before
        if [ -f $choose/.vimrc.before ]; then
            ln -sf $choose/.vimrc.before $HOME/.vimrc.before
        elif [ -f $choose/vimrc.before ]; then
            ln -sf $choose/vimrc.before $HOME/.vimrc.before
        else
            :
        fi

        #软连接gvimrc.before
        if [ -f $choose/.gvimrc.before ]; then
            ln -sf $choose/.gvimrc.before $HOME/.gvimrc.before
        elif [ -f $choose/gvimrc.before ]; then
            ln -sf $choose/gvimrc.before $HOME/.gvimrc.before
        elif [ -f $choose/.vimrc.before ]; then
            ln -sf $choose/.vimrc.before $HOME/.gvimrc.before
        elif [ -f $choose/vimrc.before ]; then
            ln -sf $choose/vimrc.before $HOME/.gvimrc.before
        fi

        #软连接vimrc.after
        if [ -f $choose/.vimrc.after ]; then
            ln -sf $choose/.vimrc.after $HOME/.vimrc.after
        elif [ -f $choose/vimrc.after ]; then
            ln -sf $choose/vimrc.after $HOME/.vimrc.after
        else
            :
        fi

        #软连接gvimrc.after
        if [ -f $choose/.gvimrc.after ]; then
            ln -sf $choose/.gvimrc.after $HOME/.gvimrc.after
        elif [ -f $choose/gvimrc.after ]; then
            ln -sf $choose/gvimrc.after $HOME/.gvimrc.after
        elif [ -f $choose/.vimrc.after ]; then
            ln -sf $choose/.vimrc.after $HOME/.gvimrc.after
        elif [ -f $choose/vimrc.after ]; then
            ln -sf $choose/vimrc.after $HOME/.gvimrc.after
        fi

        #软连接vimrc_experiments
        if [ -f $choose/.vimrc_experiments ]; then
            ln -sf $choose/.vimrc_experiments $HOME/.vimrc_experiments
        elif [ -f $choose/vimrc_experiments ]; then
            ln -sf $choose/vimrc_experiments $HOME/.vimrc_experiments
        else
            :
        fi

        #软连接jsbeautifyrc
        if [ -f $choose/.jsbeautifyrc ]; then
            ln -sf $choose/.jsbeautifyrc $HOME/.jsbeautifyrc
        elif [ -f $choose/jsbeautifyrc ]; then
            ln -sf $choose/jsbeautifyrc $HOME/.jsbeautifyrc
        else
            :
        fi

        #软连接jscsrc
        if [ -f $choose/.jscsrc ]; then
            ln -sf $choose/.jscsrc $HOME/.jscsrc
        elif [ -f $choose/jscsrc ]; then
            ln -sf $choose/jscsrc $HOME/.jscsrc
        else
            :
        fi

        #软连接jshintrc
        if [ -f $choose/.jshintrc ]; then
            ln -sf $choose/.jshintrc $HOME/.jshintrc
        elif [ -f $choose/jshintrc ]; then
            ln -sf $choose/jshintrc $HOME/.jshintrc
        else
            :
        fi

        #软连接vimrc.local
        if [ -f $choose/.vimrc.local ]; then
            ln -sf $choose/.vimrc.local $HOME/.vimrc.local
        elif [ -f $choose/vimrc.local ]; then
            ln -sf $choose/vimrc.local $HOME/.vimrc.local
        else
            :
        fi

        #软连接vimrc.user.before
        if [ -f $choose/.vimrc.user.before ]; then
            ln -sf $choose/.vimrc.user.before $HOME/.vimrc.user.before
        elif [ -f $choose/vimrc.user.before ]; then
            ln -sf $choose/vimrc.user.before $HOME/.vimrc.user.before
        else
            :
        fi

        #软连接vimrc.user.install
        if [ -f $choose/.vimrc.user.install ]; then
            ln -sf $choose/.vimrc.user.install $HOME/.vimrc.user.install
        elif [ -f $choose/vimrc.user.install ]; then
            ln -sf $choose/vimrc.user.install $HOME/.vimrc.user.install
        else
            :
        fi

        #软连接vimrc.user.after
        if [ -f $choose/.vimrc.user.after ]; then
            ln -sf $choose/.vimrc.user.after $HOME/.vimrc.user.after
        elif [ -f $choose/vimrc.user.after ]; then
            ln -sf $choose/vimrc.user.after $HOME/.vimrc.user.after
        else
            :
        fi

        #软连接vimrc.first
        if [ -f $choose/.vimrc.first ]; then
            ln -sf $choose/.vimrc.first $HOME/.vimrc.first
        elif [ -f $choose/vimrc.first ]; then
            ln -sf $choose/vimrc.first $HOME/.vimrc.first
        else
            :
        fi

        #软连接vimrc.last
        if [ -f $choose/.vimrc.last ]; then
            ln -sf $choose/.vimrc.last $HOME/.vimrc.last
        elif [ -f $choose/vimrc.last ]; then
            ln -sf $choose/vimrc.last $HOME/.vimrc.last
        else
            :
        fi

        #软连接gtkrc-2.0.mine
        if [ -f $choose/.gtkrc-2.0.mine ]; then
            ln -sf $choose/.gtkrc-2.0.mine $HOME/.gtkrc-2.0.mine
        elif [ -f $choose/gtkrc-2.0.mine ]; then
            ln -sf $choose/gtkrc-2.0.mine $HOME/.gtkrc-2.0.mine
        else
            :
        fi

        #软连接editorconfig
        if [ -f $choose/.editorconfig ]; then
            ln -sf $choose/.editorconfig $HOME/.editorconfig
        elif [ -f $choose/editorconfig ]; then
            ln -sf $choose/editorconfig $HOME/.editorconfig
        else
            :
        fi

        #软连接.editrc
        if [ -f $choose/.editrc ]; then
            ln -sf $choose/.editrc $HOME/.editrc
        elif [ -f $choose/editrc ]; then
            ln -sf $choose/editrc $HOME/editrc
        else
            :
        fi
    fi
    echo $(basename $choose | awk -F "$EXT" '{print $1}') > $MARKFILE
}

##获取版本
CheckCurVersion() {
    if [ ! -f $MARKFILE ]; then
        echo "Config mark file does not exists!";exit 1;
    fi
    name=$(cat $MARKFILE)
    if [ "" = "$name" ]; then
        echo "Unknow config file!";exit 1;
    fi
    echo "Current Config：$name"
    echo "Source From：$(cat $CONFIGSPATH/${name}$EXT/$FROMURL)"
    exit 0
}

##更换版本操作
ChangeConfig() {
    case "$1" in
        "v"|"ver"|"version")
            CheckCurVersion
            ;;
        *)
            #strornum=$(echo $1| awk '{print($0~/^[-]?([0-9])+[.]?([0-9])+$/)?"number":"string"}') #验证参数是不是数字 这个有些变态10以内的 需要这样的形式 01 02
            strornum=$([[ "$1" =~ ^[0-9]+$  ]] && echo "number" || echo "string")
            if [ "$strornum" != "number" ] && [ "" != "$1" ]; then
                echo "Wrong para!";exit 1;
            fi
            if [ -d $CONFIGSPATH ]; then #验证配置目录是否存在
                configs=($(ls $CONFIGSPATH|grep "$EXT"))
                if [ "${#configs[*]}" -gt "0" ]; then #验证是否有配置文件
                    if [ "" != "$1" ] && [ "$1" -ge "0" ] && [ "$1" -lt "${#configs[*]}" ]; then #验证是否有参数传递
                        UnSymlink
                        Symlink $1
                        CheckCurVersion
                    else #列出可选配置
                        echo "Input the NO.：";
                        posit=0
                        for file in ${configs[*]}; do
                          echo $posit "：" $(basename ${file} | awk -F "$EXT" '{print $1}');
                          ((posit+=1))
                        done
                        read id #读取用户自选配置
                        ChangeConfig $id
                    fi
                else
                    echo "No config can be found！！！";
                    exit 1
                fi
            else
              echo "The path for configs does not exists！！！";
                exit 1
            fi
            ;;
    esac
}

##直接给参数选择
if [ "" != "$1" ]; then
	ChangeConfig $1
else
    ChangeConfig
fi
