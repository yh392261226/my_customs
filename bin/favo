#!/usr/bin/env bash
########################################
## Desc: 图片收藏管理脚本 (优化版)
## Author: 杨浩
########################################

# --------------------------
# 环境配置
# --------------------------
MYRUNTIME=$(cat ${HOME}/.myruntime)
RUNTIME_DIR="${MYRUNTIME}/tools"
curmark=$(basename $(readlink $MYRUNTIME/pictures))
FAVO_MARK="${RUNTIME_DIR}/m_favorate_${curmark}"
FAVO_HTML="${RUNTIME_DIR}/m_favorate_${curmark}.html"
CURRENT_PIC="${RUNTIME_DIR}/current_picturename"
TMPFILE=/tmp/favo_tmp
DEFAULT_BROWSER="/Applications/Safari.app"
BACKUP_BROWSER="/Applications/Google Chrome.app"
THUMB_SIZE="40" # 默认缩略图尺寸

# --------------------------
# 初始化检查
# --------------------------
init_check() {
	[[ ! -d "${RUNTIME_DIR}" ]] && mkdir -p "${RUNTIME_DIR}"

	local required_commands=("trash" "fzf" "viu")
	for cmd in "${required_commands[@]}"; do
		if ! command -v "${cmd}" &>/dev/null; then
			echo "错误: 缺少依赖命令 ${cmd}"
			exit 1
		fi
	done

	[[ ! -f "${CURRENT_PIC}" ]] && touch "${CURRENT_PIC}"
	[[ ! -f "${FAVO_MARK}" ]] && touch "${FAVO_MARK}"
}

# --------------------------
# 核心功能
# --------------------------

# 获取当前图片路径
get_current_pic() {
	[[ -f "${CURRENT_PIC}" ]] && cat "${CURRENT_PIC}" || echo ""
}

# 显示缩略图
show_thumbnail() {
	local img_path="${1:-$(get_current_pic)}"
	[[ -z "${img_path}" ]] && return 1

	viu --width "${THUMB_SIZE}" "${img_path}"
}

# 添加收藏
add_favorite() {
	local target_pic="${1:-$(get_current_pic)}"
	[[ -z "${target_pic}" ]] && return 1

	if grep -qF "${target_pic}" "${FAVO_MARK}"; then
		echo "图片已存在收藏!"
		return 1
	fi

	echo "${target_pic}" >>"${FAVO_MARK}" && sort -u "${FAVO_MARK}" -o "${FAVO_MARK}"
	echo "成功添加收藏!"
}

# 删除收藏
remove_favorite() {
	local target_id="${1}"
	if [[ -z "${target_id}" ]]; then
		interactive_remove
	else
		remove_by_id "${target_id}"
	fi
}

interactive_remove() {
	local header="🖼️ 图片收藏 (共 $(wc -l <"${FAVO_MARK}") 张)"
	local preview_cmd='viu --width 100 $(echo {} | awk -F"│" "{print \$2}")'
	local selected=$(nl -w2 -s' │ ' "${FAVO_MARK}" | fzf $FZF_CUSTOM_PARAMS --header="选择要删除的图片 (按ESC退出)" +m \
		--delimiter='│' \
		--border-label="╢ Favorate Images ╟" \
		--ghost="Type your search words ┈┉ " \
		--preview-window="right,50%,border-left,<50(up,30%,border-bottom),nohidden,~3" \
		--bind "ctrl-d:execute(echo {} | awk -F'│' '{print \$2}' | xargs trash)+abort" \
		--bind "ctrl-o:execute(echo {} | awk -F'│' '{print \$2}' | xargs open -R)+abort" \
		--header "${header}" \
		--preview "${preview_cmd} ")
	[[ -z "${selected}" ]] && return
	selected=$(basename $(echo "$selected" | awk -F'│' '{print $2}'))
	cat ${FAVO_MARK} | grep -v "$selected" >$TMPFILE
	[[ -f $TMPFILE ]] && rm -f ${FAVO_MARK} && mv $TMPFILE ${FAVO_MARK}
}

# --------------------------
# 交互式列表 (带预览)
# --------------------------
list_favorites() {
	[[ ! -s "${FAVO_MARK}" ]] && echo "收藏列表为空" && return 1

	local header="🖼️ 图片收藏 (共 $(wc -l <"${FAVO_MARK}") 张)"
	local preview_cmd='viu --width 100 $(echo {} | awk -F"│" "{print \$2}")'

	# 构建带序号的列表
	local selected=$(nl -w2 -s' │ ' "${FAVO_MARK}" |
		fzf $FZF_CUSTOM_PARAMS +m --delimiter='│' \
			--border-label="╢ Favorate Images ╟" \
			--ghost="Type your search words ┈┉ " \
			--preview-window="right,50%,border-left,<50(up,30%,border-bottom),nohidden,~3" \
			--preview "${preview_cmd} " \
			--header "${header}" \
			--reverse \
			--bind "ctrl-d:execute(echo {} | awk -F'│' '{print \$2}' | xargs trash)+abort" \
			--bind "ctrl-o:execute(echo {} | awk -F'│' '{print \$2}' | xargs open -R)+abort" \
			--bind="ctrl-u:become(${MYRUNTIME}/customs/bin/_actioner {2})" \
			--prompt="❯ 选择图片 (CTRL+D删除 CTRL+O定位) > " \
			--ansi)
	[[ -z "${selected}" ]] && return
	selected=$(echo "$selected" | awk -F'│' '{print $2}')
	set_background $selected
}

generate_html() {
	[[ ! -s "${FAVO_MARK}" ]] && return 1

	cat <<HTML_HEAD >"${FAVO_HTML}"
<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>图片收藏</title>
  <style>
    .gallery {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 15px;
      padding: 20px;
    }
    .img-container {
      overflow: hidden;
      border-radius: 8px;
      transition: transform 0.3s ease;
    }
    img {
      width: 100%;
      height: 200px;
      object-fit: cover;
      transition: all 0.3s ease;
      cursor: zoom-in;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    img:hover {
      transform: scale(1.1);
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      z-index: 2;
    }
    body {
      background-color: #f5f5f5;
      margin: 0;
      font-family: Arial, sans-serif;
    }
    h1 {
      text-align: center;
      color: #333;
      padding: 20px;
    }
    .modal {
      display: none;
      position: fixed;
      z-index: 999;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.9);
      cursor: zoom-out;
    }
    .modal-content {
      position: absolute;
      top: 10%;
      left: 20%;
      right: 20%;
      bottom: 15%;
      max-width: 1200px;
      max-height: 675px;
      object-fit: contain;
      box-shadow: 0 0 30px rgba(255,255,255,0.2);
      border-radius: 4px;
      width: 900px;
      height: 506px;
    }
    .modal-buttons {
      position: absolute;
      bottom: 10px;
      width: 100%;
      text-align: center;
      padding: 10px 0;
    }
    .modal-btn {
      padding: 8px 20px;
      margin: 0 10px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      transition: all 0.2s;
      min-width: 100px;
    }
    .detail-btn {
      background-color: #4CAF50;
      color: white;
    }
    .copy-btn {
      background-color: #2196F3;
      color: white;
    }
    .close-btn {
      background-color: #f44336;
      color: white;
    }
    .modal-btn:hover {
      opacity: 0.9;
      transform: translateY(-2px);
    }
    .toast {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      background-color: rgba(0, 0, 0, 0.85);
      color: white;
      padding: 12px 24px;
      border-radius: 4px;
      z-index: 1000;
      display: none;
      font-size: 16px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      animation: fadeInOut 2.5s ease-in-out;
    }
    @keyframes fadeInOut {
      0% { opacity: 0; top: 10px; }
      15% { opacity: 1; top: 20px; }
      85% { opacity: 1; top: 20px; }
      100% { opacity: 0; top: 10px; }
    }
    .filename-display {
      position: absolute;
      bottom: 60px;
      left: 0;
      right: 0;
      text-align: center;
      color: #fff;
      font-size: 16px;
      padding: 5px;
      background: rgba(0,0,0,0.5);
      border-radius: 4px;
      margin: 0 20%;
    }
  </style>
  <script>
    function openModal(imgSrc, rawPath) {
      const modal = document.createElement('div');
      modal.className = 'modal';
      
      // 提取文件名用于显示
      const fileName = rawPath.split('/').pop() || '未命名图片';
      
      modal.innerHTML = \`
        <img class="modal-content" src="\${imgSrc}" onclick="event.stopPropagation()">
        <div class="filename-display">\${fileName}</div>
        <div class="modal-buttons">
          <button class="modal-btn detail-btn" onclick="window.open('\${imgSrc}', '_blank'); event.stopPropagation()">查看详情</button>
          <button class="modal-btn copy-btn" onclick="copyImageUrl('\${rawPath.replace(/'/g, "\\\\'")}'); event.stopPropagation()">复制地址</button>
          <button class="modal-btn close-btn" onclick="closeModal(); event.stopPropagation()">关闭</button>
        </div>
      \`;
      modal.onclick = closeModal;
      document.body.appendChild(modal);
      modal.style.display = "block";
      document.body.style.overflow = 'hidden'; // 防止背景滚动
    }
    
    function closeModal() {
      const modal = document.querySelector('.modal');
      if(modal) {
        modal.remove();
        document.body.style.overflow = ''; // 恢复滚动
      }
    }
    
    // 复制图片地址功能
    function copyImageUrl(path) {
      // 优先使用新的 Clipboard API
      if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(path)
          .then(() => showToast('✓ 路径已复制到剪贴板'))
          .catch(err => {
            console.error('复制失败:', err);
            showToast('复制失败，请手动复制');
          });
      } 
      // 降级方案：使用传统方法
      else {
        const textArea = document.createElement('textarea');
        textArea.value = path;
        textArea.style.position = 'fixed';
        textArea.style.opacity = 0;
        document.body.appendChild(textArea);
        textArea.select();
        
        try {
          const successful = document.execCommand('copy');
          showToast(successful ? '✓ 路径已复制到剪贴板' : '复制失败，请手动复制');
        } catch (err) {
          showToast('复制失败: ' + err);
        }
        document.body.removeChild(textArea);
      }
    }
    
    // 显示操作提示
    function showToast(message) {
      // 移除现有提示
      const existingToast = document.querySelector('.toast');
      if (existingToast) existingToast.remove();
      
      // 创建新提示
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.textContent = message;
      document.body.appendChild(toast);
      
      // 自动移除提示
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 2500);
    }
    
    // 支持ESC键关闭模态框
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        closeModal();
      }
    });
  </script>
</head>
<body>
  <h1>我的图片收藏 ($(wc -l <"${FAVO_MARK}"))</h1>
  <div class="gallery">
HTML_HEAD

	while IFS= read -r img; do
		if [ -f "$img" ]; then
			# 处理特殊字符：HTML转义
			html_safe_img=$(printf '%s' "$img" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g')
			
			# 生成带原始路径的调用
			echo "<div class=\"img-container\"><img src=\"file://${html_safe_img}\" alt=\"${img##*/}\" onclick=\"openModal('file://${html_safe_img}', '${html_safe_img}')\"></div>" >>"${FAVO_HTML}"
		fi
	done <"${FAVO_MARK}"

	echo "</div></body></html>" >>"${FAVO_HTML}"
	open "${FAVO_HTML}" -a "${DEFAULT_BROWSER:-${BACKUP_BROWSER}}" --args --allow-file-access-from-files
}

# 设置背景
set_background() {
	local img_path="${1}"
	[[ ! -f "${img_path}" ]] && return 1

	echo "${img_path}" >"${CURRENT_PIC}"
	osascript <<APPLESCRIPT
  tell application "iTerm"
    tell current window
      tell current session
        set background image to "${img_path}"
      end tell
    end tell
  end tell
APPLESCRIPT
}

# --------------------------
# 辅助功能
# --------------------------

# 随机切换
random_pic() {
	local total=$(wc -l <"${FAVO_MARK}")
	[[ "${total}" -eq 0 ]] && return 1
	local rand_num=$((RANDOM % total))
	echo "Random Change Background Done ."
	set_background "$(sed -n "${rand_num}p" "${FAVO_MARK}")"
}

# 文件定位
locate_file() {
	open -R "$(get_current_pic)"
}

# 模糊搜索
fuzzy_search() {
	local keyword="${1}"
	[[ -z "${keyword}" ]] && read -p "输入搜索关键词: " keyword
	[[ -z "${keyword}" ]] && return
	local header="🖼️ 图片收藏 (共 $(wc -l <"${FAVO_MARK}") 张)"
	local preview_cmd='viu --width 100 $(echo {} | awk -F"│" "{print \$2}")'
	local selected=$(nl -w2 -s' │ ' "${FAVO_MARK}" | grep "${keyword}" | fzf $FZF_CUSTOM_PARAMS +m --delimiter='│' \
		--border-label="╢ Favorate Images ╟" \
		--ghost="Type your search words ┈┉ " \
		--preview-window="right,50%,border-left,<50(up,30%,border-bottom),nohidden,~3" \
		--preview "${preview_cmd} " \
		--header "${header}" \
		--reverse \
		--bind "ctrl-d:execute(echo {} | awk -F'│' '{print \$2}' | xargs trash)+abort" \
		--bind "ctrl-o:execute(echo {} | awk -F'│' '{print \$2}' | xargs open -R)+abort" \
		--prompt="❯ 选择图片 (CTRL+D删除 CTRL+O定位) > " \
		--ansi)
	[[ -z "${selected}" ]] && return
	selected=$(echo "$selected" | awk -F'│' '{print $2}')
	# echo $selected; return
	set_background $selected
}

# 去除不存在的文件
rebuild_favorite() {
	echo "Make sure your choice: y|Y|yes|YES/|n|N|no|NO"
	read choice
	if [ "$choice" = "yes" ] || [ "$choice" = "y" ] || [ "$choice" = "Y" ] || [ "$choice" = "YES" ]; then
		favolists=$(cat ${FAVO_MARK})
		favo_array[0]=''
		posit=0
		if [ -f $TMPFILE ]; then
			rm -f $TMPFILE
		fi
		for i in ${favolists[*]}; do
			if [ "$i" != "" ] && [ -f $i ]; then
				echo $i >>$TMPFILE
			fi
			((posit += 1))
		done

		if [ -f $TMPFILE ]; then
			mv $TMPFILE ${FAVO_MARK}
		fi
		if [ "$?" = "0" ]; then
			echo "Done ..."
			return 0
		else
			echo "Failure ..."
			return 1
		fi
	else
		return 1
	fi
}

# 表格形式展示
table_favorate() {
	# 配置参数
	local cols=5        # 每行显示列数
	local max_width=300 # 最大显示宽度（像素）
	local char_width=6  # 每个字符的像素宽度估算值

	# 计算实际显示宽度
	local term_cols=$(tput cols)
	local max_term_width=$((term_cols * char_width - 20))
	local display_width=$((max_width < max_term_width ? max_width : max_term_width))

	# 初始化行缓冲
	local count=0
	local -a line_buffer
	local -a name_buffer

	# 遍历收藏文件
	while IFS= read -r file; do
		# 验证文件存在性
		[[ ! -f "$file" ]] && continue

		# 获取文件名（处理特殊字符）
		local filename=$(basename "$file" | sed 's/[\"\\]//g')

		# 生成图片转义序列（兼容macOS base64）
		local img_data=$(base64 --encode "$file" 2>/dev/null || base64 "$file" | tr -d '\n')
		local filesize=$(wc -c <"$file" | tr -d ' ')

		# 构建转义序列（关键：末尾不换行）
		local esc_seq="\033]1337;File=name=${filename};size=${filesize};inline=1;width=${display_width}px;preserveAspectRatio=1:${img_data}\a"

		# 存入行缓冲
		line_buffer+=("$esc_seq")
		name_buffer+=("$filename")
		((count++))

		# 整行输出（关键点1：同一行图片连续输出）
		if ((count % cols == 0)); then
			# 输出图片行（关键点2：-ne参数+不换行）
			echo -ne "${line_buffer[@]}"

			# 输出文件名行（关键点3：精确计算占位）
			echo -en "\n\033[0m"
			local col_width=$((display_width / char_width + 2))
			printf "%-${col_width}s" "${name_buffer[@]}" |
				awk -v width=$col_width -v cols=$cols '
                    {
                        gsub(/ /, "  "); 
                        for(i=1; i<=cols; i++) {
                            printf "%-"width"s", substr($0, (i-1)*width+1, width)
                        }
                        print ""
                    }'
			echo

			# 清空缓冲
			line_buffer=()
			name_buffer=()
		fi
	done <"${FAVO_MARK}"

	# 处理剩余图片
	if ((${#line_buffer[@]} > 0)); then
		echo -ne "${line_buffer[@]}"
		echo -en "\n\033[0m"
		local col_width=$((display_width / char_width + 2))
		printf "%-${col_width}s" "${name_buffer[@]}" |
			awk -v width=$col_width -v cols=${#line_buffer[@]} '
                {
                    gsub(/ /, "  "); 
                    for(i=1; i<=cols; i++) {
                        printf "%-"width"s", substr($0, (i-1)*width+1, width)
                    }
                    print ""
                }'
		echo
	fi
}
# 使用示例：
# imgtable *.jpg *.png

# --------------------------
# 主程序
# --------------------------
main() {
	init_check

	case "${1}" in
	add | a) add_favorite "${2}" ;;
	remove | rm) remove_favorite "${2}" ;;
	list | l) list_favorites ;;
	html | h) generate_html ;;
	set) set_background "${2}" ;;
	random | r) random_pic ;;
	locate | lo) locate_file ;;
	search | s) fuzzy_search "${2}" ;;
	thumb | t) show_thumbnail "${2}" ;;
	rebuild | re) rebuild_favorite "${2}" ;;
	table | ta) table_favorate "${@}" ;;
	*)
		echo "╭──────────────────────────────────────────────────────────────────────────────────────── -- - ･
│ 使用方法: ${0##*/} [command(可用命令)]
╰──────────────────────────────────────────────────────────────────────────────────────── -- - ･" | lolcat -f -F 0.05
echo "╭──────────────────────────────────────────────────────────────────────────────────────── -- - ･
│ 使用方法: ${0##*/} [command]
│ command(可用命令):
│  add    / a   添加当前背景到收藏
│  remove / rm  删除收藏
│  list   / l   显示收藏列表
│  html   / h   生成HTML相册
│  set          设置指定图片为背景
│  random / r   随机切换背景
│  locate / lo  在Finder中定位文件
│  search / s   模糊搜索图片
│  thumb  / t   显示缩略图
│  rebuild / re 重建收藏列表(去除已经不存在的文件)
│  table / ta   表格形式展示图片
╰──────────────────────────────────────────────────────────────────────────────────────── -- - ･" | lolcat -f -F 0.05
		;;
	esac
}

main "$@"
