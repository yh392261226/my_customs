# Describe：直接操作文件进行，删除、复制、移动、重命名、压缩、解压等操作

# 删除
actioner_delete() {
    # 保存并重置终端状态
    original_stty=$(stty -g)
    stty sane
    rm -rf "$1"
    # 恢复终端状态
    stty "$original_stty"
    return
}

# 复制
actioner_copy() {
    old="$1"
    # 保存并重置终端状态
    original_stty=$(stty -g)
    stty sane
    # 读取输入
    read -ep "Type Copy [ ${old} ] To : " new < /dev/tty
    cp -R "$old" "$new"
    # 恢复终端状态
    stty "$original_stty"
    return
}

# 移动
actioner_move() {
    old="$1"
    # 保存并重置终端状态
    original_stty=$(stty -g)
    stty sane
    read -p "Type Move [ ${old} ] To : " new < /dev/tty
    mv -i "$old" "$new"
    # 恢复终端状态
    stty "$original_stty"
    return
}

# 重命名
actioner_rename() {
    old="$1"
    # 保存并重置终端状态
    original_stty=$(stty -g)
    stty sane
    read -p "Type Rename [ ${old} ] To : " new < /dev/tty
    mv -i "$old" "$new"
    # 恢复终端状态
    stty "$original_stty"
    return
}

# 压缩
actioner_archive() {
    old="$1"
    # 检查输入参数
    if [[ -z "$old" ]]; then
        echo "Error: No source file or directory specified."
        return 1
    fi
    # 保存并重置终端状态
    original_stty=$(stty -g)
    stty sane
    read -p "Type Archive [ ${old} ] To : " new < /dev/tty
    # 恢复终端状态
    stty "$original_stty"
    if [[ -z "$new" ]]; then
        echo "Error: No target archive name specified."
        return 1
    fi
    # 检查源文件或目录是否存在
    if [[ ! -e "$old" ]]; then
        echo "Error: Source file or directory '$old' does not exist."
        return 1
    fi
    # 根据目标文件扩展名选择压缩命令
    case "$new" in
        *.tar.bz2) tar cvjf "$new" "$old" ;;
        *.tar.gz)  tar cvzf "$new" "$old" ;;
        *.tar.xz)  tar cvJf "$new" "$old" ;;
        *.tar)     tar cvf "$new" "$old" ;;
        *.tbz2|*.tbz)    tar cvjf "$new" "$old" ;;
        *.tgz)     tar cvzf "$new" "$old" ;;
        *.zip)     zip -r "$new" "$old" ;;
        *.rar)     rar a "$new" "$old" ;;
        *.7z)      7z a "$new" "$old" ;;
        *.xz)      xz -c "$old" > "$new" ;;
        *.gz)      gzip -c "$old" > "$new" ;;
        *.bz2)     bzip2 -c "$old" > "$new" ;;
        *.lzma)    lzma -c "$old" > "$new" ;;
        *)         echo "Error: Unknown archive method for '$new'"; return 1 ;;
    esac
    return
}

# 解压
actioner_extract() {
    # 检查文件是否存在
    [[ -z "$1" ]] && echo "Error: No file specified" && return 1
    [[ ! -f "$1" ]] && echo "Error: File '$1' does not exist" && return 1

    old="$1"

    # 保存并重置终端状态
    original_stty=$(stty -g)
    stty sane
    read -p "Type Extract [ ${old} ] To : " new < /dev/tty
    # 恢复终端状态
    stty "$original_stty"

    # 如果用户未输入目标路径，则根据文件扩展名生成默认路径
    if [[ -z "$new" ]]; then
        case "$old" in
            *.tar.bz2|*.tar.gz|*.tar.xz)
                new="${old%.*.*}" ;;
            *.lzma|*.bz2|*.rar|*.gz|*.tar|*.tbz|*.tbz2|*.tgz|*.zip|*.Z|*.7z|*.xz|*.exe)
                new="${old%.*}" ;;
            *)
                echo "Error: Unknown file extension for '$old'"
                return 1 ;;
        esac
    fi

    # 创建目标目录（如果不存在）
    mkdir -p "$new" || {
        echo "Error: Failed to create directory '$new'"
        return 1
    }

    # 根据文件扩展名选择解压方法
    case "$old" in
        *.tar.bz2)  tar xvjf "$old" -C "$new" ;;
        *.tar.gz)   tar xvzf "$old" -C "$new" ;;
        *.tar.xz)   tar xvJf "$old" -C "$new" ;;
        *.lzma)     xz --format=lzma -dc "$old" > "$new/$(basename "${old%.lzma}")" ;;
        *.bz2)      bunzip2 -c "$old" > "$new/$(basename "${old%.bz2}")" ;;
        *.rar)      unrar x "$old" "$new/" ;;
        *.gz)       gunzip -c "$old" > "$new/$(basename "${old%.gz}")" ;;
        *.tar)      tar xvf "$old" -C "$new" ;;
        *.tbz2|*.tbz)     tar xvjf "$old" -C "$new" ;;
        *.tgz)      tar xvzf "$old" -C "$new" ;;
        *.zip)      unzip "$old" -d "$new" ;;
        *.Z)        zcat "$old" > "$new/$(basename "${old%.Z}")" ;;
        *.7z)       7z x "$old" -o"$new" ;;
        *.xz)       unxz -c "$old" > "$new/$(basename "${old%.xz}")" ;;
        *.exe)      cabextract -d "$new" "$old" ;;
        *)          echo "Error: Unknown archive method for '$old'" ;;
    esac
    return 0
}

# 查看压缩包内容
actioner_archive_peek() {
    # 检查文件是否存在
    [[ -z "$1" ]] && echo "Error: No file specified" && return 1
    [[ ! -f "$1" ]] && echo "Error: File '$1' does not exist" && return 1
    old="$1"
    # 保存并重置终端状态
    original_stty=$(stty -g)
    stty sane
    # 根据文件扩展名选择查看压缩包内容
    case "$old" in
    # 多层压缩的 tar 包
    *.tar.bz2)   tar tvjf "$old" ;;                             # 查看 bzip2 压缩的 tar 包
    *.tar.gz)    tar tvzf "$old" ;;                             # 查看 gzip 压缩的 tar 包
    *.tar.xz)    tar tvJf "$old" ;;                             # 查看 xz 压缩的 tar 包（注意大写 J）
    # 单层压缩格式
    *.lzma)      lzma -dc "$old" | tar tvf - ;;                 # 查看 LZMA 压缩的 tar 包
    *.bz2)       bzip2 -l "$old" ;;                             # 显示 bzip2 文件元信息
    *.rar)       unrar l "$old" ;;                              # 列出 RAR 压缩包内容
    *.gz)        gunzip -l "$old" ;;                            # 显示 gzip 文件元信息
    *.tar)       tar tvf "$old" ;;                              # 查看未压缩的 tar 包
    # 变体压缩包
    *.tbz2)      tar tvjf "$old" ;;                             # .tbz2 本质是 tar.bz2
    *.tgz)       tar tvzf "$old" ;;                             # .tgz 本质是 tar.gz
    # 独立压缩格式
    *.zip)       unzip -l "$old" ;;                             # 列出 ZIP 压缩包内容
    *.7z)        7z l "$old" ;;                                 # 查看 7-Zip 压缩包内容
    *.xz)        xz -l "$old" ;;                                # 显示 xz 压缩文件元信息
    *.Z)         zcat "$old" | less ;;                          # 查看旧式 compress 压缩内容
    *.exe)       7z l "$old" ;;                                 # 查看自解压 exe 中的文件
    *)           echo "Error: Unknown archive method for '$old'" ;;
    esac
    # 恢复终端状态
    stty "$original_stty"
    return 0
}


function actioner() {
    [[ "" == "$1" ]] && return
    ([ ! -d $1 ] && [ ! -f $1 ]) && return
    local filepath="$1"
    local filelinenum=1

    if [ "$( echo $filepath | grep -o ':' | wc -l )" -ge "2" ]; then
        #// 带两个：：的是全文搜索得到的文件及行号
        filelinenum=$(echo "$filepath" | awk -F':' '{print $2}')
        filepath=$(echo "$filepath" | awk -F':' '{print $1}')
    fi

    local action=$(printf "%s\n" \
        "删除" \
        "复制" \
        "移动" \
        "重命名" \
        "查看压缩包内容" \
        "压缩" \
        "解压" \
        "Nvim编辑" \
        "Vim编辑" \
        "Code编辑" \
        "Bat查看" \
        "Cat查看" \
        "终端播放" \
        "打开文件位置" \
        "取消选择" | \
        fzf --header " 选择操作 " \
            --prompt "主菜单 ❯ " \
            --preview-window=up:30% \
            --preview "echo '请选择操作类型'" \
            --height=15% \
            --reverse)

    case $action in
        *删除*)    
            actioner_delete "$filepath" 
            break 1 && return 
            ;;
        *复制*)    
            actioner_copy "$filepath" 
            break 1 && return 
            ;;
        *移动*)    
            actioner_move "$filepath" 
            break 1 && return 
            ;;
        *重命名*)  
            actioner_rename "$filepath" 
            break 1 && return 
            ;;
        *查看压缩包内容*)
            actioner_archive_peek "$filepath" 
            break 1 && return
            ;;
        *压缩*)    
            actioner_archive "$filepath" 
            break 1 && return 
            ;;
        *解压*)    
            actioner_extract "$filepath" 
            break 1 && return 
            ;;
        *Nvim编辑*)    
            # 保存并重置终端状态
            original_stty=$(stty -g)
            stty sane
            nvim +$filelinenum "$filepath" > /dev/tty
            # 恢复终端状态
            stty "$original_stty"
            break 1 && return 
            ;;
        *Vim编辑*)    
            # 保存并重置终端状态
            original_stty=$(stty -g)
            stty sane
            vim +$filelinenum "$filepath" > /dev/tty
            # 恢复终端状态
            stty "$original_stty"
            break 1 && return 
            ;;
        *Code编辑*)    
            code --new-window --goto ${filepath}:${filelinenum}
            break 1 && return 
            ;;
        *Bat查看*)    
            bat --highlight-line="${filelinenum}" --theme=gruvbox-dark --style=full --color=always --pager=never "${filepath}" > /dev/tty
            break 1 && return 
            ;;
        *Cat查看*)
            if [ -f /opt/homebrew/bin/ccat ]; then
                /opt/homebrew/bin/ccat "$filepath" > /dev/tty
            else    
                cat "$filepath" > /dev/tty
            fi
            break 1 && return 
            ;;
        *终端播放*)    
            if command -v mpv > /dev/null; then
                mpv --vo=tct "$filepath" > /dev/tty
            else
                open $filepath
            fi
            break 1 && return 
            ;;
        *打开文件位置*)    
            /usr/bin/open -R "$filepath"
            break 1 && return 
            ;;
        *取消选择*) 
            break 1 && return 
            ;;
    esac
    echo "\n"
    echo "\n"
    return
}
# filepath="$@"
actioner "$@"