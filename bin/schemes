#!/bin/bash
##Desc:即时变更iterm的主题样式
##Author:杨浩
##Schemes can download from : https://github.com/mbadolato/iTerm2-Color-Schemes
##The PREVIEWCOMMAND is from : https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/tools/preview.rb

PREVIEWCOMMAND=$MYRUNTIME/customs/others/preview.rb
SCHEMESPATH=$MYRUNTIME/customs/others/schemes
SCHEMEMARKFILE=$MYRUNTIME/tools/m_scheme
SCHEMEFAVOFILE=${SCHEMEMARKFILE}_favo
SCHEMEFAVOTMPFILE=/tmp/scheme_favo_tmp
SCHEMELISTS=[]
FAVOARRAY=[]

#arrange schemes list to array
tmplists=$(ls ${SCHEMESPATH}/*|sed 's/ /\\ /g')
if [ "" != "$tmplists" ]; then
  tmpposit=0
  for schemes in $tmplists; do
    SCHEMELISTS[$tmpposit]=$schemes
    ((tmpposit+=1))
  done
else
  echo "Does not get any scheme !";
  exit 1
fi

#record the current scheme to mark file
_recordScheme() {
  #if does not exits $SCHEMEMARKFILE create it.
  if [ ! -f $SCHEMEMARKFILE ]; then
    touch $SCHEMEMARKFILE
  fi
  scheme=$1
  echo $scheme > $SCHEMEMARKFILE
}

#get the current scheme from mark file
_getScheme() {
  #if does not exits $SCHEMEMARKFILE create it.
  if [ ! -f $SCHEMEMARKFILE ]; then
    touch $SCHEMEMARKFILE
  fi
  echo $(cat $SCHEMEMARKFILE)
}

listSchemes() {
  posit=0
  echo "-----------------------------------------------------------------------"
  for i in ${SCHEMELISTS[*]}; do
    if [ -f $i ]; then
      name=$(basename $i)
      printf "%-5s%-5s%-60s%-30s\n" "|" " $posit" "|     $name" "|"
      ((posit+=1))
    fi
  done
  echo "-----------------------------------------------------------------------"
}

delScheme() {
  listSchemes
  echo "Which one do you want to delete?:";
  read number;
  if [ "$number" -lt "0" ] || [ "${SCHEMELISTS[$number]}" = "" ]; then
    echo "Your choice does not exists !"
    return 1
  else
    echo "trash $(basename ${SCHEMELISTS[$number]}| sed 's/.itermcolors//g')"
    if [ "${SCHEMELISTS[$number]}" = "$(_getScheme)" ]; then
      echo "" > $SCHEMEMARKFILE
    fi
    trash ${SCHEMELISTS[$number]}
  fi
  if [ "$?" = "0" ]; then
    echo "Delete Successful !"
    return 0
  else
    echo "Delete Failure !"
    return 1
  fi
}

truncateSchemes() {
  trash ${SCHEMESPATH}/*
  if [ "$?" = "0" ]; then
    echo "" > $SCHEMEMARKFILE
    echo "Truncate Successful !"
    return 0
  else
    echo "Truncate Failure !"
    return 1
  fi
}

choseScheme() {
  listSchemes
  echo "Which one do you want to chose?:";
  read number;
  if [ "$number" -lt "0" ] || [ "${SCHEMELISTS[$number]}" = "" ]; then
    echo "Your choice does not exists !"
    return 1
  else
    echo $(basename ${SCHEMELISTS[$number]}| sed 's/.itermcolors//g')
    _recordScheme ${SCHEMELISTS[$number]}
    $PREVIEWCOMMAND ${SCHEMELISTS[$number]}
  fi
  return 0
}

arrangeSchemes() {
  for loop in `ls -1 ${SCHEMESPATH} | tr ' '  '#'`
  do
      mv  "`echo $loop | sed 's/#/ /g' `"  "`echo $loop |sed 's/#//g' `"  2> /dev/null
  done
  echo "Done..."
}

randScheme() {
  rand=$(php -r "echo rand(0, ${#SCHEMELISTS[@]});")
  echo $(basename ${SCHEMELISTS[$rand]}| sed 's/.itermcolors//g')
  _recordScheme ${SCHEMELISTS[$rand]}
  $PREVIEWCOMMAND ${SCHEMELISTS[$rand]}
}

curScheme() {
  echo "Current scheme is : $(_getScheme)"
}

setCurScheme() {
  echo $(basename $(_getScheme)| sed 's/.itermcolors//g')
  $PREVIEWCOMMAND $(_getScheme)
}

addFavo() {
  if [ "" != "$1" ]; then
    scheme=$1
  else
    echo "Does not get what to add!"
    return 1
  fi
  if [ "" != "$(cat $SCHEMEFAVOFILE| grep $scheme)" ]; then
    echo "$(basename $scheme| sed 's/.itermcolors//g') already exits!"
    return 1
  fi
  echo $scheme >> $SCHEMEFAVOFILE
  echo "Done..."
}

delFavo() {
  if [ "" != "$1" ]; then
    scheme=$1
  else
    echo "Does not get which one to delete!"
    return 1
  fi
  cat $SCHEMEFAVOFILE| grep -v $scheme > $SCHEMEFAVOTMPFILE
  if [ -f $SCHEMEFAVOTMPFILE ]; then
    rm -f $SCHEMEFAVOFILE
    mv $SCHEMEFAVOTMPFILE $SCHEMEFAVOFILE
  fi
  echo "Done..."
}

truncateFavo() {
  if [ ! -f $SCHEMEFAVOFILE ]; then
    touch $SCHEMEFAVOFILE
  fi
  echo "" > $SCHEMEFAVOFILE
  echo "Done..."
}

listFavo() {
  if [ ! -f $SCHEMEFAVOFILE ]; then
    touch $SCHEMEFAVOFILE
  fi
  FAVOLISTS=$(cat $SCHEMEFAVOFILE)
  posit=0
  echo "-----------------------------------------------------------------------"
  for i in ${FAVOLISTS[*]}; do
    if [ -f $i ]; then
      name=$(basename $i|sed 's/.itermcolors//g')
      FAVOARRAY[$posit]=$i
      printf "%-5s%-5s%-60s%-30s\n" "|" " $posit" "|     $name" "|"
      ((posit+=1))
    fi
  done
  echo "-----------------------------------------------------------------------"
}

choseFavo() {
  listFavo
  if [ "$1" != "" ]; then
      conf=$1
  else
    echo "Type your choice : "; read conf
  fi

  if [ "$conf" -lt "${#FAVOARRAY[@]}" ]; then
      $PREVIEWCOMMAND  ${FAVOARRAY[$conf]}
  else
      echo "The NO. you typed dose not exists !";
      return 1
  fi
}

favoScheme() {
  case "$1" in
    "add"|"a")
      addFavo $(cat $SCHEMEMARKFILE)
      ;;
    "del"|"d")
      delFavo $(cat $SCHEMEMARKFILE)
      ;;
    "truncate"|"t")
      truncateFavo
      ;;
    "chose"|"c")
      choseFavo
      ;;
    "list"|*)
      listFavo
      ;;
  esac
}

help() {
  command=$(basename $0)
  echo "Usage: $command list/l | del/d | chose/c | arrange/a | rand/r | trun/t | current/cur | setcur/s | favo/f | help/h";
	echo "用法： $command  列表  |  删除 |  查看   |   整理    |  随机  |  清空  |    当前     | 设置当前 |  收藏  |  帮助"
  echo ""
  echo "$command favo/f [commands]:"
  echo "list/l | add/a | del/d | truncate/t | chose/c"
  echo " 列表  | 添加  | 删除  |  清空收藏  | 选择"
}

source $MYRUNTIME/customs/bin/mymessage

case "$1" in
  "list"|"l")
    listSchemes
    ;;
  "chose"|"c")
    choseScheme
    ;;
  "truncate"|"t")
    truncateSchemes
    ;;
  "delete"|"del"|"d")
    delScheme
    ;;
  "arrange"|"a")
    arrangeSchemes
    ;;
  "rand"|"r")
    randScheme
    ;;
  "current"|"cur")
    curScheme
    ;;
  "setcur"|"s")
    setCurScheme
    ;;
  "favo"|"f")
    favoScheme $2 $3
    ;;
  "help"|"h"|*)
    help
    echo ""
    curScheme
    ;;
esac
