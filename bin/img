#!/usr/bin/env bash
#################################
## Desc:   已下载图片记录、去重、分文件夹处理
## Author: 杨浩
## 使用方法：bbb
## 时    间：2021-01-09
#################################
MYRUNTIME=$(cat ~/.myruntime)
##图片文件夹路径
PICPATH=$(cat ~/.picpath)
##数据库文件路径
DBPATH=$MYRUNTIME/tools
DBFILE=$DBPATH/pictures_db.log
##被去重文件数据库文件路径
DUPDBFILE=$DBPATH/pictures_duplicate_db.log
##去重后文件路径
UNIQFILE=$DBPATH/pictures_uniq.log
##被去重文件去重后文件路径
DUPUNIQFILE=$DBPATH/pictures_duplicate_uniq.log
##处理后的去重文件路径
DUPLICATEFILE=$DBPATH/pictures_result.log
##被去重文件夹处理后的去重文件路径
DUPDUPLICATEFILE=$DBPATH/pictures_duplicate_result.log
##去重文件数据库文件路径（仅有文件名）
FULLFILENAMESDB=$DBPATH/pictures_fullfilenames_db.log
FULLFILENAMESDBFILE=$DBPATH/fullfilenames_db.log.sqlitedb
##单个文件夹最多文件上限
MAXSIZE=2000
##sqlite 命令位置
COMMANDBIN=sqlite3
TMPSQLFILEPATH=/tmp/tmp_pictures_data.sql

record2SQLITEDB() {
    if [ ! -f $FULLFILENAMESDBFILE ]; then
        local SQL="CREATE TABLE pictures ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'pic_name' TEXT DEFAULT NULL, 'created_at' DATETIME NOT NULL DEFAULT CURRENT_TIME, 'pic_path' TEXT DEFAULT NULL);"
        $COMMANDBIN $FULLFILENAMESDBFILE <<EOF
$SQL
EOF
    fi

    [[ "" = "$1" ]] && return 1
    local tmp_path=$(dirname $1)
    local tmp_file=$(basename $1)
    local SQL="insert into pictures (pic_name, pic_path) values ('"$tmp_file"', '"$tmp_path"');"
    $COMMANDBIN $FULLFILENAMESDBFILE <<EOF
$SQL
EOF
}

record2SQLITEDB2() {
    if [ ! -f $FULLFILENAMESDBFILE ]; then
        local SQL="CREATE TABLE pictures ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'pic_name' TEXT DEFAULT NULL, 'created_at' DATETIME NOT NULL DEFAULT CURRENT_TIME, 'pic_path' TEXT DEFAULT NULL);"
        $COMMANDBIN $FULLFILENAMESDBFILE <<EOF
$SQL
EOF
    fi
    local SQL=".read ${TMPSQLFILEPATH}"
    $COMMANDBIN $FULLFILENAMESDBFILE <<EOF
$SQL
EOF
}

append2TMPSQLFILE() {
    [[ "" = "$1" ]] && return 1
    local tmp_path=$(dirname $1)
    local tmp_file=$(basename $1)
    echo "insert into pictures (pic_name, pic_path) values ('"$tmp_file"', '"$tmp_path"');" >> $TMPSQLFILEPATH
}

recordDB() {
    if [ -f $DBFILE ]; then
        rm -f $DBFILE $UNIQFILE $FULLFILENAMESDBFILE $TMPSQLFILEPATH;
    fi
    echo "Start recording ..."
    echo "Start recording to the txt database ..."
    for path in $(ls $PICPATH | grep  -v duplicates_); do
        if [ -d $path ]; then 
            find ${PICPATH}${path} -type f -name "*jpg" -o -name "*png" -o -name "*jpeg" >> $DBFILE
            find ${PICPATH}${path} -type f -name "*mp4" >> $DBFILE
        fi
    done
    echo "Txt database record finished !"
    echo "Start recording to the sqlite database, this will go a lone way ..."
    while read line; do
        #record2SQLITEDB $line
        append2TMPSQLFILE $line
    done < $DBFILE
    record2SQLITEDB2
    echo "Sqlite database record finished !"
    echo "Record finished !"
}

recordDuplicateDB() {
    if [ -f $DUPDBFILE ]; then
        rm -f $DUPDBFILE $DUPUNIQFILE;
    fi
    for path in $(ls $PICPATH | grep duplicates_); do
        if [ -d $path ]; then 
            find ${PICPATH}${path} -type f -name "*jpg" -o -name "*png" -o -name "*jpeg" >> $DUPDBFILE
        fi
    done
}

uniqDB() {
    rm -f /tmp/uniq_db_file_names $FULLFILENAMESDB
    for file in $(cat $DBFILE); do
        echo $(basename $file) >> /tmp/uniq_db_file_names
        echo $(basename $file) >> $FULLFILENAMESDB
    done
    if [ -f /tmp/uniq_db_file_names ]; then
        echo $(cat /tmp/uniq_db_file_names | sort -rn| uniq -c| awk '{if ($1 > 1) print $2}') >> $UNIQFILE
    fi
    if [ -f $UNIQFILE ]; then
        cat $UNIQFILE | tr ' ' '\n' > $DUPLICATEFILE
    fi
}

uniqDuplicateDB() {
    rm -f /tmp/uniq_duplicate_db_file_names
    for file in $(cat $DUPDBFILE); do
        echo $(basename $file) >> /tmp/uniq_duplicate_db_file_names
    done
    if [ -f /tmp/uniq_duplicate_db_file_names ]; then
        echo $(cat /tmp/uniq_duplicate_db_file_names | sort -rn| uniq -c| awk '{if ($1 > 1) print $2}') >> $DUPUNIQFILE
    fi
    if [ -f $DUPUNIQFILE ]; then
        cat $DUPUNIQFILE | tr ' ' '\n' > $DUPDUPLICATEFILE
    fi
}

moveUniq() {
    for file in $(cat $DUPLICATEFILE); do
        find $PICPATH -type f -name "$file" ! -path "${PICPATH}/*duplicates*" -exec $MYRUNTIME/customs/bin/_domove {} \;
    done
}

afterUniq() {
    local max=4
    local count=0
    for img in $(cat $UNIQFILE); do
        if [ $count -lt $max ]; then
            results=$(find $PICPATH/* -type f -name "$img" ! -path "${PICPATH}/*duplicates*")
            if [ "" != "$results" ] && [ "$(echo $results | sed 's, ,\r\n,g' |wc -l)" -gt 1 ]; then
                imgthumb $(echo $results | awk -F' ' '{print $1}')
                echo $results | sed 's, ,\r\n,g'
                ((count++))
            fi
        fi
    done
}

afterUniqDuplicate() {
    local max=5
    local count=0
    for img in $(cat $DUPUNIQFILE); do
        if [ $count -lt $max ]; then
            results=$(find $PICPATH/duplicates_* -type f -name "$img")
            if [ "" != "$results" ] && [ "$(echo $results | sed 's, ,\r\n,g' |wc -l)" -gt 1 ]; then
                imgthumb $(echo $results | awk -F' ' '{print $1}')
                echo $results | sed 's, ,\r\n,g'
                ((count++))
            fi
        fi
    done
}

unfull() {
    clear
    echo ""
    total=0
    need_total=0
    # printf "\033[42m%-25s\033[0m\n" "*****************************************************************************************"
    printf "\033[0;33m%-25s\033[0m\n" " ╭──────────────────────────────────────────────────────────────────────────────────────── -- - ･"
    printf "\033[0;33m │\033[0m\n "
    printf "\033[0;33m│\033[0m\033[0;30m*****\033[0m \033[1;37m颜色代表\033[0m: \033[4;31m More多于需求 \033[0m , \033[4;33m Less少于需求 \033[0m , \033[4;32m Enough刚刚好 \033[0m \n"
    printf "\033[0;33m │\033[0m\n "
    printf "\033[0;33m%-25s\033[0m\n" "╰──────────────────────────────────────────────────────────────────────────────────────── -- - ･"
    # printf "\033[42m%-25s\033[0m\n" "*****************************************************************************************"
    printf "\033[0;33m%-25s\033[0m\n" " ╭──────────────────────────────────────────────────────────────────────────────────────── -- - ･"
    printf "\033[0;33m │\033[0m\033[1;28m%-45s %-15s %-14s %-14s\033[0m\n" path counts needs disk-usage
    printf "\033[0;33m%-25s\033[0m\n" " ╰──────────────────────────────────────────────────────────────────────────────────────── -- - ･"
    printf "\033[0;33m%-25s\033[0m\n" " ╭──────────────────────────────────────────────────────────────────────────────────────── -- - ･"
    for curpath in $(ls $PICPATH | sort -n); do
        if [ -d ${PICPATH}${curpath} ]; then 
            counts=$(find ${PICPATH}${curpath} -type f -name "*jpg" -o -name "*png" -o -name "*jpeg" |wc -l)
            disk_usage=$(/usr/bin/du -sh ${PICPATH}${curpath} | awk '{print $1}')
            ((needs=$MAXSIZE-$counts))
            if [[ $curpath =~ duplicates_ ]]; then
                printf "\033[0;34m%-45s\033[0m \033[0;31m%-15s\033[0m %-14s %-14s\n" ${PICPATH}${curpath} $counts $disk_usage
                printf "\033[0;37m%-25s\033[0m\n" "----------------------------------------------------------------------------------------- -- - ･"
            else
                if [ "$needs" -eq "0" ]; then
                    if [ ""  == "$1" ] || [ "$1" != "ne" ]; then
                        printf "\033[0;33m │\033[0m\033[0;29m%-45s\033[0m \033[0;36m%-15s\033[0m \033[0;32m%-14s\033[0m \033[1;31m%-14s\033[0m\n" ${PICPATH}${curpath} $counts $needs $disk_usage
                        printf "\033[0;33m │\033[0m\033[0;37m%-25s\033[0m\n" "---------------------------------------------------------------------------------------- -- - ･"
                    fi
                elif [ "$needs" -gt "0" ]; then
                    if [ ""  == "$1" ] || [ "$1" = "ne" ]; then
                        printf "\033[0;33m │\033[0m\033[0;29m%-45s\033[0m \033[0;36m%-15s\033[0m \033[0;33m%-14s\033[0m \033[1;31m%-14s\033[0m\n" ${PICPATH}${curpath} $counts $needs $disk_usage
                        printf "\033[0;33m │\033[0m\033[0;37m%-25s\033[0m\n" "---------------------------------------------------------------------------------------- -- - ･"
                    fi
                elif [ "$needs" -lt "0" ]; then
                    if [ ""  == "$1" ] || [ "$1" = "ne" ]; then
                        printf "\033[0;33m │\033[0m\033[0;35m%-45s\033[0m \033[0;36m%-15s\033[0m \033[4;31m%-8s\033[0m \033[1;31m%-14s\033[0m\n" ${PICPATH}${curpath} $counts $needs $disk_usage
                        printf "\033[0;33m │\033[0m\033[0;37m%-25s\033[0m\n" "---------------------------------------------------------------------------------------- -- - ･"
                    fi
                fi
                ((total=$total+$counts))
                ((need_total=$need_total+$needs))
            fi
            # echo '-----------------------------------------------------------------------------------------'
        fi
    done
    printf "\033[0;33m%-25s\033[0m\n" " ╰──────────────────────────────────────────────────────────────────────────────────────── -- - ･"
    local disk_total=$(/usr/bin/du -sh $PICPATH | awk '{print $1}')
    printf "\033[0;33m%-25s\033[0m\n" " ╭──────────────────────────────────────────────────────────────────────────────────────── -- - ･"
    printf "\033[0;33m │\033[0m%-45s \033[1;33m %-25s \033[0m \033[1;31m %-20s \033[0m\n" "" "Total : $total" "Needs :  $need_total"
    printf "\033[0;33m │\033[0m%-45s \033[1;33m %-25s \033[0m \033[1;31m %-20s \033[0m\n" "" "Disk Usage : $disk_total"
    printf "\033[0;33m%-25s\033[0m\n" " ╰──────────────────────────────────────────────────────────────────────────────────────── -- - ･"
    echo ""

}

customcd() {
    builtin cd "$@"
}

bCd() {
    echo "cd $PICPATH"
    customcd $PICPATH
}


#空白文件
empty() {
  echo "This may take a long while ..."
  for path in $(ls $PICPATH); do
    if [ -d ${PICPATH}/${path} ]; then
        echo ${PICPATH}/${path}
        for pic in $(ls ${PICPATH}/${path}); do
            if [ -f ${PICPATH}/${path}/${pic} ]; then
                if [[ $pic =~ .*\.jpg$ ]]; then
                    tmpsize=$(wc -c ${PICPATH}/${path}/${pic} | awk '{print $1}')
                    if [ $tmpsize -lt 1 ]; then
                        echo ${PICPATH}/${path}/${pic}
                    fi
                fi
            fi
        done
    fi
  done
  echo "Done ..."
}


cd $PICPATH;
case "$1" in
    'r'|'record')
        recordDB
    ;;

    'dr'|'duprecord')
        recordDuplicateDB
    ;;

    'u'|'uniq')
        uniqDB
    ;;

    'du'|'dupuniq')
        uniqDuplicateDB
    ;;

    'a'|'after')
        afterUniq
    ;;

    'da'|'dupafter')
        afterUniqDuplicate
    ;;

    'm'|'move')
        moveUniq
    ;;

    'o'|'open')
        open $PICPATH
    ;;

    'un'|'unfull')
        unfull $2
    ;;
    'cd')
        bCd
    ;;
    'e'|'empty')
        empty
    ;;

    *)
        echo "╭──────────────────────────────────────────────────────────────────────────────────────── -- - ･
│ 使用方法: ${0##*/} [command(可用命令)]
╰──────────────────────────────────────────────────────────────────────────────────────── -- - ･" | lolcat -f -F 0.05
echo "╭──────────────────────────────────────────────────────────────────────────────────────── -- - ･
│ command(可用命令):
│  record    / r   全目录记录
│  uniq      / u   去重并记录
│  move      / m   重复文件分离
│  open      / o   打开目录
│  unfull    / un  未满
│  after     / a   展示重复
│  duprecord / dr  记录去重后重复的
│  dupuniq   / du  去重后再去重
│  dupafter  / da   去重后展示重复
│  empty     / e   查找空文件
│ *顺序：全目录记录->去重并记录->重复文件分离*
│ *最终文件都在duplicate文件夹中*
╰──────────────────────────────────────────────────────────────────────────────────────── -- - ･" | lolcat -f -F 0.05
    ;;
esac
