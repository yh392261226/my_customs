#!/bin/bash
###Desc:服务命令管理器
###Author:杨浩
source $MYRUNTIME/customs/bin/mymessage
options=("start" "restart" "stop" "status" "run" "list" "cleanup" "-h" "--help")
services=$(brew services list | awk '{print $1}'| grep -v 'Name')

custom_title() {
  title=$1
  if [ "" = "$title" ]; then
    title=""
  fi
  echo "-------------------------------------------------"
  echo "----$title"
  echo "-------------------------------------------------"
  return 0
}

if [ $# -lt 1 ]; then
  echo ""
  custom_title "Installed services:"
  for service in ${services[*]}; do
    echo -n "[ $service ] "
  done

  echo ""

  echo ""
  custom_title "Suppose options:"
  for option_i in ${options[*]}; do
    echo -n "[ $option_i ] "
  done

  echo ""

  echo ""
  custom_title "Help:"
  echo "bservice [service_name] [list | run | start | stop | restart | cleanup]
    Easily start and stop formulae via launchctl.

    Integrates Homebrew formulae with macOS' launchctl manager. Services can be
    added to either /Library/LaunchDaemons or ~/Library/LaunchAgents.
    Basically, items in /Library/LaunchDaemons are started at boot, while those
    in ~/Library/LaunchAgents are started at login.

    When started with sudo, it operates on /Library/LaunchDaemons; otherwise,
    it operates on ~/Library/LaunchAgents.

    On start the plist file is generated and written to a Tempfile, and then
    copied to the launch path (existing plists are overwritten).

    [sudo] bservice list
    List all running services for the current user (or root)

    [sudo] bservice formula|--all run
    Run the service formula without starting at login (or boot).

    [sudo] bservice formula|--all start
    Start the service formula immediately and register it to launch at login (or boot).

    [sudo] bservice formula|--all stop
    Stop the service formula immediately and unregister it from launching at login (or boot).

    [sudo] bservice formula|--all restart
    Stop (if necessary) and start the service immediately and register it to launch at login (or boot)."
  exit 1
else
  myoption=$2
  myservice=$1

  custom_title "Command:"
  case "$myoption" in
    "status")
      echo "brew services list| grep \"Name\|$myservice\""
      custom_title "Result:"
      brew services list| grep "Name\|$myservice"
      ;;
    "login")
      if [ "$myservice" = "mysql" ]; then
        [[ -f $MYRUNTIME/tools/m_mysql ]] && source $MYRUNTIME/tools/m_mysql || echo "ERROR: m_mysql does not exists!";
        echo "mycli -u$user -p$pass -h$host -P$port"
        /usr/local/bin/mycli -u$user -p$pass -h$host -P$port
      elif [ "$myservice" = "redis" ]; then
        [[ -f $MYRUNTIME/tools/m_redis ]] && source $MYRUNTIME/tools/m_redis || echo "ERROR: m_redis does not exists!";
        echo "/usr/local/bin/redis-cli -h $host -p $port"
        /usr/local/bin/redis-cli -h $host -p $port
      elif [ "$myservice" = "mongo" ]; then
        echo "/usr/local/bin/mongo"
        /usr/local/bin/mongo
      elif [ "$myservice" = "memcached" ]; then
        [[ -f $MYRUNTIME/tools/m_memcached ]] && source $MYRUNTIME/tools/m_memcached || echo "ERROR: m_memcached does not exists!";
        echo "/usr/local/bin/telnet $host $port"
        /usr/local/bin/telnet $host $port
      fi
      ;;
    *)
      echo "brew services -v $myoption $myservice"
      custom_title "Result:"
      brew services -v  $myoption $myservice
      ;;

  esac



fi
