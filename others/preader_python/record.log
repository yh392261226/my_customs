
requirements.txt
----------------------------------------
pyttsx3
chardet
ebooklib
beautifulsoup4
cjkwrap

./bookshelf.py
----------------------------------------
import os
from db import DBManager
from utils import build_pages_from_file
from epub_utils import parse_epub, get_epub_metadata
from lang import get_text
import time

class Bookshelf:
    def __init__(self, lang="zh"):
        self.db = DBManager()
        self.lang = lang
        self.books = self.load_books()

    def load_books(self):
        books = self.db.get_books()
        result = []
        for id_, path, title, author, book_type, old_tags in books:  # 注意这里改为old_tags
            exists = os.path.exists(path)
            # 获取书籍的标签列表 - 从数据库实时获取
            book_tags = self.db.get_book_tags(id_)
            tag_names = [tag[1] for tag in book_tags]  # 获取标签名称列表
            
            result.append({
                "id": id_,
                "path": path,
                "title": title,
                "author": author,
                "type": book_type,
                "tags": tag_names,  # 使用实时获取的标签列表
                "exists": exists
            })
        # 按照标题升序排序
        result.sort(key=lambda x: x["title"].lower())
        return result

    # 添加标签相关方法
    def get_all_tags(self):
        """获取所有标签"""
        tags = self.db.get_all_tags()
        return [tag[1] for tag in tags]

    def filter_books_by_tag(self, tag_name):
        """按标签过滤书籍 - 修复筛选逻辑"""
        if not tag_name:  # 如果标签为空，返回所有书籍
            return self.books
            
        return [book for book in self.books if tag_name in book["tags"]]

    def update_book_metadata(self, book_id, title, author, tags):
        """更新书籍元数据"""
        self.db.update_book_metadata(book_id, title, author, tags)
        # 重新加载书籍列表
        self.books = self.load_books()

    def batch_update_tags(self, book_ids, action, tag_name):
        """批量更新标签 - 确保数据正确更新"""
        for book_id in book_ids:
            if action == "add":
                tag_id = self.db.add_tag(tag_name)
                self.db.add_book_tag(book_id, tag_id)
            elif action == "remove":
                # 首先获取标签ID
                all_tags = self.db.get_all_tags()
                tag_id = None
                for tag in all_tags:
                    if tag[1] == tag_name:
                        tag_id = tag[0]
                        break
                if tag_id:
                    self.db.remove_book_tag(book_id, tag_id)
        
        # 重新加载书籍列表 - 确保数据正确更新
        self.books = self.load_books()
        return True

    def check_books_existence(self):
        """检查所有书籍文件是否存在"""
        for book in self.books:
            book["exists"] = os.path.exists(book["path"])
        return self.books

    def update_book_path(self, book_id, new_path):
        """更新书籍路径"""
        if not os.path.exists(new_path):
            return False
            
        # 更新数据库
        self.db.update_book_path(book_id, new_path)
        
        # 更新内存中的书籍列表
        for book in self.books:
            if book["id"] == book_id:
                book["path"] = new_path
                book["exists"] = True
                break
                
        return True

    def delete_book(self, book_id):
        """从书架删除书籍"""
        # 从数据库删除
        self.db.delete_book(book_id)
        
        # 从内存中的书籍列表删除
        self.books = [book for book in self.books if book["id"] != book_id]
        
    def delete_books(self, book_ids):
        """批量删除书籍"""
        for book_id in book_ids:
            self.db.delete_book(book_id)
        
        # 从内存中的书籍列表删除
        self.books = [book for book in self.books if book["id"] not in book_ids]

    def add_book(self, file_path, tags="", width=80, height=25, line_spacing=1):
        ext = os.path.splitext(file_path)[-1].lower()
        if not os.path.exists(file_path):
            return None
            
        # 简单的加载提示
        print(f"{get_text('loading_books', self.lang)}...")
        if ext == ".epub":
            print(f"{get_text('parsing_epub_data', self.lang)}...")
            title, author = get_epub_metadata(file_path)
            print(f"{get_text('save_to_db', self.lang)}...")
            self.db.add_book(file_path, title or os.path.basename(file_path), author, "epub", tags)
        else:
            print(f"{get_text('save_to_db', self.lang)}...")
            self.db.add_book(file_path, os.path.basename(file_path), "", "txt", tags)
            
        self.books = self.load_books()

    def add_dir(self, dir_path, tags="", width=80, height=25, line_spacing=1):
        if not os.path.isdir(dir_path):
            return
            
        # 获取目录中所有支持的书籍文件
        files = []
        for fname in os.listdir(dir_path):
            fpath = os.path.join(dir_path, fname)
            if os.path.isfile(fpath) and fname.lower().endswith(('.txt', '.epub', '.md')):
                files.append(fpath)
                
        # 简单的加载提示
        print(f"{get_text('total_add_books', self.lang).format(books=len(files))}...")
        for i, fpath in enumerate(files):
            print(f"{get_text('parsing_books', self.lang).format(books=f'{i+1}/{len(files)}')}: {os.path.basename(fpath)}")
            self.add_book(fpath, tags=tags, width=width, height=height, line_spacing=line_spacing)

    def get_book_by_id(self, book_id):
        for b in self.books:
            if b["id"] == book_id:
                return b
        return None

    def search_books(self, keyword):
        keyword = keyword.strip().lower()
        result = [book for book in self.books if keyword in book["title"].lower()]
        # 搜索结果也按照标题升序排序
        result.sort(key=lambda x: x["title"].lower())
        return result
    
    def delete_book(self, book_id):
        self.db.delete_book(book_id)
        self.books = self.load_books()

    def get_books_by_ids(self, book_ids):
        """根据ID列表获取书籍信息"""
        return [book for book in self.books if book["id"] in book_ids]
    
    def get_all_books(self):
        """获取所有书籍"""
        return self.books
    
    def delete_tag(self, tag_name):
        """删除标签"""
        # 获取标签ID
        tag_id = self.db.get_tag_id(tag_name)
        if tag_id:
            return self.db.delete_tag(tag_id)
        return False

./db.py
----------------------------------------
import os
import sqlite3

def get_db_path():
    home = os.environ.get("HOME")
    config_dir = os.path.join(home, ".config", "preader")
    os.makedirs(config_dir, exist_ok=True)
    return os.path.join(config_dir, "novel_reader.db")

class DBManager:
    def __init__(self):
        self.db_path = get_db_path()
        self.conn = sqlite3.connect(self.db_path)
        self._init_db()

    def _init_db(self):
        c = self.conn.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS books (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            path TEXT UNIQUE,
            title TEXT,
            author TEXT,
            type TEXT,
            tags TEXT
        )""")
        # 添加标签表
        c.execute("""CREATE TABLE IF NOT EXISTS tags (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS book_tags (
            book_id INTEGER,
            tag_id INTEGER,
            PRIMARY KEY(book_id, tag_id),
            FOREIGN KEY(book_id) REFERENCES books(id),
            FOREIGN KEY(tag_id) REFERENCES tags(id)
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS progress (
            book_id INTEGER,
            page_idx INTEGER,
            PRIMARY KEY(book_id)
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS bookmarks (
            book_id INTEGER,
            page_idx INTEGER,
            comment TEXT
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS stats (
            book_id INTEGER,
            date TEXT,
            seconds INTEGER,
            PRIMARY KEY(book_id, date)
        )""")
        self.conn.commit()
    # 添加标签相关方法
    def get_all_tags(self):
        """获取所有标签"""
        c = self.conn.cursor()
        c.execute("SELECT id, name FROM tags ORDER BY name")
        return c.fetchall()

    def add_tag(self, tag_name):
        """添加标签"""
        c = self.conn.cursor()
        c.execute("INSERT OR IGNORE INTO tags (name) VALUES (?)", (tag_name,))
        self.conn.commit()
        return c.lastrowid
    
    def get_book_tags(self, book_id):
        """获取书籍的标签"""
        c = self.conn.cursor()
        c.execute("""SELECT t.id, t.name FROM tags t 
                     JOIN book_tags bt ON t.id = bt.tag_id 
                     WHERE bt.book_id = ?""", (book_id,))
        return c.fetchall()

    def add_book_tag(self, book_id, tag_id):
        """为书籍添加标签"""
        c = self.conn.cursor()
        c.execute("INSERT OR IGNORE INTO book_tags (book_id, tag_id) VALUES (?, ?)", (book_id, tag_id))
        self.conn.commit()

    def remove_book_tag(self, book_id, tag_id):
        """移除书籍的标签"""
        c = self.conn.cursor()
        c.execute("DELETE FROM book_tags WHERE book_id=? AND tag_id=?", (book_id, tag_id))
        self.conn.commit()
    
    def update_book_metadata(self, book_id, title, author, tags):
        """更新书籍元数据（标题、作者、标签）"""
        c = self.conn.cursor()
        # 更新标题和作者
        c.execute("UPDATE books SET title=?, author=? WHERE id=?", (title, author, book_id))
        
        # 清空现有标签
        c.execute("DELETE FROM book_tags WHERE book_id=?", (book_id,))
        
        # 添加新标签
        if tags:
            tag_list = [tag.strip() for tag in tags.split(',') if tag.strip()]
            for tag_name in tag_list:
                # 确保标签存在
                tag_id = self.add_tag(tag_name)
                # 关联标签和书籍
                self.add_book_tag(book_id, tag_id)
        
        self.conn.commit()

    def add_book(self, path, title, author, book_type, tags):
        c = self.conn.cursor()
        c.execute("INSERT OR IGNORE INTO books (path, title, author, type, tags) VALUES (?, ?, ?, ?, ?)",
                  (path, title, author, book_type, tags))
        book_id = c.lastrowid
        
        # 处理标签
        if tags:
            tag_list = [tag.strip() for tag in tags.split(',') if tag.strip()]
            for tag_name in tag_list:
                tag_id = self.add_tag(tag_name)
                self.add_book_tag(book_id, tag_id)
        
        self.conn.commit()
        return book_id

    def get_books(self):
        c = self.conn.cursor()
        c.execute("SELECT id, path, title, author, type, tags FROM books ORDER BY id DESC")
        return c.fetchall()

    def save_progress(self, book_id, page_idx):
        c = self.conn.cursor()
        c.execute("INSERT OR REPLACE INTO progress (book_id, page_idx) VALUES (?, ?)", (book_id, page_idx))
        self.conn.commit()

    def get_progress(self, book_id):
        c = self.conn.cursor()
        c.execute("SELECT page_idx FROM progress WHERE book_id=?", (book_id,))
        r = c.fetchone()
        return r[0] if r else 0

    def add_bookmark(self, book_id, page_idx, comment):
        c = self.conn.cursor()
        c.execute("INSERT INTO bookmarks (book_id, page_idx, comment) VALUES (?, ?, ?)", (book_id, page_idx, comment))
        self.conn.commit()

    def get_bookmarks(self, book_id):
        c = self.conn.cursor()
        c.execute("SELECT page_idx, comment FROM bookmarks WHERE book_id=? ORDER BY page_idx", (book_id,))
        return c.fetchall()

    def record_stat(self, book_id, date, seconds):
        c = self.conn.cursor()
        c.execute("SELECT seconds FROM stats WHERE book_id=? AND date=?", (book_id, date))
        r = c.fetchone()
        if r:
            c.execute("UPDATE stats SET seconds=seconds+? WHERE book_id=? AND date=?", (seconds, book_id, date))
        else:
            c.execute("INSERT INTO stats (book_id, date, seconds) VALUES (?, ?, ?)", (book_id, date, seconds))
        self.conn.commit()

    def get_stats(self, book_id):
        c = self.conn.cursor()
        c.execute("SELECT date, seconds FROM stats WHERE book_id=? ORDER BY date", (book_id,))
        return c.fetchall()

    def delete_book(self, book_id):
        c = self.conn.cursor()
        c.execute("DELETE FROM books WHERE id=?", (book_id,))
        c.execute("DELETE FROM progress WHERE book_id=?", (book_id,))
        c.execute("DELETE FROM bookmarks WHERE book_id=?", (book_id,))
        c.execute("DELETE FROM stats WHERE book_id=?", (book_id,))
        self.conn.commit()

    def update_book_path(self, book_id, new_path):
        """更新书籍路径"""
        c = self.conn.cursor()
        c.execute("UPDATE books SET path=? WHERE id=?", (new_path, book_id))
        self.conn.commit()

    def delete_book(self, book_id):
        """删除书籍及其所有相关数据"""
        c = self.conn.cursor()
        # 删除书籍
        c.execute("DELETE FROM books WHERE id=?", (book_id,))
        # 删除阅读进度
        c.execute("DELETE FROM progress WHERE book_id=?", (book_id,))
        # 删除书签
        c.execute("DELETE FROM bookmarks WHERE book_id=?", (book_id,))
        # 删除阅读统计
        c.execute("DELETE FROM stats WHERE book_id=?", (book_id,))
        self.conn.commit()

    def delete_tag(self, tag_id):
        """删除标签及其所有关联"""
        c = self.conn.cursor()
        # 先删除书籍标签关联
        c.execute("DELETE FROM book_tags WHERE tag_id=?", (tag_id,))
        # 再删除标签本身
        c.execute("DELETE FROM tags WHERE id=?", (tag_id,))
        self.conn.commit()
        return True
    
    def get_tag_id(self, tag_name):
        """根据标签名称获取标签ID"""
        c = self.conn.cursor()
        c.execute("SELECT id FROM tags WHERE name=?", (tag_name,))
        result = c.fetchone()
        return result[0] if result else None

./epub_utils.py
----------------------------------------
from ebooklib import epub
from bs4 import BeautifulSoup
from utils import build_pages_from_text
from lang import get_text

def parse_epub(file_path, width, height, line_spacing, lang="zh"):
    book = epub.read_epub(file_path)
    
    chapters = []
    items = list(book.get_items())
    
    for item in items:
        if item.get_type() == epub.ITEM_DOCUMENT:
            soup = BeautifulSoup(item.get_content(), "html.parser")
            title = soup.title.string if soup.title else ""
            text = soup.get_text()
            
            # 使用统一的文本分页函数
            pages = build_pages_from_text(text, width, height, line_spacing, lang=lang)
            chapters.append({"title": title, "pages": pages})
            
    return chapters

def get_epub_metadata(file_path):
    book = epub.read_epub(file_path)
    title = book.get_metadata('DC', 'title')[0][0] if book.get_metadata('DC', 'title') else ""
    author = book.get_metadata('DC', 'creator')[0][0] if book.get_metadata('DC', 'creator') else ""
    return title, author

./lang.py
----------------------------------------
LANGS = {
    "zh": {
        "bookshelf": "书架",
        "add_book": "添加小说",
        "add_dir": "添加目录",
        "progress": "进度",
        "bookmark": "书签",
        "help": "帮助",
        "exit": "退出",
        "setting": "设置",
        "search": "搜索",
        "stats": "阅读统计",
        "stats_all": "全部书籍阅读统计",
        "stats_time": "累计阅读时间",
        "stats_days": "阅读天数",
        "stats_daily": "每日统计",
        "read": "朗读",
        "chapter": "章节",
        "theme": "主题",
        "language": "语言",
        "current_page": "当前页",
        "auto_page": "自动翻页",
        "jump_chapter": "跳转章节",
        "author": "作者",
        "input_path": "输入文件路径：",
        "input_dir": "输入目录路径：",
        "input_search": "输入搜索关键词：",
        "input_comment": "输入书签备注：",
        "input_theme": "主题 (dark/light/eye)：",
        "input_lang": "语言 (zh/en)：",
        "input_font_color": "字体颜色(black/red/green/yellow/blue/magenta/cyan/white)：",
        "input_bg_color": "背景颜色(black/red/green/yellow/blue/magenta/cyan/white)：",
        "input_border_style": "边框样式(round/double/single/bold/none)：",
        "input_border_color": "边框颜色(black/red/green/yellow/blue/magenta/cyan/white)：",
        "input_jump_page": "输入页码并回车跳转：",
        "input_jump_page_quit": "输入页码并回车跳转, q退出",
        "bookmark_list": "书签列表",
        "input_remind_interval": "阅读提醒间隔(分钟, 0为关闭)：",
        "remind_msg": "您已阅读{minutes}分钟了，休息一下眼睛吧！",
        "invalid": "无效输入",
        "pre_page": "上一页",
        "next_page": "下一页",
        "delete": "删除",
        "move": "移动",
        "select": "选择",
        "tag": "标签",
        "input_no": "输入序号",
        "no_unlimited": "序号超范围！",
        "wait_for_loading":"请稍候，正在努力加载",
        "loading": "加载中",
        "novel_reader": "小说阅读器",
        "number": "序号",
        "minutes": "分钟",
        "day": "天",
        "back": "返回",
        "page_no": "第{page}页",
        "book_deletion_title": "删除书籍 - 空格选择/取消, Enter确认删除, q返回",
        "book_deletion_help": "[↑↓]移动 [空格]选择/取消 [n]下一页 [p]上一页 [a]全选 [c]取消全选 [Enter]删除选中 [q]返回",
        "book_deletion_confirm": "确认删除 {books} 本书籍?",
        "book_deletion_success": "已成功删除 {books} 本书籍",
        "reading_progress": "阅读进度",
        "empty_file_or_cannot_read": "文件为空或无法解析内容",
        "aloud_r2_stop": "朗读中 - 按r停止",
        "books": "书籍",
        "unfind_type_new": "未找到，请输入新路径",
        "update_path_success": "路径更新成功!",
        "update_path_fail": "路径更新失败!",
        "path_not_exists": "路径无效或文件不存在!",
        "terminal_help_text": "按空格+回车返回 | ↑↓浏览历史命令",
        "terminal_title": "终端模式",
        "terminal_help_text2": "使用空格+回车退出终端模式",
        "command_exists_code": "命令退出代码",
        "command_time_unlimit": "命令执行超时",
        "execute_fail": "执行错误",
        "terminal_mode_started": "终端模拟器已启动",
        "file_not_exists": "文件不存在",
        "cannot_load_novel": "无法加载小说",
        "empty_directory_or_file": "空文件或文件内容为空",
        "action_document_line": "处理文本行",
        "action_document_file": "处理文本内容",
        "action_pages": "分页处理",
        "reading_from_file": "读取文件内容",
        "loading_books": "加载书籍中",
        "parsing_epub_data": "解析EPUB元数据",
        "save_to_db": "保存到数据库",
        "total_add_books": "添加目录中的书籍，共 {books} 本",
        "parsing_books": "处理第 {books} 本",
        "tag_management": "标签管理",
        "edit_book": "编辑书籍",
        "add_tag": "添加标签",
        "remove_tag": "删除标签",
        "filter_by_tag": "按标签筛选",
        "batch_edit": "批量编辑",
        "edit_title": "编辑标题",
        "edit_author": "编辑作者",
        "edit_tags": "编辑标签",
        "save_changes": "保存更改",
        "tag_already_exists": "标签已存在",
        "tag_added": "标签已添加",
        "tag_removed": "标签已移除",
        "no_tags": "无标签",
        "tag_mode": "标签模式: 使用空格选择/取消标签，Enter确认",
        "switch_tag_mode":"切换标签模式",
        "confirm":"确认",
        "multype_tags_edit_books": "批量标签编辑 ({books}) 本书",
        "out_multype_mode": "退出多选模式",
        "in_multype_mode": "进入多选模式",
        "space": "空格",
        "select_or_unselect": "选择/取消",
        "multype_tags_edit": "批量编辑标签",
        "select_all": "全选",
        "unselect_all": "取消全选",
        "multype_mode": "多选模式",
        "already_selected_books": "已选 {books} 本",
    },
    "en": {
        "bookshelf": "Bookshelf",
        "add_book": "Add Book",
        "add_dir": "Add Directory",
        "progress": "Progress",
        "bookmark": "Bookmark",
        "help": "Help",
        "exit": "Exit",
        "setting": "Settings",
        "search": "Search",
        "stats": "Reading Stats",
        "stats_all": "All Books Stats",
        "stats_time": "Total Reading Time",
        "stats_days": "Reading Days",
        "stats_daily": "Daily Stats",
        "read": "Read Aloud",
        "chapter": "Chapter",
        "theme": "Theme",
        "language": "Language",
        "current_page": "Page",
        "auto_page": "Auto Page",
        "jump_chapter": "Jump Chapter",
        "author": "Author",
        "input_path": "Input file path:",
        "input_dir": "Input directory path:",
        "input_search": "Input search keyword:",
        "input_comment": "Input bookmark comment:",
        "input_theme": "Theme (dark/light/eye):",
        "input_lang": "Language (zh/en):",
        "input_font_color": "Font color (black/red/green/yellow/blue/magenta/cyan/white):",
        "input_bg_color": "Background color (black/red/green/yellow/blue/magenta/cyan/white):",
        "input_border_style": "Border style (round/double/single/bold/none):",
        "input_border_color": "Border color (black/red/green/yellow/blue/magenta/cyan/white):",
        "input_jump_page": "Input page number and press Enter to jump:",
        "input_jump_page_quit": "Input page number and press Enter to jump, press q to quit",
        "bookmark_list": "Bookmark List",
        "input_remind_interval": "Reading reminder interval (minutes, 0=off):",
        "remind_msg": "You've been reading for {minutes} minutes, please rest your eyes!",
        "invalid": "Invalid input",
        "pre_page": "Previous",
        "next_page": "Next",
        "delete": "Delete",
        "move": "Move",
        "select": "Select",
        "tag": "Tag",
        "input_no": "Input number",
        "no_unlimited": "The number is out of limit！",
        "wait_for_loading":"Please wait for Loading",
        "loading": "Loading",
        "novel_reader": "Novel Reader",
        "number": "NO",
        "minutes": "minites",
        "day": "day",
        "back": "Back",
        "page_no": "page {page}",
        "book_deletion_title": "Book deletion - space to select/unselect, Enter to delete, q to quit",
        "book_deletion_help": "[↑↓] Move [space] Select/Unselect [n] Next page [p] Previous page [a] Select all [c] Unselect all [Enter] Delete [q] Back",
        "book_deletion_confirm": "Confirm to delete {books} books ?",
        "book_deletion_success": "delete {books} books success",
        "reading_progress": "reading progress",
        "empty_file_or_cannot_read": "empty file or can not read",
        "aloud_r2_stop": "Read aloud - Press r to stop",
        "books": "Books",
        "unfind_type_new": "Can not find，Please type new path",
        "update_path_success": "Update path successs!",
        "update_path_fail": "Update path failed!",
        "path_not_exists": "Path invalid or file does not exists!",
        "terminal_help_text": "Press Space + Enter to back | ↑↓ Show history command",
        "terminal_title": "Terminal Mode",
        "terminal_help_text2": "Press Space + Enter to quit",
        "command_exists_code": "Command exists code",
        "command_time_unlimit": "Command timeout",
        "execute_fail": "Execution Error",
        "terminal_mode_started": "Terminal mode started",
        "file_not_exists": "File does not exists",
        "cannot_load_novel": "Load novel failed",
        "empty_directory_or_file": "Empty directory or file",
        "action_document_line": "Dealing with document lines",
        "action_document_file": "Dealing with document files",
        "action_pages": "Dealing with pages",
        "reading_from_file": "Reading from file",
        "loading_books": "Loadding books",
        "parsing_epub_data": "Parsing EPUB metadata",
        "save_to_db": "Save to database",
        "total_add_books": "Total books in path is {books}",
        "parsing_books": "Parsing books {books}",
        "tag_mode": "Tag mode: Press space to select/unselect，Enter to confirm",
        "tag_management": "Tag Management",
        "edit_book": "Edit Book",
        "add_tag": "Add Tag",
        "remove_tag": "Remove Tag",
        "filter_by_tag": "Filter by Tag",
        "batch_edit": "Batch Edit",
        "edit_title": "Edit Title",
        "edit_author": "Edit Author",
        "edit_tags": "Edit Tags",
        "save_changes": "Save Changes",
        "tag_already_exists": "Tag already exists",
        "tag_added": "Tag added",
        "tag_removed": "Tag removed",
        "no_tags": "No tags",
        "switch_tag_mode":"Switch tag mode",
        "confirm":"Confirm",
        "multype_tags_edit_books": "Multype tags edit books ({books})",
        "out_multype_mode": "Multype mode exists",
        "in_multype_mode": "Into multype mode",
        "space": "Space",
        "select_or_unselect": "Select/Unselect",
        "multype_tags_edit": "Multype edit tags",
        "select_all": "Select All",
        "unselect_all": "Unselect All",
        "multype_mode": "Multype Mode",
        "already_selected_books": "Selected {books}",
    }
}

def get_text(key, lang="zh"):
    return LANGS.get(lang, LANGS["zh"]).get(key, key)

./main.py
----------------------------------------
import curses
import sys
import os
import signal  # 添加signal导入
from bookshelf import Bookshelf
from settings import Settings
from lang import get_text
from reader import NovelReader

def signal_handler(sig, frame):
    # 清理工作
    sys.exit(0)

def main(stdscr):
    curses.curs_set(0)
    # 设置信号处理
    signal.signal(signal.SIGINT, signal_handler)
    settings = Settings()
    bookshelf = Bookshelf(settings["lang"])
    reader = NovelReader(stdscr, bookshelf, settings)

    # 支持命令行直接打开文件
    if len(sys.argv) > 1:
        novel_path = sys.argv[1]
        if not os.path.isfile(novel_path):
            stdscr.addstr(0, 0, f"{get_text('file_not_exists', settings['lang'])}: {novel_path}")
            stdscr.refresh()
            stdscr.getch()
            return
        bookshelf.add_book(novel_path, width=settings["width"], height=settings["height"], line_spacing=settings["line_spacing"])
        if bookshelf.books:
            reader.load_book(bookshelf.books[-1])
        else:
            stdscr.addstr(0, 0, f"{get_text('cannot_load_novel', settings['lang'])}: {novel_path}")
            stdscr.refresh()
            stdscr.getch()
            return
    # 进入主循环
    reader.run()

if __name__ == '__main__':
    curses.wrapper(main)

./reader.py
----------------------------------------
import subprocess
import shlex
import tempfile
import os
import curses
import time
import pyttsx3
import threading
from utils import build_pages_from_file
from db import DBManager
from stats import StatsManager
from ui_theme import init_colors, BORDER_CHARS, color_pair_idx
from lang import get_text
from epub_utils import parse_epub

KEYS_HELP = [
    "←/→/PgUp/PgDn/j/k 翻页",
    "a 自动翻页",
    "b 添加书签",
    "B 书签列表",
    "g 跳页",
    "m 书架",
    "s 设置",
    "r 朗读/停止",
    "/ 搜索",
    "? 帮助",
    "q 退出",
    "t 阅读统计",
    "T 全部统计",
    "x 删除书籍",
    "空格 老板键"
]

def input_box(stdscr, prompt, maxlen=50, color_pair=2, y=None, x=None):
    """美化输入框，居中显示"""
    max_y, max_x = stdscr.getmaxyx()
    if y is None:
        y = max_y // 2 - 1
    if x is None:
        x = max_x // 2 - len(prompt) // 2 - 8
    box_width = max(len(prompt) + maxlen + 8, 30)
    stdscr.attron(curses.color_pair(color_pair) | curses.A_BOLD)
    # 边框
    stdscr.addstr(y, x, "╭" + "─" * (box_width-2) + "╮")
    stdscr.addstr(y+1, x, "│" + " " * (box_width-2) + "│")
    stdscr.addstr(y+2, x, "╰" + "─" * (box_width-2) + "╯")
    # 提示
    stdscr.addstr(y+1, x+2, prompt)
    stdscr.attroff(curses.color_pair(color_pair) | curses.A_BOLD)
    stdscr.refresh()
    
    # 使用更安全的方法处理输入
    curses.echo()
    try:
        # 使用getstr但捕获可能的解码错误
        val_bytes = stdscr.getstr(y+1, x+2+len(prompt), maxlen)
        
        # 尝试UTF-8解码，如果失败则使用替代方法
        try:
            val = val_bytes.decode('utf-8').strip()
        except UnicodeDecodeError:
            # 如果UTF-8解码失败，尝试使用latin-1编码
            val = val_bytes.decode('latin-1').strip()
    except Exception as e:
        # 如果出现任何异常，返回空字符串
        val = ""
    
    curses.noecho()
    return val

class NovelReader:
    def __init__(self, stdscr, bookshelf, settings):
        self.stdscr = stdscr
        self.bookshelf = bookshelf
        self.settings = settings
        self.db = DBManager()
        self.stats = StatsManager()
        self.engine = pyttsx3.init()
        self.current_book = None
        self.current_pages = []
        self.current_page_idx = 0
        self.start_time = time.time()
        self.auto_page = False
        self.search_keyword = ""
        self.highlight_lines = set()
        self.running = True
        self.lang = self.settings["lang"]
        self.last_remind_time = time.time()
        self.remind_minutes = self.settings["remind_interval"]
        self.is_reading = False  # 添加朗读状态标志
        self.reading_thread = None  # 添加朗读线程
        self.boss_mode = False  # 老板键模式标志
        self.terminal_history = []  # 终端命令历史
        self.terminal_position = 0  # 终端历史位置
        self.selected_tags = set() # 存储选中的标签
        init_colors(theme=self.settings["theme"], settings=self.settings)

    def get_safe_height(self):
        """计算安全的显示高度，考虑边框和边距"""
        max_y, _ = self.stdscr.getmaxyx()
        margin = self.settings["margin"]
        # 预留顶部/底部/状态栏空间（9行）
        return max(1, min(self.settings["height"], max_y - margin - 9))

    def show_loading_screen(self, message, progress=None):
        """显示美观的加载屏幕，支持进度显示"""
        self.stdscr.clear()
        max_y, max_x = self.stdscr.getmaxyx()
        
        # 绘制边框
        self.draw_border()
        
        # 显示标题
        title = f"📖 {get_text('novel_reader', self.lang)} - {get_text('loading', self.lang)}"
        self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
        self.stdscr.addstr(2, max_x // 2 - len(title) // 2, title)
        self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
        
        # 显示消息
        self.stdscr.attron(curses.color_pair(2) | curses.A_BOLD)
        self.stdscr.addstr(max_y // 2 - 2, max_x // 2 - len(message) // 2, message)
        self.stdscr.attroff(curses.color_pair(2) | curses.A_BOLD)
        
        # 显示动态旋转图标
        spinner_chars = ["⣾", "⣽", "⣻", "⢿", "⡿", "⣟", "⣯", "⣷"]
        spinner = spinner_chars[int(time.time() * 8) % len(spinner_chars)]
        self.stdscr.attron(curses.color_pair(3) | curses.A_BOLD)
        self.stdscr.addstr(max_y // 2, max_x // 2 - 1, spinner)
        self.stdscr.attroff(curses.color_pair(3) | curses.A_BOLD)
        
        # 显示进度条（如果有进度信息）
        if progress is not None:
            # 解析进度信息
            if "/" in progress:
                current, total = progress.split("/")
                try:
                    current_val = int(current)
                    total_val = int(total)
                    percent = current_val / total_val if total_val > 0 else 0
                    
                    # 绘制进度条
                    bar_width = min(40, max_x - 10)
                    filled = int(bar_width * percent)
                    bar = "[" + "█" * filled + "░" * (bar_width - filled) + "]"
                    bar_text = f"{bar} {int(percent*100)}%"
                    
                    self.stdscr.attron(curses.color_pair(2) | curses.A_BOLD)
                    self.stdscr.addstr(max_y // 2 + 2, max_x // 2 - len(bar_text) // 2, bar_text)
                    self.stdscr.attroff(curses.color_pair(2) | curses.A_BOLD)
                    
                    # 显示详细进度
                    detail_text = f"{current_val}/{total_val}"
                    self.stdscr.attron(curses.color_pair(3))
                    self.stdscr.addstr(max_y // 2 + 4, max_x // 2 - len(detail_text) // 2, detail_text)
                    self.stdscr.attroff(curses.color_pair(3))
                except:
                    pass
        
        # 显示提示信息
        tip = f"{get_text('wait_for_loading', self.lang)}..."
        self.stdscr.attron(curses.color_pair(1) | curses.A_DIM)
        self.stdscr.addstr(max_y - 3, max_x // 2 - len(tip) // 2, tip)
        self.stdscr.attroff(curses.color_pair(1) | curses.A_DIM)
        
        self.stdscr.refresh()

    def load_book(self, book):
        # 使用设置的宽度，而不是有效宽度
        width = self.settings["width"]
        height = self.get_safe_height()
        line_spacing = self.settings["line_spacing"]
        
        # 显示加载屏幕
        self.show_loading_screen(get_text("loading_books", self.lang))
        time.sleep(0.5)  # 短暂延迟让用户看到初始画面
        
        # 进度回调函数
        def progress_callback(message):
            # 解析消息中的进度信息
            progress = None
            if ":" in message and "/" in message:
                parts = message.split(":")
                if len(parts) > 1 and "/" in parts[1]:
                    progress = parts[1].strip()
            
            self.show_loading_screen(message, progress)
        
        if book["type"] == "epub":
            self.show_loading_screen(get_text("parsing_epub_data", self.lang))
            chapters = parse_epub(book["path"], width, height, line_spacing, self.lang)
            
            pages = []
            total_chapters = len(chapters)
            for i, ch in enumerate(chapters):
                # 添加章节标题页
                pages.append([f"《{ch['title']}》"])
                # 添加章节内容页
                pages.extend(ch["pages"])
                
                # 每处理一章更新一次显示
                if i % 2 == 0:  # 每两章更新一次，避免过于频繁
                    self.show_loading_screen(f"{get_text('action_document_line', self.lang)}: {i+1}/{total_chapters}")
            
            self.current_pages = pages
            self.show_loading_screen(get_text("action_pages", self.lang))
            time.sleep(0.5)
        else:
            # 使用新版 utils.build_pages_from_file，确保不丢失任何内容
            self.current_pages = build_pages_from_file(
                book["path"], width, height, line_spacing, progress_callback, self.lang
            )
            self.show_loading_screen(get_text("action_pages", self.lang))
            time.sleep(0.5)
        # 在解析完成后检查是否为空
        if not self.current_pages:
            self.current_pages = [[get_text("empty_file_or_cannot_read", self.lang)]]
        

        self.current_book = book
        self.current_page_idx = self.db.get_progress(book["id"])
        self.highlight_lines = set()

    def show_bookshelf(self):
        """显示书架界面，支持标签过滤和批量编辑"""
        books_per_page = max(1, self.get_safe_height() - 8)
        page = 0
        search_keyword = ""
        
        # 初始过滤书籍列表
        filtered_books = self.bookshelf.books
        
        # 如果有选中的标签，按标签过滤
        if self.selected_tags:
            filtered_books = [
                book for book in filtered_books 
                if any(tag in book["tags"] for tag in self.selected_tags)
            ]
        
        # 如果有搜索关键词，进一步过滤
        if search_keyword:
            filtered_books = [
                book for book in filtered_books 
                if search_keyword.lower() in book["title"].lower()
            ]
        
        # 按标题排序
        filtered_books.sort(key=lambda x: x["title"].lower())
        
        current_selection = 0
        book_selected = False
        tag_mode = False  # 标签模式标志
        selected_book_ids = set()  # 存储选中的书籍ID
        
        while not book_selected and self.running:
            self.stdscr.clear()
            max_y, max_x = self.stdscr.getmaxyx()
            total_books = len(filtered_books)
            total_pages = (total_books + books_per_page - 1) // books_per_page if total_books else 1
            start_idx = page * books_per_page
            end_idx = min(start_idx + books_per_page, total_books)
            current_page_books = filtered_books[start_idx:end_idx]
            
            # 显示标题和标签信息
            title_str = "📚 " + get_text("bookshelf", self.lang) + f" [{page+1}/{total_pages}]"
            if search_keyword:
                title_str += f" | {get_text('search', self.lang)}: {search_keyword}"
            if self.selected_tags:
                title_str += f" | 标签: {', '.join(self.selected_tags)}"
            if tag_mode:
                title_str += f" | 多选模式: 已选 {len(selected_book_ids)} 本"
                
            self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
            self.stdscr.addstr(0, max_x // 2 - len(title_str) // 2, title_str)
            self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
            
            # 显示书籍列表
            for idx, book in enumerate(current_page_books):
                exists = "" if book["exists"] else "❌"
                selected = "[✓]" if book["id"] in selected_book_ids else "[ ]"
                tags_str = ",".join(book["tags"]) if book["tags"] else "无标签"
                line = f" {selected} {start_idx+idx+1:02d} | {exists} {book['title'][:25]:<25} | {get_text('author', self.lang)}:{book['author'][:15]:<15} | {get_text('tag', self.lang)}:{tags_str}"
                
                # 根据文件是否存在设置颜色
                if not book["exists"]:
                    color = curses.color_pair(3)  # 红色，表示文件不存在
                else:
                    color = curses.color_pair(2) if idx % 2 else curses.color_pair(1)
                
                # 如果是当前选中的行，添加反色效果
                if idx == current_selection:
                    color |= curses.A_REVERSE
                    
                self.stdscr.attron(color | curses.A_BOLD)
                self.stdscr.addstr(idx+2, 2, line[:max_x-3])
                self.stdscr.attroff(color | curses.A_BOLD)
                    
            # 显示操作提示
            help_lines = [
                f"[a] {get_text('add_book', self.lang)}  [d] {get_text('add_dir', self.lang)} [/] {get_text('search', self.lang)}",
                f"[t] 标签管理 [e] 编辑书籍 [x] {get_text('delete', self.lang)}  [q] {get_text('exit', self.lang)}",
            ]
            
            if tag_mode:
                help_lines.append(f"[l] 退出多选模式 [空格] 选择/取消 [b] 批量编辑标签 [a] 全选 [c] 取消全选")
            else:
                help_lines.append(f"[l] 进入多选模式 [Enter] {get_text('select', self.lang)}")
            
            for i, line in enumerate(help_lines):
                self.stdscr.attron(curses.color_pair(3) | curses.A_DIM)
                self.stdscr.addstr(books_per_page+3+i, 2, line[:max_x-3])
                self.stdscr.attroff(curses.color_pair(3) | curses.A_DIM)
                
            self.stdscr.refresh()
            
            c = self.stdscr.getch()
            if c == ord('a'):
                if tag_mode:
                    # 在多选模式下，全选当前页
                    for book in current_page_books:
                        selected_book_ids.add(book["id"])
                else:
                    # 正常模式下添加书籍
                    path = input_box(self.stdscr, get_text("input_path", self.lang), maxlen=120)
                    if path:
                        self.bookshelf.add_book(path, width=self.settings["width"], height=self.settings["height"], line_spacing=self.settings["line_spacing"])
                        # 刷新书籍列表
                        self.bookshelf.books = self.bookshelf.load_books()
                        # 重新应用过滤
                        filtered_books = self.bookshelf.books
                        if search_keyword:
                            filtered_books = [book for book in filtered_books if search_keyword.lower() in book["title"].lower()]
                        if self.selected_tags:
                            filtered_books = [book for book in filtered_books if any(tag in book["tags"] for tag in self.selected_tags)]
            elif c == ord('d'):
                dir_path = input_box(self.stdscr, get_text("input_dir", self.lang), maxlen=120)
                if dir_path:
                    self.bookshelf.add_dir(dir_path, width=self.settings["width"], height=self.settings["height"], line_spacing=self.settings["line_spacing"])
                    # 刷新书籍列表
                    self.bookshelf.books = self.bookshelf.load_books()
                    # 重新应用过滤
                    filtered_books = self.bookshelf.books
                    if search_keyword:
                        filtered_books = [book for book in filtered_books if search_keyword.lower() in book["title"].lower()]
                    if self.selected_tags:
                        filtered_books = [book for book in filtered_books if any(tag in book["tags"] for tag in self.selected_tags)]
            elif c == ord('/'):
                kw = input_box(self.stdscr, get_text("input_search", self.lang), maxlen=30)
                search_keyword = kw
                page = 0
                current_selection = 0
                # 重新应用过滤
                filtered_books = self.bookshelf.books
                if search_keyword:
                    filtered_books = [book for book in filtered_books if search_keyword.lower() in book["title"].lower()]
                if self.selected_tags:
                    filtered_books = [book for book in filtered_books if any(tag in book["tags"] for tag in self.selected_tags)]
            elif c == ord('x'):
                if tag_mode and selected_book_ids:
                    # 在多选模式下删除选中的书籍
                    confirm = input_box(self.stdscr, f"确认删除 {len(selected_book_ids)} 本书籍? (y/N): ", maxlen=1)
                    if confirm.lower() == 'y':
                        self.bookshelf.delete_books(list(selected_book_ids))
                        selected_book_ids.clear()
                        # 刷新书籍列表
                        self.bookshelf.books = self.bookshelf.load_books()
                        # 重新应用过滤
                        filtered_books = self.bookshelf.books
                        if search_keyword:
                            filtered_books = [book for book in filtered_books if search_keyword.lower() in book["title"].lower()]
                        if self.selected_tags:
                            filtered_books = [book for book in filtered_books if any(tag in book["tags"] for tag in self.selected_tags)]
                else:
                    self.show_book_deletion()
                    # 刷新书籍列表
                    self.bookshelf.books = self.bookshelf.load_books()
                    # 重新应用过滤
                    filtered_books = self.bookshelf.books
                    if search_keyword:
                        filtered_books = [book for book in filtered_books if search_keyword.lower() in book["title"].lower()]
                    if self.selected_tags:
                        filtered_books = [book for book in filtered_books if any(tag in book["tags"] for tag in self.selected_tags)]
            elif c == ord('t'):
                self.show_tag_management()
                # 刷新书籍列表
                self.bookshelf.books = self.bookshelf.load_books()
                # 重新应用过滤
                filtered_books = self.bookshelf.books
                if search_keyword:
                    filtered_books = [book for book in filtered_books if search_keyword.lower() in book["title"].lower()]
                if self.selected_tags:
                    filtered_books = [book for book in filtered_books if any(tag in book["tags"] for tag in self.selected_tags)]
            elif c == ord('e'):
                if current_page_books:
                    book = current_page_books[current_selection]
                    self.edit_book_metadata(book["id"])
                    # 刷新书籍列表
                    self.bookshelf.books = self.bookshelf.load_books()
                    # 重新应用过滤
                    filtered_books = self.bookshelf.books
                    if search_keyword:
                        filtered_books = [book for book in filtered_books if search_keyword.lower() in book["title"].lower()]
                    if self.selected_tags:
                        filtered_books = [book for book in filtered_books if any(tag in book["tags"] for tag in self.selected_tags)]
            elif c == ord('l'):
                # 切换标签模式
                tag_mode = not tag_mode
                if not tag_mode:
                    # 退出多选模式时清空选择
                    selected_book_ids.clear()
            elif c == ord('b') and tag_mode and selected_book_ids:
                # 批量编辑标签
                self.show_batch_tag_edit(list(selected_book_ids))
                # 刷新书籍列表
                self.bookshelf.books = self.bookshelf.load_books()
                # 重新应用过滤
                filtered_books = self.bookshelf.books
                if search_keyword:
                    filtered_books = [book for book in filtered_books if search_keyword.lower() in book["title"].lower()]
                if self.selected_tags:
                    filtered_books = [book for book in filtered_books if any(tag in book["tags"] for tag in self.selected_tags)]
            elif c == ord('c') and tag_mode:
                # 取消全选
                selected_book_ids.clear()
            elif c == ord('q'):
                self.running = False
                break
            elif c == curses.KEY_UP:
                if current_selection > 0:
                    current_selection -= 1
                elif current_selection == 0 and page > 0:
                    page -= 1
                    current_selection = books_per_page - 1
            elif c == curses.KEY_DOWN:
                if current_selection < len(current_page_books) - 1:
                    current_selection += 1
                elif current_selection == len(current_page_books) - 1 and page < total_pages - 1:
                    page += 1
                    current_selection = 0
            elif c == curses.KEY_NPAGE or c == ord('n'):
                if page < total_pages - 1:
                    page += 1
                    current_selection = 0
            elif c == curses.KEY_PPAGE or c == ord('p'):
                if page > 0:
                    page -= 1
                    current_selection = 0
            elif c == ord(' ') and tag_mode:
                # 在多选模式下，空格键选择/取消选择当前书籍
                if current_page_books:
                    book = current_page_books[current_selection]
                    if book["id"] in selected_book_ids:
                        selected_book_ids.remove(book["id"])
                    else:
                        selected_book_ids.add(book["id"])
            elif c in (10, 13) and not tag_mode:  # 回车键选择当前书籍（非多选模式）
                if current_page_books:
                    book = current_page_books[current_selection]
                    if not book["exists"]:
                        # 文件不存在，提示更新路径
                        self.update_missing_book_path(book["id"])
                    else:
                        self.load_book(book)
                        book_selected = True
            elif c in range(48, 58):  # 数字键0-9，支持快速跳转
                # 保存当前按键
                key_char = chr(c)
                # 显示输入的数字
                self.stdscr.addstr(books_per_page+7, 2, f"{get_text('input_no', self.lang)}: {key_char}")
                self.stdscr.refresh()
                
                # 等待可能的第二个数字（两位数）
                second_c = self.stdscr.getch()
                if second_c in range(48, 58):  # 第二个数字
                    key_char += chr(second_c)
                    self.stdscr.addstr(books_per_page+7, 2, f"{get_text('input_no', self.lang)}: {key_char}")
                    self.stdscr.refresh()
                    
                try:
                    idx = int(key_char) - 1
                    if 0 <= idx < total_books:
                        book = filtered_books[idx]
                        if not book["exists"]:
                            # 文件不存在，提示更新路径
                            self.update_missing_book_path(book["id"])
                        else:
                            self.load_book(book)
                            book_selected = True
                    else:
                        self.stdscr.addstr(books_per_page+7, 2, get_text('no_limited', self.lang))
                        self.stdscr.refresh()
                        time.sleep(1)
                except:
                    self.stdscr.addstr(books_per_page+7, 2, get_text('invalid', self.lang))
                    self.stdscr.refresh()
                    time.sleep(1)

    def show_tag_management(self):
        """显示标签管理界面 - 修复删除功能"""
        all_tags = self.bookshelf.get_all_tags()
        selected_tags = self.selected_tags.copy()
        current_selection = 0
        
        while True:
            self.stdscr.clear()
            max_y, max_x = self.stdscr.getmaxyx()
            
            # 显示标题
            title = "🏷️ 标签管理"
            self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
            self.stdscr.addstr(0, max_x // 2 - len(title) // 2, title)
            self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
            
            # 显示分隔线
            sep_line = "─" * (max_x - 4)
            self.stdscr.attron(curses.color_pair(10))
            self.stdscr.addstr(1, 2, sep_line)
            self.stdscr.attroff(curses.color_pair(10))
            
            # 显示标签列表
            for idx, tag in enumerate(all_tags):
                selected = "[✓]" if tag in selected_tags else "[ ]"
                line = f" {selected} {tag}"
                
                color = curses.color_pair(2) if idx % 2 else curses.color_pair(1)
                if idx == current_selection:
                    color |= curses.A_REVERSE
                    
                self.stdscr.attron(color)
                self.stdscr.addstr(idx+3, 4, line[:max_x-8])
                self.stdscr.attroff(color)
            
            # 显示操作提示
            help_text = "[空格] 选择/取消 [a] 添加标签 [d] 删除标签 [Enter] 应用筛选 [q] 返回"
            self.stdscr.attron(curses.color_pair(3) | curses.A_DIM)
            self.stdscr.addstr(max_y-3, 4, help_text[:max_x-8])
            self.stdscr.attroff(curses.color_pair(3) | curses.A_DIM)
            
            # 显示分隔线
            self.stdscr.attron(curses.color_pair(10))
            self.stdscr.addstr(max_y-4, 2, sep_line)
            self.stdscr.attroff(curses.color_pair(10))
            
            self.stdscr.refresh()
            
            c = self.stdscr.getch()
            if c == ord('q'):
                break
            elif c == curses.KEY_UP:
                if current_selection > 0:
                    current_selection -= 1
            elif c == curses.KEY_DOWN:
                if current_selection < len(all_tags) - 1:
                    current_selection += 1
            elif c == ord(' '):  # 空格键选择/取消选择标签
                if all_tags:
                    tag = all_tags[current_selection]
                    if tag in selected_tags:
                        selected_tags.remove(tag)
                    else:
                        selected_tags.add(tag)
            elif c == ord('a'):  # 添加新标签
                new_tag = input_box(self.stdscr, "输入新标签名称: ", maxlen=20)
                if new_tag:
                    # 检查标签是否已存在
                    if new_tag not in all_tags:
                        self.bookshelf.db.add_tag(new_tag)
                        all_tags = self.bookshelf.get_all_tags()  # 刷新标签列表
                    else:
                        # 显示错误消息
                        self.stdscr.addstr(max_y-2, 4, "标签已存在!")
                        self.stdscr.refresh()
                        time.sleep(1)
            elif c == ord('d'):  # 删除标签
                if all_tags:
                    tag = all_tags[current_selection]
                    confirm = input_box(self.stdscr, f"确认删除标签 '{tag}'? (y/N): ", maxlen=1)
                    if confirm.lower() == 'y':
                        if self.bookshelf.delete_tag(tag):
                            # 从所有标签列表中移除
                            all_tags = self.bookshelf.get_all_tags()
                            # 从选中标签中移除
                            if tag in selected_tags:
                                selected_tags.remove(tag)
                            # 显示成功消息
                            self.stdscr.addstr(max_y-2, 4, f"已删除标签: {tag}")
                            self.stdscr.refresh()
                            time.sleep(1)
                        else:
                            # 显示错误消息
                            self.stdscr.addstr(max_y-2, 4, "删除标签失败!")
                            self.stdscr.refresh()
                            time.sleep(1)
            elif c in (10, 13):  # 回车键应用筛选
                self.selected_tags = selected_tags
                break
        
        # 返回书架主界面
        self.show_bookshelf()

    def edit_book_metadata(self, book_id):
        """编辑书籍元数据"""
        book = self.bookshelf.get_book_by_id(book_id)
        if not book:
            return
            
        # 获取当前信息
        current_title = book["title"]
        current_author = book["author"]
        current_tags = ",".join(book["tags"])
        
        # 显示编辑界面
        self.stdscr.clear()
        max_y, max_x = self.stdscr.getmaxyx()
        
        title = "📝 编辑书籍信息"
        self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
        self.stdscr.addstr(0, max_x // 2 - len(title) // 2, title)
        self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
        
        # 显示当前信息
        self.stdscr.addstr(2, 4, f"书名: {current_title}")
        self.stdscr.addstr(3, 4, f"作者: {current_author}")
        self.stdscr.addstr(4, 4, f"标签: {current_tags}")
        
        # 显示操作提示
        help_text = "[t] 编辑标题 [a] 编辑作者 [g] 编辑标签 [q] 返回"
        self.stdscr.attron(curses.color_pair(3) | curses.A_DIM)
        self.stdscr.addstr(6, 4, help_text[:max_x-8])
        self.stdscr.attroff(curses.color_pair(3) | curses.A_DIM)
        
        self.stdscr.refresh()
        
        while True:
            c = self.stdscr.getch()
            if c == ord('q'):
                break
            elif c == ord('t'):  # 编辑标题
                new_title = input_box(self.stdscr, "新书名: ", maxlen=100, y=2, x=10)
                if new_title:
                    current_title = new_title
                    self.stdscr.addstr(2, 10, " " * (max_x-20))
                    self.stdscr.addstr(2, 10, current_title)
                    self.stdscr.refresh()
            elif c == ord('a'):  # 编辑作者
                new_author = input_box(self.stdscr, "新作者: ", maxlen=50, y=3, x=10)
                if new_author:
                    current_author = new_author
                    self.stdscr.addstr(3, 10, " " * (max_x-20))
                    self.stdscr.addstr(3, 10, current_author)
                    self.stdscr.refresh()
            elif c == ord('g'):  # 编辑标签
                new_tags = input_box(self.stdscr, "新标签(逗号分隔): ", maxlen=100, y=4, x=10)
                if new_tags is not None:
                    current_tags = new_tags
                    self.stdscr.addstr(4, 10, " " * (max_x-20))
                    self.stdscr.addstr(4, 10, current_tags)
                    self.stdscr.refresh()
            elif c in (10, 13):  # 回车键保存
                self.bookshelf.update_book_metadata(book_id, current_title, current_author, current_tags)
                break

    def draw_border(self):
        style = self.settings["border_style"]
        color = self.settings["border_color"]
        max_y, max_x = self.stdscr.getmaxyx()
        v, h, c = BORDER_CHARS.get(style, BORDER_CHARS["round"])
        border_color_pair = color_pair_idx(10, color, self.settings["bg_color"])
        if style != "none":
            for i in range(1, max_y-2):
                self.stdscr.attron(border_color_pair)
                self.stdscr.addstr(i, 0, v)
                self.stdscr.addstr(i, max_x-2, v)
                self.stdscr.attroff(border_color_pair)
            for i in range(1, max_x-2):
                self.stdscr.attron(border_color_pair)
                self.stdscr.addstr(0, i, h)
                self.stdscr.addstr(max_y-2, i, h)
                self.stdscr.attroff(border_color_pair)
            self.stdscr.attron(border_color_pair)
            self.stdscr.addstr(0, 0, c)
            self.stdscr.addstr(0, max_x-2, c)
            self.stdscr.addstr(max_y-2, 0, c)
            self.stdscr.addstr(max_y-2, max_x-2, c)
            self.stdscr.attroff(border_color_pair)

    def display(self):
        self.stdscr.clear()
        max_y, max_x = self.stdscr.getmaxyx()
        margin = self.settings["margin"]
        padding = self.settings["padding"]
        height = self.get_safe_height()
        self.draw_border()

        # 添加对空页面的检查
        if not self.current_pages:
            empty_msg = f"{get_text('empty_file_or_cannot_read', self.lang)}"
            self.stdscr.attron(curses.color_pair(2) | curses.A_BOLD)
            self.stdscr.addstr(margin + height // 2, max_x // 2 - len(empty_msg) // 2, empty_msg)
            self.stdscr.attroff(curses.color_pair(2) | curses.A_BOLD)
            self.stdscr.refresh()
            return
        
        page_lines = self.current_pages[self.current_page_idx] if self.current_pages else []
        if self.current_pages and self.current_book:
            progress = int((self.current_page_idx+1)/len(self.current_pages)*100)
            bar_len = int(progress / 5)
            
            title_str = f"《{self.current_book['title']}》{get_text('reading_progress', self.lang)}:[{'█'*bar_len}{'-'*(20-bar_len)}] {progress:3d}%"
            self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
            self.stdscr.addstr(margin, max_x // 2 - len(title_str)//2, title_str[:max_x-4])
            self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
            
        for idx, line in enumerate(page_lines[:height]):
            y = idx + margin + 2
            x = padding + 2
            if y >= max_y - 7:
                break
            safe_line = line.replace('\r', '').replace('\n', '').replace('\t', ' ')
            # 显示时截断到屏幕宽度
            safe_line = safe_line[:max_x - x - 3] if len(safe_line) > (max_x - x - 3) else safe_line
            try:
                if safe_line.startswith("《") and safe_line.endswith("》"):
                    self.stdscr.attron(curses.color_pair(2) | curses.A_BOLD)
                    self.stdscr.addstr(y, x, safe_line.center(self.settings["width"])[:max_x - x - 3])
                    self.stdscr.attroff(curses.color_pair(2) | curses.A_BOLD)
                elif idx in self.highlight_lines:
                    self.stdscr.attron(curses.color_pair(2) | curses.A_REVERSE)
                    self.stdscr.addstr(y, x, safe_line)
                    self.stdscr.attroff(curses.color_pair(2) | curses.A_REVERSE)
                else:
                    self.stdscr.attron(curses.color_pair(1))
                    self.stdscr.addstr(y, x, safe_line)
                    self.stdscr.attroff(curses.color_pair(1))
            except curses.error:
                pass
                
        if self.current_pages:
            bar = f""
            self.stdscr.attron(curses.color_pair(3) | curses.A_BOLD)
            self.stdscr.addstr(margin+height+1, 2, bar[:max_x-4])
            self.stdscr.attroff(curses.color_pair(3) | curses.A_BOLD)
            
        if self.settings["status_bar"] and self.current_book:
            status = f"📖 {self.current_book['title']} | {get_text('author', self.lang)}: {self.current_book['author']} | {get_text('current_page', self.lang)}: {self.current_page_idx+1}/{len(self.current_pages)}"
            self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
            self.stdscr.addstr(margin+height+2, 2, status[:max_x-4])
            self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
            
        # 显示朗读状态
        if self.is_reading:
            reading_status = f"🔊 {get_text('aloud_r2_stop', self.lang)}"
            self.stdscr.attron(curses.color_pair(2) | curses.A_BOLD)
            self.stdscr.addstr(margin+height+3, 2, reading_status[:max_x-4])
            self.stdscr.attroff(curses.color_pair(2) | curses.A_BOLD)
            
        help_str = " | ".join(KEYS_HELP)
        self.stdscr.attron(curses.color_pair(2) | curses.A_DIM)
        self.stdscr.addstr(margin+height+4, 2, help_str[:max_x-4])
        self.stdscr.attroff(curses.color_pair(2) | curses.A_DIM)
        self.stdscr.refresh()

    def handle_input(self):
        c = self.stdscr.getch()
        if self.boss_mode:
            # 老板模式关闭自动翻页、朗读
            if self.is_reading:
                self.stop_reading()
            if self.is_reading:
                self.stop_reading()

            # 在老板键模式下处理输入
            self.handle_terminal_input(c)
            return

        if c == ord(' '):  # 空格键 - 老板键
            self.toggle_boss_mode()
        elif c in (curses.KEY_RIGHT, curses.KEY_NPAGE, ord('j')):
            if self.is_reading:
                self.stop_reading()
            self.next_page()
        elif c in (curses.KEY_LEFT, curses.KEY_PPAGE, ord('k')):
            if self.is_reading:
                self.stop_reading()
            self.prev_page()
        elif c == ord('a'):
            if self.is_reading:
                self.stop_reading()
            self.auto_page = not self.auto_page
        elif c == ord('b'):
            if self.is_reading:
                self.stop_reading()
            self.add_bookmark()
        elif c == ord('B'):
            if self.is_reading:
                self.stop_reading()
            self.show_bookmarks()
        elif c == ord('m'):
            if self.is_reading:
                self.stop_reading()
            self.show_bookshelf()
        elif c == ord('q'):
            self.running = False
        elif c == ord('r'):
            self.toggle_reading()  # 修改为切换朗读状态
        elif c == ord('/'):
            if self.is_reading:
                self.stop_reading()
            self.search()
        elif c == ord('s'):
            if self.is_reading:
                self.stop_reading()
            self.change_settings()
        elif c == ord('?'):
            if self.is_reading:
                self.stop_reading()
            self.show_help()
        elif c == ord('g'):
            if self.is_reading:
                self.stop_reading()
            self.jump_page()
        elif c == ord('t'):
            if self.is_reading:
                self.stop_reading()
            self.show_stats()
        elif c == ord('T'):
            if self.is_reading:
                self.stop_reading()
            self.show_all_books_stats()

    def next_page(self):
        if self.current_page_idx < len(self.current_pages)-1:
            self.current_page_idx += 1

    def prev_page(self):
        if self.current_page_idx > 0:
            self.current_page_idx -= 1

    def save_progress(self):
        if self.current_book:
            self.db.save_progress(self.current_book["id"], self.current_page_idx)

    def show_bookmarks(self):
        bookmarks = self.db.get_bookmarks(self.current_book["id"])
        max_y, max_x = self.stdscr.getmaxyx()
        self.stdscr.clear()
        self.stdscr.attron(curses.color_pair(2) | curses.A_BOLD)
        self.stdscr.addstr(0, max_x // 2 - 5, get_text("bookmark_list", self.lang))
        self.stdscr.attroff(curses.color_pair(2) | curses.A_BOLD)
        for i, (page, comment) in enumerate(bookmarks[:max_y-8]):
            self.stdscr.addstr(i+2, 4, f"{i+1:02d}. {get_text('page_no', self.lang).format(page=page+1)}: {comment}"[:max_x-8])
        self.stdscr.attron(curses.color_pair(3) | curses.A_DIM)
        self.stdscr.addstr(max_y-4, 4, get_text('input_jump_page_quit', self.lang))
        self.stdscr.attroff(curses.color_pair(3) | curses.A_DIM)
        self.stdscr.refresh()
        c = self.stdscr.getch()
        if c == ord('q'):
            return
        elif c in [10, 13]:
            idx_str = input_box(self.stdscr, f"{get_text('number', self.lang)}: ", maxlen=8)
            try:
                idx = int(idx_str) - 1
                if 0 <= idx < len(bookmarks):
                    self.current_page_idx = bookmarks[idx][0]
                else:
                    self.stdscr.addstr(max_y-2, 4, get_text('no_unlimited', self.lang))
                    self.stdscr.refresh()
                    time.sleep(1)
            except:
                self.stdscr.addstr(max_y-2, 4, get_text('invalid', self.lang))
                self.stdscr.refresh()
                time.sleep(1)

    def jump_page(self):
        max_y, max_x = self.stdscr.getmaxyx()
        page_str = input_box(self.stdscr, get_text("input_jump_page", self.lang), maxlen=10)
        try:
            page_num = int(page_str)
            if 1 <= page_num <= len(self.current_pages):
                self.current_page_idx = page_num - 1
            else:
                self.stdscr.addstr(max_y-3, 2, get_text("invalid", self.lang))
                self.stdscr.refresh()
                time.sleep(1)
        except:
            self.stdscr.addstr(max_y-3, 2, get_text("invalid", self.lang))
            self.stdscr.refresh()
            time.sleep(1)

    def add_bookmark(self):
        comment = input_box(self.stdscr, get_text("input_comment", self.lang), maxlen=100)
        if comment:
            self.db.add_bookmark(self.current_book["id"], self.current_page_idx, comment)

    def toggle_reading(self):
        """切换朗读状态"""
        if self.is_reading:
            self.stop_reading()
        else:
            self.start_reading()

    def start_reading(self):
        """开始朗读"""
        if self.is_reading:
            return
            
        # 开始朗读
        self.is_reading = True
        txt = "\n".join(self.current_pages[self.current_page_idx])
        
        # 使用线程来运行朗读，避免阻塞主线程
        def run_reading():
            try:
                self.engine.say(txt)
                self.engine.runAndWait()
            except Exception as e:
                # 忽略所有异常，特别是KeyboardInterrupt
                pass
            finally:
                self.is_reading = False
                
        self.reading_thread = threading.Thread(target=run_reading)
        self.reading_thread.daemon = True
        self.reading_thread.start()

    def stop_reading(self):
        """停止朗读"""
        if self.is_reading:
            try:
                self.engine.stop()
                # 等待一小段时间让引擎停止
                time.sleep(0.1)
                self.is_reading = False
            except Exception:
                self.is_reading = False

    def search(self):
        kw = input_box(self.stdscr, get_text("input_search", self.lang), maxlen=50)
        if kw:
            self.search_keyword = kw
            self.highlight_lines = set()
            page_lines = self.current_pages[self.current_page_idx]
            for idx, line in enumerate(page_lines):
                if kw in line:
                    self.highlight_lines.add(idx)

    def check_remind(self):
        remind_interval = self.settings["remind_interval"]
        if remind_interval and remind_interval > 0:
            now = time.time()
            elapsed = now - self.last_remind_time
            if elapsed > remind_interval * 60:
                self.show_remind(int(elapsed // 60))
                self.last_remind_time = now

    def show_remind(self, minutes):
        max_y, max_x = self.stdscr.getmaxyx()
        msg = get_text("remind_msg", self.lang).format(minutes=minutes)
        box_top = max_y // 2 - 3
        box_left = max_x // 2 - len(msg) // 2 - 2
        self.stdscr.attron(curses.color_pair(2) | curses.A_BOLD)
        self.stdscr.addstr(box_top, box_left, "╭" + "─" * (len(msg)+2) + "╮")
        self.stdscr.addstr(box_top+1, box_left, "│" + msg + " │")
        self.stdscr.addstr(box_top+2, box_left, "╰" + "─" * (len(msg)+2) + "╯")
        self.stdscr.attroff(curses.color_pair(2) | curses.A_BOLD)
        self.stdscr.refresh()
        time.sleep(3)

    def change_settings(self):
        options = [
            ("width", "宽度", int, 40, 300),
            ("height", "高度", int, 10, 80),
            ("theme", get_text("input_theme", self.lang), str, ["dark", "light", "eye"]),
            ("lang", get_text("input_lang", self.lang), str, ["zh", "en"]),
            ("font_color", get_text("input_font_color", self.lang), str, ["black","red","green","yellow","blue","magenta","cyan","white"]),
            ("bg_color", get_text("input_bg_color", self.lang), str, ["black","red","green","yellow","blue","magenta","cyan","white"]),
            ("border_style", get_text("input_border_style", self.lang), str, ["round","double","single","bold","none"]),
            ("border_color", get_text("input_border_color", self.lang), str, ["black","red","green","yellow","blue","magenta","cyan","white"]),
            ("line_spacing", "行距", int, 1, 5),
            ("auto_page_interval", "自动翻页秒", int, 1, 60),
            ("status_bar", "状态栏显示", bool, [0, 1]),
            ("remind_interval", get_text("input_remind_interval", self.lang), int, 0, 120),
        ]
        curr = 0
        while True:
            self.stdscr.clear()
            max_y, max_x = self.stdscr.getmaxyx()
            self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
            self.stdscr.addstr(0, max_x // 2 - 6, "⚙️ 设置界面")
            self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
            for idx, (key, desc, typ, *meta) in enumerate(options):
                val = self.settings[key]
                line = f"{desc} [{val}]"
                if idx == curr:
                    self.stdscr.attron(curses.color_pair(2) | curses.A_REVERSE)
                    self.stdscr.addstr(idx+2, 4, line[:max_x-8])
                    self.stdscr.attroff(curses.color_pair(2) | curses.A_REVERSE)
                else:
                    self.stdscr.addstr(idx+2, 4, line[:max_x-8])
            self.stdscr.attron(curses.color_pair(3) | curses.A_DIM)
            self.stdscr.addstr(len(options)+4, 4, "回车修改，q返回")
            self.stdscr.attroff(curses.color_pair(3) | curses.A_DIM)
            self.stdscr.refresh()
            c = self.stdscr.getch()
            if c in (curses.KEY_DOWN, ord('j')):
                curr = (curr + 1) % len(options)
            elif c in (curses.KEY_UP, ord('k')):
                curr = (curr - 1) % len(options)
            elif c == ord('q'):
                init_colors(theme=self.settings["theme"], settings=self.settings)
                self.lang = self.settings["lang"]
                self.remind_minutes = self.settings["remind_interval"]
                # 重新加载当前书籍以适应新设置
                if self.current_book:
                    self.load_book(self.current_book)
                break
            elif c in (curses.KEY_ENTER, 10, 13):
                key, desc, typ, *meta = options[curr]
                newval = input_box(self.stdscr, f"{desc}新值: ", maxlen=20)
                valid = False
                if typ == int:
                    try:
                        v = int(newval)
                        if len(meta)==2 and (meta[0] <= v <= meta[1]):
                            self.settings[key] = v
                            valid = True
                    except:
                        pass
                elif typ == bool:
                    if newval.lower() in ['1', 'true', 'yes', 'y', '开', '是']:
                        self.settings[key] = True
                        valid = True
                    elif newval.lower() in ['0', 'false', 'no', 'n', '关', '否']:
                        self.settings[key] = False
                        valid = True
                elif typ == str:
                    if isinstance(meta[0], list) and newval in meta[0]:
                        self.settings[key] = newval
                        valid = True
                if not valid:
                    self.stdscr.addstr(len(options)+7, 4, get_text("invalid", self.lang))
                    self.stdscr.refresh()
                    time.sleep(1)
                else:
                    self.settings.save()
                    if key in ["theme","font_color","bg_color","border_style","border_color"]:
                        init_colors(theme=self.settings["theme"], settings=self.settings)
                    if key == "lang":
                        self.lang = self.settings["lang"]
                    if key == "remind_interval":
                        self.remind_minutes = self.settings["remind_interval"]
                    # 重新加载当前书籍以适应新设置
                    if self.current_book and key in ["width", "height", "line_spacing"]:
                        self.load_book(self.current_book)

    def show_help(self):
        max_y, max_x = self.stdscr.getmaxyx()
        self.stdscr.clear()
        
        # 绘制边框
        self.draw_border()
        
        # 标题
        title = "💡 帮助中心"
        self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
        self.stdscr.addstr(2, max_x // 2 - len(title) // 2, title)
        self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
        
        # 分隔线
        sep_line = "─" * (max_x - 6)
        self.stdscr.attron(curses.color_pair(10))
        self.stdscr.addstr(4, 3, sep_line)
        self.stdscr.attroff(curses.color_pair(10))
        
        # 分类显示帮助信息
        categories = [
            {
                "title": "📖 阅读控制",
                "items": [
                    ("←/→/PgUp/PgDn/j/k", "翻页"),
                    ("a", "自动翻页"),
                    ("g", "跳转到指定页"),
                    ("/", "搜索文本")
                ]
            },
            {
                "title": "🔖 书签功能",
                "items": [
                    ("b", "添加书签"),
                    ("B", "查看书签列表")
                ]
            },
            {
                "title": "🎵 朗读功能",
                "items": [
                    ("r", "开始/停止朗读")
                ]
            },
            {
                "title": "📚 书籍管理",
                "items": [
                    ("m", "返回书架"),
                    ("s", "设置选项")
                ]
            },
            {
                "title": "📊 统计信息",
                "items": [
                    ("t", "本书阅读统计"),
                    ("T", "全部书籍统计")
                ]
            },
            {
                "title": "👔 老板键功能",
                "items": [
                    ("空格键", "隐藏/显示阅读器"),
                    ("空格+回车", "从终端返回阅读器"),
                    ("↑↓", "浏览命令历史")
                ]
            },
            {
                "title": "⚙️ 系统操作",
                "items": [
                    ("?", "显示帮助"),
                    ("q", "退出程序")
                ]
            }
        ]
        
        y_pos = 6
        for category in categories:
            # 显示分类标题
            self.stdscr.attron(curses.color_pair(2) | curses.A_BOLD)
            self.stdscr.addstr(y_pos, 5, category["title"])
            self.stdscr.attroff(curses.color_pair(2) | curses.A_BOLD)
            
            y_pos += 1
            
            # 显示分类中的项目
            for key, desc in category["items"]:
                key_part = f"[{key}]"
                desc_part = f" {desc}"
                
                self.stdscr.attron(curses.color_pair(3) | curses.A_BOLD)
                self.stdscr.addstr(y_pos, 7, key_part)
                self.stdscr.attroff(curses.color_pair(3) | curses.A_BOLD)
                
                self.stdscr.attron(curses.color_pair(1))
                self.stdscr.addstr(y_pos, 7 + len(key_part), desc_part)
                self.stdscr.attroff(curses.color_pair(1))
                
                y_pos += 1
            
            y_pos += 1  # 分类之间的间隔
        
        # 底部提示
        tip = "按任意键返回阅读界面"
        self.stdscr.attron(curses.color_pair(1) | curses.A_DIM)
        self.stdscr.addstr(max_y - 3, max_x // 2 - len(tip) // 2, tip)
        self.stdscr.attroff(curses.color_pair(1) | curses.A_DIM)
        
        # 装饰性边框
        self.stdscr.attron(curses.color_pair(10))
        self.stdscr.addstr(max_y - 5, 3, sep_line)
        self.stdscr.attroff(curses.color_pair(10))
        
        self.stdscr.refresh()
        self.stdscr.getch()

    def show_stats(self):
        stats = self.stats.get_book_stats(self.current_book["id"])
        max_y, max_x = self.stdscr.getmaxyx()
        self.stdscr.clear()
        self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
        self.stdscr.addstr(0, max_x // 2 - 6, "📊 阅读统计")
        self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
        self.stdscr.addstr(2, 4, f"小说：{self.current_book['title']}")
        self.stdscr.addstr(3, 4, f"累计阅读时间：{stats['total_time']//60} 分钟")
        self.stdscr.addstr(4, 4, f"阅读天数：{stats['days']} 天")
        self.stdscr.addstr(6, 4, f"每日统计：")
        for idx, (date, sec) in enumerate(stats["records"][:max_y-12]):
            self.stdscr.addstr(7+idx, 6, f"{date}: {sec//60} 分钟")
        self.stdscr.addstr(max_y-2, 4, "任意键返回")
        self.stdscr.refresh()
        self.stdscr.getch()

    def show_all_books_stats(self):
        all_stats = self.stats.get_all_books_stats()
        # 修改排序方式为按标题升序
        books = sorted(self.bookshelf.books, key=lambda x: x["title"].lower())
        max_y, max_x = self.stdscr.getmaxyx()
        stats_per_page = max(1, max_y - 7)
        page = 0
        total_books = len(books)
        total_pages = (total_books + stats_per_page - 1) // stats_per_page if total_books else 1
        while True:
            self.stdscr.clear()
            self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
            self.stdscr.addstr(0, max_x // 2 - 7, f"📚 {get_text('stats_all', self.lang)}")
            self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
            start_idx = page * stats_per_page
            end_idx = min(start_idx + stats_per_page, total_books)
            y = 2
            for book in books[start_idx:end_idx]:
                book_id = book["id"]
                stat = all_stats.get(book_id, {"total_time":0, "days":0})
                line = f"{book['title'][:20]:<20} | {stat['total_time']//60:>4} {get_text('minutes', self.lang)} | {stat['days']} {get_text('day', self.lang)}"
                self.stdscr.addstr(y, 4, line[:max_x-8])
                y += 1
            self.stdscr.attron(curses.color_pair(3) | curses.A_DIM)
            page_info = f"{get_text('page_no', self.lang).format(page=f'{page+1}/{total_pages}')} [n] {get_text('next_page', self.lang)} [p] {get_text('pre_page', self.lang)} [q] {get_text('back', self.lang)}"
            self.stdscr.addstr(max_y-3, 4, page_info[:max_x-8])
            self.stdscr.attroff(curses.color_pair(3) | curses.A_DIM)
            self.stdscr.refresh()
            c = self.stdscr.getch()
            if c == ord('q'):
                break
            elif c == ord('n') and page < total_pages - 1:
                page += 1
            elif c == ord('p') and page > 0:
                page -= 1

    def toggle_boss_mode(self):
        """切换老板键模式"""
        self.boss_mode = not self.boss_mode
        if self.boss_mode:
            # 进入老板键模式
            self.terminal_input = ""
            self.terminal_output = [f"{get_text('terminal_mode_started', self.lang)}", f"{get_text('terminal_help_text2', self.lang)}", "----------------------------------------"]
            self.terminal_cursor = 0
        else:
            # 退出老板键模式
            self.terminal_history = []
            self.terminal_position = 0

    def handle_terminal_input(self, c):
        """处理终端模式下的输入"""
        if c == curses.KEY_ENTER or c == 10 or c == 13:  # 回车键
            self.execute_terminal_command()
        elif c == curses.KEY_BACKSPACE or c == 127:  # 退格键
            if self.terminal_input:
                self.terminal_input = self.terminal_input[:-1]
        elif c == curses.KEY_UP:  # 上箭头 - 历史命令
            if self.terminal_history and self.terminal_position > 0:
                self.terminal_position -= 1
                self.terminal_input = self.terminal_history[self.terminal_position]
        elif c == curses.KEY_DOWN:  # 下箭头 - 历史命令
            if self.terminal_history and self.terminal_position < len(self.terminal_history) - 1:
                self.terminal_position += 1
                self.terminal_input = self.terminal_history[self.terminal_position]
            elif self.terminal_position == len(self.terminal_history) - 1:
                self.terminal_position = len(self.terminal_history)
                self.terminal_input = ""
        elif 32 <= c <= 126:  # 可打印字符
            self.terminal_input += chr(c)
            
        self.display_terminal()

    def execute_terminal_command(self):
        """执行终端命令"""
        command = self.terminal_input.strip()
        
        # 如果命令为空或只有空格，则退出老板键模式
        if not command or command.isspace():
            self.toggle_boss_mode()
            return
            
        # 将命令添加到历史
        if not self.terminal_history or self.terminal_history[-1] != command:
            self.terminal_history.append(command)
        self.terminal_position = len(self.terminal_history)
        
        # 执行命令
        try:
            if command.lower() in ['exit', 'quit']:
                self.terminal_output.append(f"$ {command}")
                self.terminal_output.append(f"{get_text('terminal_help_text2', self.lang)}")
            else:
                self.terminal_output.append(f"$ {command}")
                
                # 使用subprocess执行命令
                result = subprocess.run(
                    command, 
                    shell=True, 
                    capture_output=True, 
                    text=True, 
                    timeout=30
                )
                
                if result.stdout:
                    self.terminal_output.extend(result.stdout.splitlines())
                if result.stderr:
                    self.terminal_output.extend(result.stderr.splitlines())
                if result.returncode != 0:
                    self.terminal_output.append(f"{get_text('command_exists_code', self.lang)}: {result.returncode}")
                    
        except subprocess.TimeoutExpired:
            self.terminal_output.append(f"{get_text('command_time_unlimit', self.lang)}")
        except Exception as e:
            self.terminal_output.append(f"{get_text('execute_fail', self.lang)}: {str(e)}")
        
        # 限制输出行数
        if len(self.terminal_output) > 100:
            self.terminal_output = self.terminal_output[-100:]
        
        self.terminal_input = ""
        self.display_terminal()

    def display_terminal(self):
        """显示终端界面"""
        self.stdscr.clear()
        max_y, max_x = self.stdscr.getmaxyx()
        
        # 显示终端标题
        title = f"💻 {get_text('terminal_title', self.lang)}"
        self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
        self.stdscr.addstr(0, max_x // 2 - len(title) // 2, title)
        self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
        
        # 显示分隔线
        sep_line = "─" * (max_x - 4)
        self.stdscr.attron(curses.color_pair(10))
        self.stdscr.addstr(1, 2, sep_line)
        self.stdscr.attroff(curses.color_pair(10))
        
        # 显示终端输出
        start_line = max(0, len(self.terminal_output) - (max_y - 6))
        for i, line in enumerate(self.terminal_output[start_line:]):
            if i < max_y - 5:
                # 截断过长的行
                display_line = line[:max_x-4] if len(line) > max_x-4 else line
                self.stdscr.addstr(i + 2, 2, display_line)
        
        # 显示分隔线
        self.stdscr.attron(curses.color_pair(10))
        self.stdscr.addstr(max_y - 3, 2, sep_line)
        self.stdscr.attroff(curses.color_pair(10))
        
        # 显示命令输入行
        prompt = "$ "
        input_line = prompt + self.terminal_input
        # 如果输入行太长，截断并显示光标位置
        if len(input_line) > max_x - 4:
            start_pos = max(0, len(self.terminal_input) - (max_x - 6))
            display_input = input_line[start_pos:start_pos + max_x - 4]
            cursor_pos = len(prompt) + len(self.terminal_input) - start_pos
        else:
            display_input = input_line
            cursor_pos = len(display_input)
        
        self.stdscr.attron(curses.color_pair(2) | curses.A_BOLD)
        self.stdscr.addstr(max_y - 2, 2, display_input)
        self.stdscr.attroff(curses.color_pair(2) | curses.A_BOLD)
        
        # 显示光标
        if time.time() % 1 < 0.5:  # 闪烁光标
            try:
                self.stdscr.addstr(max_y - 2, 2 + cursor_pos, "_")
            except:
                pass
        
        # 显示帮助提示
        help_text = f"{get_text('terminal_help_text', self.lang)}"
        self.stdscr.attron(curses.color_pair(1) | curses.A_DIM)
        self.stdscr.addstr(max_y - 1, max_x // 2 - len(help_text) // 2, help_text)
        self.stdscr.attroff(curses.color_pair(1) | curses.A_DIM)
        
        self.stdscr.refresh()

    def show_book_deletion(self):
        """显示书籍删除界面"""
        max_y, max_x = self.stdscr.getmaxyx()
        books_per_page = max(1, self.get_safe_height() - 8)
        page = 0
        selected_books = set()  # 存储选中的书籍ID
        current_selection = 0   # 当前选中的行在当前页的索引
        
        while True:
            self.stdscr.clear()
            
            # 检查书籍存在状态
            self.bookshelf.check_books_existence()
            
            # 显示标题
            title = f"🗑️ {get_text('book_deletion_title', self.lang)}"
            self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
            self.stdscr.addstr(0, max_x // 2 - len(title) // 2, title)
            self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
            
            # 显示书籍列表
            total_books = len(self.bookshelf.books)
            total_pages = (total_books + books_per_page - 1) // books_per_page if total_books else 1
            start_idx = page * books_per_page
            end_idx = min(start_idx + books_per_page, total_books)
            current_page_books = self.bookshelf.books[start_idx:end_idx]
            
            for idx, book in enumerate(current_page_books):
                line_num = start_idx + idx + 1
                selected = "[✓]" if book["id"] in selected_books else "[ ]"
                exists = "" if book["exists"] else "❌"
                line = f" {selected} {line_num:02d} | {exists} {book['title'][:25]:<25} | {book['author'][:15]:<15}"
                
                # 根据选择状态和存在状态设置颜色
                if not book["exists"]:
                    color = curses.color_pair(3)  # 红色，表示文件不存在
                elif book["id"] in selected_books:
                    color = curses.color_pair(2) | curses.A_BOLD  # 高亮，表示已选择
                else:
                    color = curses.color_pair(1)  # 普通颜色
                    
                # 如果是当前选中的行，添加反色效果
                if idx == current_selection:
                    color |= curses.A_REVERSE
                    
                self.stdscr.attron(color)
                self.stdscr.addstr(idx + 2, 2, line[:max_x-4])
                self.stdscr.attroff(color)
            
            # 显示页码和帮助信息
            page_info = f"{get_text('page_no', self.lang).format(page=f'{page+1}/{total_pages}')}"
            self.stdscr.attron(curses.color_pair(3) | curses.A_DIM)
            self.stdscr.addstr(books_per_page + 3, 2, page_info)
            help_text = f"{get_text('book_deletion_help', self.lang)}"
            self.stdscr.addstr(books_per_page + 4, 2, help_text[:max_x-4])
            self.stdscr.attroff(curses.color_pair(3) | curses.A_DIM)
            
            self.stdscr.refresh()
            
            # 处理输入
            c = self.stdscr.getch()
            if c == ord('q'):  # 退出
                break
            elif c == curses.KEY_UP:  # 上箭头
                if current_selection > 0:
                    current_selection -= 1
                # 如果当前在第一行，且不是第一页，可以翻到上一页并选中最后一本书
                elif current_selection == 0 and page > 0:
                    page -= 1
                    current_selection = books_per_page - 1
            elif c == curses.KEY_DOWN:  # 下箭头
                if current_selection < len(current_page_books) - 1:
                    current_selection += 1
                # 如果当前在最后一行的下一页还有书，则翻到下一页并选中第一本书
                elif current_selection == len(current_page_books) - 1 and page < total_pages - 1:
                    page += 1
                    current_selection = 0
            elif c == ord('n') and page < total_pages - 1:  # 下一页
                page += 1
                current_selection = 0  # 翻页后重置选中行为第一行
            elif c == ord('p') and page > 0:  # 上一页
                page -= 1
                current_selection = 0  # 翻页后重置选中行为第一行
            elif c == ord('a'):  # 全选
                selected_books = set(book["id"] for book in self.bookshelf.books)
            elif c == ord('c'):  # 取消全选
                selected_books.clear()
            elif c == ord(' '):  # 选择/取消选择当前行
                if current_page_books:
                    book_id = current_page_books[current_selection]["id"]
                    if book_id in selected_books:
                        selected_books.remove(book_id)
                    else:
                        selected_books.add(book_id)
            elif c in (10, 13):  # 回车键，确认删除
                if selected_books:
                    selected_books_len=len(selected_books)
                    # 确认删除
                    confirm = input_box(self.stdscr, f"{get_text('book_deletion_confirm', self.lang).format(books=selected_books_len)} (y/N): ", maxlen=1)
                    if confirm.lower() == 'y':
                        self.bookshelf.delete_books(selected_books)
                        selected_books.clear()
                        # 显示删除成功消息
                        msg = f"{get_text('book_deletion_success', self.lang).format(books=selected_books_len)}"
                        self.stdscr.addstr(books_per_page + 6, 2, msg)
                        self.stdscr.refresh()
                        time.sleep(1)
                        # 删除后重新加载书籍列表
                        self.bookshelf.books = self.bookshelf.load_books()
                        # 如果当前页没有书籍了，且不是第一页，则回到上一页
                        if not self.bookshelf.books and page > 0:
                            page -= 1
                        # 调整当前选中行，确保不越界
                        if current_selection >= len(current_page_books):
                            current_selection = max(0, len(current_page_books) - 1)
        
        # 返回书架主界面
        self.show_bookshelf()

    def update_missing_book_path(self, book_id):
        """更新丢失书籍的路径"""
        max_y, max_x = self.stdscr.getmaxyx()
        book = self.bookshelf.get_book_by_id(book_id)
        if not book:
            return
            
        new_path = input_box(self.stdscr, f"{get_text('books', self.lang)} '{book['title']}' {get_text('unfind_type_new', self.lang)}: ", maxlen=200)
        if new_path and os.path.exists(new_path):
            if self.bookshelf.update_book_path(book_id, new_path):
                msg = f"{get_text('update_path_success', self.lang)}"
                self.stdscr.addstr(max_y-2, 2, msg)
                self.stdscr.refresh()
                time.sleep(1)
            else:
                msg = f"{get_text('update_path_fail', self.lang)}"
                self.stdscr.addstr(max_y-2, 2, msg)
                self.stdscr.refresh()
                time.sleep(1)
        else:
            msg = f"{get_text('path_not_exists', self.lang)}"
            self.stdscr.addstr(max_y-2, 2, msg)
            self.stdscr.refresh()
            time.sleep(1)

    def show_batch_tag_edit(self, book_ids):
        """显示批量标签编辑界面 - 改进UI"""
        if not book_ids:
            return
            
        current_action = 0  # 0: 添加标签, 1: 移除标签
        tag_input = ""
        
        while True:
            self.stdscr.clear()
            max_y, max_x = self.stdscr.getmaxyx()
            
            # 显示标题
            title = f"🏷️ 批量标签编辑 ({len(book_ids)} 本书)"
            self.stdscr.attron(curses.color_pair(4) | curses.A_BOLD)
            self.stdscr.addstr(0, max_x // 2 - len(title) // 2, title)
            self.stdscr.attroff(curses.color_pair(4) | curses.A_BOLD)
            
            # 显示分隔线
            sep_line = "─" * (max_x - 4)
            self.stdscr.attron(curses.color_pair(10))
            self.stdscr.addstr(1, 2, sep_line)
            self.stdscr.attroff(curses.color_pair(10))
            
            # 显示操作选项
            actions = ["添加标签", "移除标签"]
            for idx, action in enumerate(actions):
                line = f"{'→' if idx == current_action else ' '} {action}"
                color = curses.color_pair(2) if idx == current_action else curses.color_pair(1)
                self.stdscr.attron(color)
                self.stdscr.addstr(3 + idx, 4, line)
                self.stdscr.attroff(color)
            
            # 显示标签输入框 - 改进UI使其更明显
            self.stdscr.attron(curses.color_pair(3) | curses.A_BOLD)
            self.stdscr.addstr(6, 4, "请输入标签名称:")
            self.stdscr.attroff(curses.color_pair(3) | curses.A_BOLD)
            
            # 绘制输入框
            input_width = min(40, max_x - 10)
            self.stdscr.attron(curses.color_pair(2))
            self.stdscr.addstr(7, 4, "╭" + "─" * input_width + "╮")
            self.stdscr.addstr(8, 4, "│" + " " * input_width + "│")
            self.stdscr.addstr(9, 4, "╰" + "─" * input_width + "╯")
            
            # 显示输入内容
            display_input = tag_input[:input_width]
            if len(tag_input) > input_width:
                display_input = "..." + tag_input[-input_width+3:]
                
            self.stdscr.attron(curses.color_pair(2) | curses.A_BOLD)
            self.stdscr.addstr(8, 6, display_input)
            
            # 显示光标
            if time.time() % 1 < 0.5:  # 闪烁光标
                cursor_pos = min(len(display_input), input_width - 2)
                try:
                    self.stdscr.addstr(8, 6 + cursor_pos, "_")
                except:
                    pass
                    
            self.stdscr.attroff(curses.color_pair(2) | curses.A_BOLD)
            
            # 显示操作提示
            help_text = "[↑↓] 选择操作 [Enter] 确认 [q] 返回"
            self.stdscr.attron(curses.color_pair(3) | curses.A_DIM)
            self.stdscr.addstr(11, 4, help_text[:max_x-8])
            self.stdscr.attroff(curses.color_pair(3) | curses.A_DIM)
            
            # 显示分隔线
            self.stdscr.attron(curses.color_pair(10))
            self.stdscr.addstr(12, 2, sep_line)
            self.stdscr.attroff(curses.color_pair(10))
            
            self.stdscr.refresh()
            
            c = self.stdscr.getch()
            if c == ord('q'):
                break
            elif c == curses.KEY_UP:
                if current_action > 0:
                    current_action -= 1
            elif c == curses.KEY_DOWN:
                if current_action < len(actions) - 1:
                    current_action += 1
            elif c in (10, 13):  # 回车键
                if tag_input:
                    action = "add" if current_action == 0 else "remove"
                    self.bookshelf.batch_update_tags(book_ids, action, tag_input)
                    # 显示操作结果
                    result_msg = f"已为 {len(book_ids)} 本书{actions[current_action]} '{tag_input}'"
                    self.stdscr.addstr(14, 4, result_msg)
                    self.stdscr.refresh()
                    time.sleep(1)
                    break
            elif 32 <= c <= 126:  # 可打印字符
                tag_input += chr(c)
            elif c == curses.KEY_BACKSPACE or c == 127:  # 退格键
                if tag_input:
                    tag_input = tag_input[:-1]

    def run(self):
        if self.current_book:
            while self.running:
                if self.boss_mode:
                    self.display_terminal()
                    c = self.stdscr.getch()
                    self.handle_terminal_input(c)
                else:
                    self.display()
                    self.handle_input()
                    self.save_progress()
                    self.stats.record_reading(self.current_book["id"], int(time.time() - self.start_time))
                    self.check_remind()
                    self.start_time = time.time()
                    if self.auto_page:
                        time.sleep(self.settings["auto_page_interval"])
                        self.next_page()
        else:
            self.show_bookshelf()
            while self.running:
                if self.boss_mode:
                    self.display_terminal()
                    c = self.stdscr.getch()
                    self.handle_terminal_input(c)
                else:
                    self.display()
                    self.handle_input()
                    self.save_progress()
                    self.stats.record_reading(self.current_book["id"], int(time.time() - self.start_time))
                    self.check_remind()
                    self.start_time = time.time()
                    if self.auto_page:
                        time.sleep(self.settings["auto_page_interval"])
                        self.next_page()
                        
        # 确保在退出前停止朗读
        self.stop_reading()

./settings.py
----------------------------------------
import os
import json

def get_config_path():
    home = os.environ.get("HOME")
    config_dir = os.path.join(home, ".config", "preader")
    os.makedirs(config_dir, exist_ok=True)
    return os.path.join(config_dir, "settings.json")

DEFAULT_SETTINGS = {
    "width": 200,
    "height": 50,
    "theme": "dark",
    "lang": "zh",
    "font_color": "white",
    "bg_color": "black",
    "border_style": "round",
    "border_color": "blue",
    "margin": 1,
    "padding": 2,
    "line_spacing": 1,
    "status_bar": True,
    "auto_page_interval": 5,
    "remind_interval": 0
}

class Settings:
    def __init__(self):
        self.path = get_config_path()
        self.settings = DEFAULT_SETTINGS.copy()
        self.load()

    def load(self):
        if os.path.exists(self.path):
            try:
                with open(self.path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                self.settings.update(data)
            except Exception:
                pass

    def save(self):
        with open(self.path, "w", encoding="utf-8") as f:
            json.dump(self.settings, f, ensure_ascii=False, indent=2)

    def __getitem__(self, key):
        return self.settings.get(key, DEFAULT_SETTINGS.get(key))

    def __setitem__(self, key, value):
        self.settings[key] = value

./stats.py
----------------------------------------
from db import DBManager
import datetime

class StatsManager:
    def __init__(self):
        self.db = DBManager()

    def record_reading(self, book_id, seconds):
        date = datetime.date.today().isoformat()
        self.db.record_stat(book_id, date, seconds)

    def get_book_stats(self, book_id):
        records = self.db.get_stats(book_id)
        total_time = sum(v for _, v in records)
        days = len(records)
        return {
            "total_time": total_time,
            "days": days,
            "records": records
        }

    def get_all_books_stats(self):
        # Returns stats for all books as {book_id: {total_time, days, records}}
        all_books = self.db.get_books()
        result = {}
        for book in all_books:
            book_id = book[0]
            result[book_id] = self.get_book_stats(book_id)
        return result

./ui_theme.py
----------------------------------------
import curses

COLOR_MAP = {
    "black": 0,
    "red": 1,
    "green": 2,
    "yellow": 3,
    "blue": 4,
    "magenta": 5,
    "cyan": 6,
    "white": 7,
}

THEMES = {
    "dark": {
        "font": "white",
        "bg": "black",
        "highlight": "cyan",
        "progress": "green",
        "border": "blue"
    },
    "light": {
        "font": "black",
        "bg": "white",
        "highlight": "red",
        "progress": "magenta",
        "border": "yellow"
    },
    "eye": {
        "font": "green",
        "bg": "black",
        "highlight": "yellow",
        "progress": "green",
        "border": "green"
    }
}

BORDER_CHARS = {
    "single": ('|', '-', '+'),
    "double": ('║', '═', '╬'),
    "bold": ('┃', '━', '╋'),
    "round": ('│', '─', '○'),
    "none": (' ', ' ', ' '),
}

def color_pair_idx(idx, fg, bg):
    fg_c = COLOR_MAP.get(fg, curses.COLOR_WHITE)
    bg_c = COLOR_MAP.get(bg, curses.COLOR_BLACK)
    curses.init_pair(idx, fg_c, bg_c)
    return curses.color_pair(idx)

def init_colors(theme="dark", settings=None):
    curses.start_color()
    t = THEMES[theme]
    font_color = settings["font_color"] if settings else t["font"]
    bg_color = settings["bg_color"] if settings else t["bg"]
    highlight_color = t["highlight"]
    progress_color = t["progress"]
    border_color = settings["border_color"] if settings else t["border"]

    color_pair_idx(1, font_color, bg_color)
    color_pair_idx(2, highlight_color, bg_color)
    color_pair_idx(3, progress_color, bg_color)
    color_pair_idx(4, border_color, bg_color)
    color_pair_idx(10, border_color, bg_color)

./utils.py
----------------------------------------
import chardet
import cjkwrap
from lang import get_text

def detect_encoding(file_path):
    with open(file_path, "rb") as f:
        raw = f.read(10000)
    res = chardet.detect(raw)
    encoding = res["encoding"] if res and res["encoding"] else "utf-8"
    return encoding

def stream_file_as_text(file_path):
    encoding = detect_encoding(file_path)
    with open(file_path, "r", encoding=encoding, errors="ignore") as f:
        return f.read()

def build_pages_from_text(text, width, height, line_spacing, progress_callback=None, lang="zh"):
    """
    将文本内容分页，考虑行间距和页面高度
    """

    # 检查文本是否为空
    if not text or not text.strip():
        return [[f"{get_text('empty_directory_or_file', lang)}"]]

    display_lines = []
    # 合并所有文本为显示行列表
    lines = text.replace('\r\n', '\n').replace('\r', '\n').split('\n')
    
    total_lines = len(lines)
    for i, rawline in enumerate(lines):
        # cjkwrap.wrap 返回每行不超过 width 的字符串列表
        for sub_line in cjkwrap.wrap(rawline, width):
            display_lines.append(sub_line)
            for _ in range(line_spacing - 1):
                display_lines.append("")
        
        # 每100行报告一次进度
        if progress_callback and i % 100 == 0:
            progress_callback(f"{get_text('action_document_line', lang)}: {i}/{total_lines}")
            
    # 逐页切分，不丢任何内容
    pages = []
    idx = 0
    total_display_lines = len(display_lines)
    
    while idx < total_display_lines:
        page = display_lines[idx:idx+height]
        pages.append(page)
        idx += height
        
        # 每10页报告一次进度
        if progress_callback and idx % (height * 10) == 0:
            progress_callback(f"{get_text('action_pages', lang)}: {idx}/{total_display_lines}")
            
    return pages

def build_pages_from_file(file_path, width, height, line_spacing, progress_callback=None, lang="zh"):
    """
    完全不丢失内容的分页算法（逐显示行流式分页，支持中英文混合宽度）。
    width: 每行显示宽度
    height: 每页最大行数
    line_spacing: 行间距
    """
    if progress_callback:
        progress_callback(f"{get_text('reading_from_file', lang)}")
    text = stream_file_as_text(file_path)
    
    # 检查文本是否为空
    if not text or not text.strip():
        return [[f"{get_text('empty_directory_or_file', lang)}"]]

    if progress_callback:
        progress_callback(f"{get_text('action_document_file', lang)}")
    pages = build_pages_from_text(text, width, height, line_spacing, progress_callback)
    
    return pages

以上代码是一款mac系统下的终端小说阅读器, 在批量设置书签的时候,只有1到2个会被设置上书签,其他选中都不会被设置,请帮我处理这个问题,并给出每个函数整合后的完整的函数