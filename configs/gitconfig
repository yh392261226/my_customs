# set your user tokens as environment variables, such as ~/.secrets
# See the README for examples.
[color]
	ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
	meta = 11
	frag = magenta bold
	old = red bold
	new = green bold
	func = 146 bold
	commit = yellow bold
	whitespace = red reverse
[alias]
  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -v                     # branch (verbose)

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
	ci = commit
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # checkout
	co = checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change
  ds = diff --stat                  # diff change numbers

  # log
  l = log --graph --date=short
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  log-line = log --oneline --graph --decorate

  # pull
  pl = pull                         # pull

  # push
  ps = push                         # push

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool
  undo = reset --soft HEAD^         # 重置

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
	st = status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
	cm = commit
	ad = add
	df = diff
	dfc = diff --cached
	br = branch
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	subup = submodule update --init --recursive
	subst = submodule status --recursive
	out = fire
	going = fire
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
  prompt = false
[mergetool "code"]
  cmd="/usr/local/bin/code $MERGED"     # use code
  keepbackup=false
[merge]
summary=true
verbosity=1
tool=ultracompare
oldtool=code

[apply]
  whitespace = nowarn
[branch]
  autosetupmerge = true
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = upstream
[core]
	autocrlf = input
  editor = /usr/local/bin/code --wait
  excludesfile = ~/.gitignore
	quotepath = false
	commitGraph = true
	pager = diff-so-fancy | less --tabs=4 -RFX
[advice]
  statusHints = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
mnemonicprefix=true
algorithm=patience
renames=true
tool=ultracompare
  # tool = codediff
oldtool=icdiff

[difftool]
   prompt = false
[difftool "icdiff"]
   cmd = icdiff --line-numbers $LOCAL $REMOTE
# [difftool "codediff"]
	# cmd = /usr/local/bin/code --wait --diff $LOCAL $REMOTE
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
[include]
  path = .gitconfig.user
[user]
	name = 空格不在
	email = yh392261226@sina.com
[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
[http]
	postBuffer = 524288000
	sslVerify = true
	lowSpeedTime = 300
	lowSpeedLimit = 0
[gc]
	writeCommitGraph = true
[interactive]
	diffFilter = diff-so-fancy --patch
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[pull]
	rebase = false

[mergetool "ultracompare"]
keepBackup=false
trustExitCode=false
prompt=false
cmd=\"/Applications/UltraCompare.app/Contents/MacOS/UltraCompare\" -gitm "$LOCAL" "$REMOTE" "$BASE" "$MERGED" -title1 "LOCAL" -title2 "REMOTE" -ff

[UC]
defdiffmerge=yes
defdiff=yes

[difftool "ultracompare"]
keepBackup=false
trustExitCode=false
prompt=false
cmd=\"/Applications/UltraCompare.app/Contents/MacOS/UltraCompare\" -gitdt "$LOCAL" "$REMOTE" "$BASE" "$MERGED" -title1 "LOCAL" -title2 "REMOTE" -ff
[receive]
	advertisePushOptions = true
	procReceiveRefs = refs/for
[safe]
	directory = /opt/homebrew/Library/Taps/homebrew/homebrew-cask
	directory = /opt/homebrew/Library/Taps/homebrew/homebrew-core
	directory = /opt/homebrew/Library/Taps/homebrew/homebrew-core
[url "git@github.com:"]
	insteadOf = https://github.com/
